{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/prosemirror-model/dist/index.js","webpack:///./node_modules/prosemirror-state/dist/index.js","webpack:///./node_modules/prosemirror-transform/dist/index.js","webpack:///./node_modules/prosemirror-schema-basic/dist/schema-basic.js","webpack:///./node_modules/prosemirror-view/dist/index.js","webpack:///./src/app.js","webpack:///./node_modules/orderedmap/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ex","OrderedMap","Fragment","content","size","this","length","nodeSize","prototypeAccessors$1","firstChild","lastChild","childCount","nodesBetween","from","to","f","nodeStart","parent","pos","child","end","start","Math","max","min","descendants","textBetween","blockSeparator","leafText","text","separated","node","isText","slice","isLeaf","isBlock","append","other","last","first","sameMarkup","withText","push","cut","result","cutByIndex","empty","replaceChild","index","current","copy","addToStart","concat","addToEnd","eq","found","RangeError","maybeChild","forEach","findDiffStart","a","b","childA","childB","j","inner","findDiffEnd","otherPos","posA","posB","iA","iB","same","minSize","findIndex","round","retIndex","curPos","toString","toStringInner","join","toJSON","map","fromJSON","schema","Array","isArray","nodeFromJSON","fromArray","array","joined","nodes","defineProperties","offset","compareDeep","p$1","Mark","type","attrs","ReplaceError","message","err","Error","__proto__","addToSet","set","placed","excludes","rank","removeFromSet","isInSet","obj","_","json","marks","sameSet","setFrom","none","sort","constructor","Slice","openStart","openEnd","prototypeAccessors$2","replace","$from","$to","depth","replaceOuter","ref","$along","extra","resolveNoCache","prepareSliceForReplace","close","replaceThreeWay","$start","$end","joinable","addRange","checkJoin","addNode","replaceTwoWay","parentOffset","main","sub","compatibleContent","$before","$after","target","startIndex","endIndex","textOffset","nodeAfter","nodeBefore","validContent","insertAt","fragment","insertInto","dist","insert","canReplace","removeBetween","removeRange","ref$1","indexTo","offsetTo","maxOpen","openIsolating","spec","isolating","n$1","ResolvedPos","path","prototypeAccessors$3","doc","resolveDepth","val","indexAfter","before","after","dOff","tmp","inclusive","marksAcross","isInline","next","sharedDepth","blockRange","pred","inlineContent","NodeRange","sameParent","str","resolve","rem","resolveCached","resolveCache","cached","resolveCachePos","resolveCacheSize","prototypeAccessors$1$1","emptyAttrs","Node","prototypeAccessors","textContent","isTextblock","isAtom","startPos","hasMarkup","defaultAttrs","mark","includeParents","nodeAt","childAfter","childBefore","rangeHasMark","toDebugString","wrapMarks","contentMatchAt","match","contentMatch","matchFragment","replacement","one","two","validEnd","allowsMarks","canReplaceWith","matchType","canAppend","defaultContentType","at","defaultType","check","markFromJSON","nodeType","TextNode","JSON","stringify","base","ContentMatch","wrapCache","prototypeAccessors$5","edgeCount","parse","string","nodeTypes","stream","TokenStream","expr","parseExpr","nfa","labeled","explore","states","out","term","known","indexOf","nullFrom","state","states$1","cmp","dfa","connect","compile","exprs","reduce","loop","edge","loop$1","cur","i$1","next$1","i$2","next$2","edges","work","dead","hasRequiredAttrs","checkForDeadEnds","frag","compatible","fillBefore","toEnd","seen","search","types","finished","tp","createAndFill","findWrapping","computed","computeWrapping","active","via","shift","reverse","scan","inline","tokens","split","pop","unshift","prototypeAccessors$1$3","parseExprSeq","eat","parseExprSubscript","test","typeName","type$1","groups","resolveName","parseExprAtom","parseExprRange","parseNum","Number","defaults","attrName","attr","hasDefault","default","computeAttrs","built","given","undefined","initAttrs","Attribute","tok","SyntaxError","NodeType","group","markSet","prototypeAccessors$4","atom","ignore","isRequired","createChecked","allowsMarkType","markType","allowedMarks","topType","topNode","options","prototypeAccessors$1$2","MarkType","excluded","instance","Schema","prop","contentExprCache","prop$1","contentExpr","markExpr","gatherMarks","prop$2","excl","topNodeType","wrappings","ok","mark$1","text$1","DOMParser","rules","this$1","tags","styles","rule","tag","style","dom","context","ParseContext","addAll","finish","parseSlice","matchTag","matches","namespace","namespaceURI","matchesContext","getAttrs","matchStyle","charCodeAt","schemaRules","priority","splice","parseDOM","rules$1","name$1","fromSchema","domParser","blockTags","address","article","aside","blockquote","canvas","dd","div","dl","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","hr","li","noscript","ol","output","pre","section","table","tfoot","ul","ignoreTags","head","script","title","listTags","OPT_PRESERVE_WS","OPT_PRESERVE_WS_FULL","wsOptionsFor","preserveWhitespace","NodeContext","solid","activeMarks","fill","wrap","exec","parser","open","isOpen","pendingMarks","topContext","topOptions","topMatch","find","findPositions","needsBlock","prototypeAccessors$6","top","currentPos","selector","msMatchesSelector","webkitMatchesSelector","mozMatchesSelector","addDOM","addTextNode","getAttribute","readStyles","re","trim","parseStyles","addPendingMark","addElement","removePendingMark","nodeValue","domNodeBefore","previousSibling","nodeName","insertNode","findInText","findInside","toLowerCase","prevItem","nextSibling","appendChild","normalizeList","ruleFromNode","skip","sync","oldNeedsBlock","addElementByRule","enter","startIn","getContent","contentDOM","contentElement","querySelector","findAround","childNodes","findAtPoint","findPlace","route","cx","enterInner","block","textblockFromContext","closeExtra","applyPendingMarks","preserveWS","topOpen","lastIndexOf","contains","compareDocumentPosition","textNode","some","parts","option","useRoot","minDepth","part","$context","deflt","DOMSerializer","gatherToDOM","toDOM","document","window","serializeFragment","createDocumentFragment","keep","rendered","spanning","add","markDOM","serializeMark","serializeNode","renderSpec","onContent","serializeNodeAndMarks","structure","createTextNode","createElement","setAttribute","innerContent","domSerializer","nodesFromSchema","marksFromSchema","prosemirrorModel","prosemirrorTransform","classesById","Selection","$anchor","$head","ranges","SelectionRange","anchor","tr","lastNode","lastParent","mapFrom","steps","mapping","replaceRange","selectionToInsertionEnd","replaceWith","deleteRange","replaceRangeWith","findFrom","$pos","dir","textOnly","TextSelection","findSelectionIn","near","bias","AllSelection","atStart","atEnd","cls","jsonID","id","selectionClass","getBookmark","between","visible","$cursor","ensureMarks","TextBookmark","dPos","NodeSelection","mapResult","deleted","NodeBookmark","isSelectable","selectable","AllBookmark","startLen","step","ReplaceStep","ReplaceAroundStep","maps","_from","_to","_newFrom","newTo","setSelection","Transaction","Transform$$1","time","Date","now","curSelection","selection","curSelectionFor","storedMarks","updated","meta","selectionSet","storedMarksSet","isGeneric","scrolledIntoView","setStoredMarks","addStoredMark","removeStoredMark","addStep","setTime","replaceSelection","replaceSelectionWith","inheritMarks","deleteSelection","insertText","setMeta","getMeta","scrollIntoView","Transform","self","FieldDesc","desc","init","apply","baseFields","config","_marks","_old","prev","Configuration","plugins","fields","pluginsByKey","plugin","EditorState","applyTransaction","filterTransaction","rootTr","transactions","trs","newState","applyInner","haveNew","appendTransaction","oldState","newInstance","field","applyListeners","$config","reconfigure","pluginFields","addApplyListener","removeApplyListener","Plugin","props","bindProps","Function","createKey","getState","keys","PluginKey","lower16","factor16","pow","recoverIndex","MapResult","recover","StepMap","inverted","diff","recoverOffset","assoc","_map","simple","oldIndex","newIndex","oldSize","newSize","touches","oldStart","newStart","invert","Mapping","mirror","TransformError","appendMap","mirrors","setMirror","appendMapping","startSize","mirr","getMirror","appendMappingInverted","totalSize","inverse","recoverables","rec","corr","docs","docChanged","mustOverride","maybeStep","failed","getMap","stepsByID","Step","_doc","_mapping","merge","_other","stepType","stepClass","StepResult","fail","fromReplace","e","Step$$1","contentBetween","slice$1","gapFrom","gapTo","gap","inserted","canCut","withAttrs","insertPoint","d$1","index$1","mapFragment","mapped","lift","range","gapStart","gapEnd","splitting","splitting$1","wrappers","setBlockType","canChangeType","clearIncompatible","startM","endM","setNodeMarkup","newNode","typesAfter","typeAfter","AddMarkStep","oldSlice","RemoveMarkStep","replaceStep","fitsTrivially","fittedLeft","fitLeftInner","placedBelow","placedHere","fitLeft","frontier","Frontier","pass","placeSlice","closeNode","fitted","fitRight","nodeRight","canMoveText","fittedAfter","fitRightJoin","count","matchCount","parentNode","toNode","joinable$1","toIndex","closed","fitRightClosed","fitRightSeparate","normalizeSlice","addMark","removed","added","removing","adding","newSet","removeMark","matched","toRemove","found$1","parentType","delSteps","allowed","delete","wrapper","closeNodeStart","closeFragment","oldOpen","newOpen","coveredDepths","placeContent","w","ch","closeNodeEnd","targetDepths","preferredTarget","defining","preferredTargetIndex","leftNodes","preferredDepth","openDepth","targetDepth","expand","point","covered","joinPoint","canJoin","canSplit","innerType","rest","baseType","dropPoint","insertPos","liftTarget","innerRange","around","outer","findWrappingOutside","inside","innerMatch","findWrappingInside","paragraph","horizontal_rule","heading","level","code_block","code","image","src","alt","draggable","hard_break","link","href","em","strong","fontWeight","prosemirrorState","navigator","ie_edge","userAgent","ie_upto10","ie_11up","mac","platform","ie","ie_version","documentMode","gecko","gecko_version","chrome","chrome_version","ios","android","webkit","documentElement","safari","vendor","webkit_version","domIndex","host","textRange","createRange","setEnd","setStart","isEquivalentPosition","off","targetNode","targetOff","scanFor","atomElements","pmViewDesc","contentEditable","selectionCollapsed","domSel","collapsed","isCollapsed","rangeCount","getRangeAt","keyEvent","keyCode","event","createEvent","initEvent","windowRect","win","left","right","innerWidth","bottom","innerHeight","getSide","side","scrollRectIntoView","view","rect","startDOM","scrollThreshold","someProp","scrollMargin","ownerDocument","defaultView","atTop","body","bounding","getBoundingClientRect","moveX","moveY","scrollBy","scrollTop","scrollLeft","findOffsetInNode","coords","closest","coordsClosest","dxClosest","rowBot","rowTop","childIndex","rects","getClientRects","dx","len","singleRect","inRect","findOffsetInText","posAtCoords","root","caretPositionFromPoint","assign","pos$1","offsetNode","caretRangeFromPoint","assign$1","startContainer","startOffset","elt","elementFromPoint","box","element","startI","floor","targetKludge","outside","docView","nearestDesc","posBefore","posAfter","posFromDOM","posFromCaret","posFromElement","posAtStart","border","coordsAtPos","domFromPos","rectBefore","abs","rectAfter","flatten","rect$1","target$1","rect$2","width","x","withFlushedState","viewState","activeElement","inDOMChange","updateState","focus","maybeRTL","cachedState","cachedDir","cachedResult","endOfTextblock","sel","nearest","boxes","endOfTextblockVertical","getSelection","modify","oldRange","oldNode","focusNode","oldOff","focusOffset","result$$1","domAfterPos","removeAllRanges","endOfTextblockHorizontal","ViewDesc","children","dirty","beforePosition","posAtEnd","contentLost","matchesWidget","matchesMark","matchesNode","matchesHack","parseRule","stopEvent","destroy","posBeforeChild","localPosFromDOM","domBefore","domAfter","desc$1","search$1","onlyNodes","getDesc","nodeDOM","descAt","parseRange","fromOffset","toOffset","childBase","emptyChildAt","j$1","force","anchorDOM","headDOM","anchorNode","anchorOffset","extend","collapse","ignoreMutation","_mutation","markDirty","startInside","endInside","nothing","WidgetViewDesc","widget","raw","classList","stop","CursorWrapperDesc","arguments","cloneNode","MarkViewDesc","custom","nodeViews","NodeViewDesc","outerDeco","innerDeco","updateChildren","descObj","hasAttribute","applyOuterDeco","CustomNodeViewDesc","TextViewDesc","reparseInView","sameOuterDeco","updater","ViewTreeUpdater","deco","onWidget","onNode","locals","forChild","decoIndex","restNode","parentIndex","widgets","compareSide","child$1","cutAt","i$3","iterDeco","syncToMarks","placeWidget","findNodeMatch","updateNextNode","addTextblockHacks","destroyRest","changed","renderChildren","renderDescs","parentDOM","descs","childDOM","rm","insertBefore","is","oldCSS","cssText","getComputedStyle","listStyle","iosHacks","update","updateInner","updateOuterDeco","needsWrap","oldDOM","patchOuterDeco","computeOuterDeco","selectNode","deselectNode","remove","docViewDesc","inParent","mutation","BRHackViewDesc","OuterDecoLevel","noDeco","class","outerDOM","prevComputed","curComputed","curDOM","tagName","patchAttributes","removeAttribute","prevList","curList","removeChild","stack","preMatched","preMatch","moveSelectionBlock","$side","dispatch","selectHorizontally","mods","nodePos","nodeLen","isIgnorable","skipIgnoredNodesLeft","moveNode","moveOffset","charAt","isBlockNode","setSelFocus","skipIgnoredNodesRight","selectionReader","storeDOMState","selectVertically","beyond","stopNativeHorizontalDelete","nextNode","switchEditable","domObserver","captureKeyDown","ctrlKey","metaKey","altKey","shiftKey","getMods","setTimeout","chromeDownArrowBug","destroyBetween","maxKeep","markDesc","nextDOM","isCursorWrapper","TrackedRecord","TrackMappings","track","record","old","getMapping","appendTo","mappings","SelectionReader","lastAnchorNode","lastHeadNode","lastAnchorOffset","lastHeadOffset","lastSelection","ignoreUpdates","suppressUpdates","poller","SelectionChangePoller","TimeoutPoller","focusFunc","hasFocusAndSelection","blurFunc","addEventListener","editable","removeEventListener","poll","origin","editableChanged","domChanged","clearDOMState","readFromDOM","selectionToDOM","flush","inWidget","selectionBetween","reader","listening","curOrigin","originTime","readFunc","andRead","polling","pollFunc","doPoll","takeFocus","syncNodeSelection","hasFocus","hasSelection","cursorWrapper","disabled","selectCursorWrapper","resetEditableFrom","resetEditableTo","brokenSelectBetweenUneditable","temporarilyEditableNear","hideSelectionGuard","removeClassOnSelectionChange","focused","clearTimeout","lastSelectedViewDesc","clearNodeSelection","nonInclusiveMark","needsCursorWrapper","DOMChange","composing","compositionEndedAt","typeOver","timeout","commitTimeout","trackMappings","mappingTo","isAtEnd","isAtStart","resolveSelection","parsedSel","skipClosingAndOpening","fromEnd","mayOpen","serializeForClipboard","serializer","wrapMap","parseFromClipboard","html","plainText","inCode","asText","parsed","metas","detachedDoc","implementation","createHTMLDocument","firstTag","innerHTML","readHTML","contextNode","sliceData","addContext","lastWrap","inLast","addToSibling","sibling","withWrappers","closeRight","wrapped","v","returned","normalizeSiblings","changedRange","startOff","endOff","fromStart","rangeAroundSelection","shared","stateUpdated","allowTypeOver","preferredPos","preferredSide","lastKeyCode","startDoc","editableContent","anchor$1","parseBetween","compare","lastKeyCodeTime","change","endA","endB","adjust","move","move$1","findDiff","sel$1","domChangeCount","nextSel","$newStart","$newEnd","$next","looksLikeJoin","markChange","$from1","curMarks","prevMarks","isMarkChange","sel$2","readDOMChange","compositionEnd","timeStamp","ignoreKeyDownOnCompositionEnd","thead","colgroup","col","td","th","observeOptions","childList","characterData","attributes","subtree","characterDataOldValue","useCharData","DOMObserver","observer","MutationObserver","mutations","registerMutations","onCharData","registerMutation","oldValue","prevValue","observe","disconnect","takeRecords","mut","attributeName","handlers","editHandlers","ensureListeners","currentHandlers","eventHandlers","runCustomHandler","handler","defaultPrevented","eventCoords","clientX","clientY","runHandlerOnContext","propName","updateSelection","handleSingleClick","selectedNode","selectAt","selectClickedNode","selectClickedLeaf","handleTripleClick","defaultTripleClick","forceDOMFlush","keydown","preventDefault","keyup","keypress","charCode","String","fromCharCode","selectNodeModifier","mousedown","flushed","lastClick","click","dy","y","isNear","mouseDown","MouseDown","targetPos","allowDefault","mightDrag","targetDesc","addAttr","setUneditable","up","done","touchdown","contextmenu","compositionstart","compositionupdate","compositionend","data","input","brokenClipboardAPI","doPaste","singleNode","sliceSingleNode","clipboardData","clearData","setData","selectNodeContents","blur","captureCopy","paste","getData","files","capturePaste","Dragging","dragCopyModifier","dragstart","dataTransfer","dragging","dragend","dragover","dragenter","drop","eventPos","$mouse","isNode","beforeInsert","beforeinput","inputType","compareObjs","WidgetType","noSpec","span","oldOffset","Decoration","valid","InlineType","inclusiveStart","inclusiveEnd","DecorationSet","local","decorations","buildTree","predicate","findInner","childOff","mapInner","newLocal","onRemove","oldChildren","oldEnd","newEnd","dSize","mustRebuild","fromLocal","toLocal","childOffset","childNode","gather","mapAndGatherRemainingDecorations","from$1","byPos","mapChildren","addInner","baseOffset","takeSpansForNode","moveSpans","withoutNulls","removeInner","span$1","dec","localSet","DecorationGroup","removeOverlap","localsInner","members","spans","hasNulls","localStart","working","insertAhead","viewDecorations","sorted","EditorView","place","_props","_root","mount","mounted","getEditable","redraw","updateCursorWrapper","buildNodeViews","computeDocDeco","bubbles","eventBelongsToView","initInput","pluginViews","updatePluginViews","contenteditable","position","cursorWrapperDOM","selectionContext","handleDOMEvents","nA","nB","changedNodeViews","setProps","prevEditable","scroll","scrollToSelection","updateDoc","updateSel","oldScrollPos","refDOM","refTop","startY","localRect","dom$1","storeScrollPos","forceSelUpdate","startSelContext","newContext","needChromeSelectionForce","newRefTop","dTop","resetScrollPos","destroyPluginViews","prevState","pluginView","domAtPos","posAtDOM","destroyInput","dispatchEvent","dispatchTransaction","__serializeForClipboard","__parseFromClipboard","__webpack_exports__","prosemirror_schema_basic__WEBPACK_IMPORTED_MODULE_0__","prosemirror_state__WEBPACK_IMPORTED_MODULE_1__","prosemirror_view__WEBPACK_IMPORTED_MODULE_2__","getElementById","newKey","addBefore","without","prepend","subtract"],"mappings":"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","file":"app.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar OrderedMap = _interopDefault(require('orderedmap'));\n\nfunction findDiffStart(a, b, pos) {\n  for (var i = 0;; i++) {\n    if (i == a.childCount || i == b.childCount) {\n      return a.childCount == b.childCount ? null : pos;\n    }\n\n    var childA = a.child(i),\n        childB = b.child(i);\n\n    if (childA == childB) {\n      pos += childA.nodeSize;\n      continue;\n    }\n\n    if (!childA.sameMarkup(childB)) {\n      return pos;\n    }\n\n    if (childA.isText && childA.text != childB.text) {\n      for (var j = 0; childA.text[j] == childB.text[j]; j++) {\n        pos++;\n      }\n\n      return pos;\n    }\n\n    if (childA.content.size || childB.content.size) {\n      var inner = findDiffStart(childA.content, childB.content, pos + 1);\n\n      if (inner != null) {\n        return inner;\n      }\n    }\n\n    pos += childA.nodeSize;\n  }\n}\n\nfunction findDiffEnd(a, b, posA, posB) {\n  for (var iA = a.childCount, iB = b.childCount;;) {\n    if (iA == 0 || iB == 0) {\n      return iA == iB ? null : {\n        a: posA,\n        b: posB\n      };\n    }\n\n    var childA = a.child(--iA),\n        childB = b.child(--iB),\n        size = childA.nodeSize;\n\n    if (childA == childB) {\n      posA -= size;\n      posB -= size;\n      continue;\n    }\n\n    if (!childA.sameMarkup(childB)) {\n      return {\n        a: posA,\n        b: posB\n      };\n    }\n\n    if (childA.isText && childA.text != childB.text) {\n      var same = 0,\n          minSize = Math.min(childA.text.length, childB.text.length);\n\n      while (same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]) {\n        same++;\n        posA--;\n        posB--;\n      }\n\n      return {\n        a: posA,\n        b: posB\n      };\n    }\n\n    if (childA.content.size || childB.content.size) {\n      var inner = findDiffEnd(childA.content, childB.content, posA - 1, posB - 1);\n\n      if (inner) {\n        return inner;\n      }\n    }\n\n    posA -= size;\n    posB -= size;\n  }\n} // ::- A fragment represents a node's collection of child nodes.\n//\n// Like nodes, fragments are persistent data structures, and you\n// should not mutate them or their content. Rather, you create new\n// instances whenever needed. The API tries to make this easy.\n\n\nvar Fragment = function Fragment(content, size) {\n  var this$1 = this;\n  this.content = content; // :: number\n  // The size of the fragment, which is the total of the size of its\n  // content nodes.\n\n  this.size = size || 0;\n\n  if (size == null) {\n    for (var i = 0; i < content.length; i++) {\n      this$1.size += content[i].nodeSize;\n    }\n  }\n};\n\nvar prototypeAccessors$1 = {\n  firstChild: {},\n  lastChild: {},\n  childCount: {}\n}; // :: (number, number, (node: Node, start: number, parent: Node, index: number) → ?bool, ?number)\n// Invoke a callback for all descendant nodes between the given two\n// positions (relative to start of this fragment). Doesn't descend\n// into a node when the callback returns `false`.\n\nFragment.prototype.nodesBetween = function nodesBetween(from, to, f, nodeStart, parent) {\n  var this$1 = this;\n  if (nodeStart === void 0) nodeStart = 0;\n\n  for (var i = 0, pos = 0; pos < to; i++) {\n    var child = this$1.content[i],\n        end = pos + child.nodeSize;\n\n    if (end > from && f(child, nodeStart + pos, parent, i) !== false && child.content.size) {\n      var start = pos + 1;\n      child.nodesBetween(Math.max(0, from - start), Math.min(child.content.size, to - start), f, nodeStart + start);\n    }\n\n    pos = end;\n  }\n}; // :: ((node: Node, pos: number, parent: Node) → ?bool)\n// Call the given callback for every descendant node. The callback\n// may return `false` to prevent traversal of a given node's children.\n\n\nFragment.prototype.descendants = function descendants(f) {\n  this.nodesBetween(0, this.size, f);\n}; // : (number, number, ?string, ?string) → string\n\n\nFragment.prototype.textBetween = function textBetween(from, to, blockSeparator, leafText) {\n  var text = \"\",\n      separated = true;\n  this.nodesBetween(from, to, function (node, pos) {\n    if (node.isText) {\n      text += node.text.slice(Math.max(from, pos) - pos, to - pos);\n      separated = !blockSeparator;\n    } else if (node.isLeaf && leafText) {\n      text += leafText;\n      separated = !blockSeparator;\n    } else if (!separated && node.isBlock) {\n      text += blockSeparator;\n      separated = true;\n    }\n  }, 0);\n  return text;\n}; // :: (Fragment) → Fragment\n// Create a new fragment containing the combined content of this\n// fragment and the other.\n\n\nFragment.prototype.append = function append(other) {\n  if (!other.size) {\n    return this;\n  }\n\n  if (!this.size) {\n    return other;\n  }\n\n  var last = this.lastChild,\n      first = other.firstChild,\n      content = this.content.slice(),\n      i = 0;\n\n  if (last.isText && last.sameMarkup(first)) {\n    content[content.length - 1] = last.withText(last.text + first.text);\n    i = 1;\n  }\n\n  for (; i < other.content.length; i++) {\n    content.push(other.content[i]);\n  }\n\n  return new Fragment(content, this.size + other.size);\n}; // :: (number, ?number) → Fragment\n// Cut out the sub-fragment between the two given positions.\n\n\nFragment.prototype.cut = function cut(from, to) {\n  var this$1 = this;\n\n  if (to == null) {\n    to = this.size;\n  }\n\n  if (from == 0 && to == this.size) {\n    return this;\n  }\n\n  var result = [],\n      size = 0;\n\n  if (to > from) {\n    for (var i = 0, pos = 0; pos < to; i++) {\n      var child = this$1.content[i],\n          end = pos + child.nodeSize;\n\n      if (end > from) {\n        if (pos < from || end > to) {\n          if (child.isText) {\n            child = child.cut(Math.max(0, from - pos), Math.min(child.text.length, to - pos));\n          } else {\n            child = child.cut(Math.max(0, from - pos - 1), Math.min(child.content.size, to - pos - 1));\n          }\n        }\n\n        result.push(child);\n        size += child.nodeSize;\n      }\n\n      pos = end;\n    }\n  }\n\n  return new Fragment(result, size);\n};\n\nFragment.prototype.cutByIndex = function cutByIndex(from, to) {\n  if (from == to) {\n    return Fragment.empty;\n  }\n\n  if (from == 0 && to == this.content.length) {\n    return this;\n  }\n\n  return new Fragment(this.content.slice(from, to));\n}; // :: (number, Node) → Fragment\n// Create a new fragment in which the node at the given index is\n// replaced by the given node.\n\n\nFragment.prototype.replaceChild = function replaceChild(index, node) {\n  var current = this.content[index];\n\n  if (current == node) {\n    return this;\n  }\n\n  var copy = this.content.slice();\n  var size = this.size + node.nodeSize - current.nodeSize;\n  copy[index] = node;\n  return new Fragment(copy, size);\n}; // : (Node) → Fragment\n// Create a new fragment by prepending the given node to this\n// fragment.\n\n\nFragment.prototype.addToStart = function addToStart(node) {\n  return new Fragment([node].concat(this.content), this.size + node.nodeSize);\n}; // : (Node) → Fragment\n// Create a new fragment by appending the given node to this\n// fragment.\n\n\nFragment.prototype.addToEnd = function addToEnd(node) {\n  return new Fragment(this.content.concat(node), this.size + node.nodeSize);\n}; // :: (Fragment) → bool\n// Compare this fragment to another one.\n\n\nFragment.prototype.eq = function eq(other) {\n  var this$1 = this;\n\n  if (this.content.length != other.content.length) {\n    return false;\n  }\n\n  for (var i = 0; i < this.content.length; i++) {\n    if (!this$1.content[i].eq(other.content[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}; // :: ?Node\n// The first child of the fragment, or `null` if it is empty.\n\n\nprototypeAccessors$1.firstChild.get = function () {\n  return this.content.length ? this.content[0] : null;\n}; // :: ?Node\n// The last child of the fragment, or `null` if it is empty.\n\n\nprototypeAccessors$1.lastChild.get = function () {\n  return this.content.length ? this.content[this.content.length - 1] : null;\n}; // :: number\n// The number of child nodes in this fragment.\n\n\nprototypeAccessors$1.childCount.get = function () {\n  return this.content.length;\n}; // :: (number) → Node\n// Get the child node at the given index. Raise an error when the\n// index is out of range.\n\n\nFragment.prototype.child = function child(index) {\n  var found = this.content[index];\n\n  if (!found) {\n    throw new RangeError(\"Index \" + index + \" out of range for \" + this);\n  }\n\n  return found;\n}; // :: (number) → ?Node\n// Get the child node at the given index, if it exists.\n\n\nFragment.prototype.maybeChild = function maybeChild(index) {\n  return this.content[index];\n}; // :: ((node: Node, offset: number, index: number))\n// Call `f` for every child node, passing the node, its offset\n// into this parent node, and its index.\n\n\nFragment.prototype.forEach = function forEach(f) {\n  var this$1 = this;\n\n  for (var i = 0, p = 0; i < this.content.length; i++) {\n    var child = this$1.content[i];\n    f(child, p, i);\n    p += child.nodeSize;\n  }\n}; // :: (Fragment) → ?number\n// Find the first position at which this fragment and another\n// fragment differ, or `null` if they are the same.\n\n\nFragment.prototype.findDiffStart = function findDiffStart$1(other, pos) {\n  if (pos === void 0) pos = 0;\n  return findDiffStart(this, other, pos);\n}; // :: (Fragment) → ?{a: number, b: number}\n// Find the first position, searching from the end, at which this\n// fragment and the given fragment differ, or `null` if they are the\n// same. Since this position will not be the same in both nodes, an\n// object with two separate positions is returned.\n\n\nFragment.prototype.findDiffEnd = function findDiffEnd$1(other, pos, otherPos) {\n  if (pos === void 0) pos = this.size;\n  if (otherPos === void 0) otherPos = other.size;\n  return findDiffEnd(this, other, pos, otherPos);\n}; // : (number, ?number) → {index: number, offset: number}\n// Find the index and inner offset corresponding to a given relative\n// position in this fragment. The result object will be reused\n// (overwritten) the next time the function is called. (Not public.)\n\n\nFragment.prototype.findIndex = function findIndex(pos, round) {\n  var this$1 = this;\n  if (round === void 0) round = -1;\n\n  if (pos == 0) {\n    return retIndex(0, pos);\n  }\n\n  if (pos == this.size) {\n    return retIndex(this.content.length, pos);\n  }\n\n  if (pos > this.size || pos < 0) {\n    throw new RangeError(\"Position \" + pos + \" outside of fragment (\" + this + \")\");\n  }\n\n  for (var i = 0, curPos = 0;; i++) {\n    var cur = this$1.child(i),\n        end = curPos + cur.nodeSize;\n\n    if (end >= pos) {\n      if (end == pos || round > 0) {\n        return retIndex(i + 1, end);\n      }\n\n      return retIndex(i, curPos);\n    }\n\n    curPos = end;\n  }\n}; // :: () → string\n// Return a debugging string that describes this fragment.\n\n\nFragment.prototype.toString = function toString() {\n  return \"<\" + this.toStringInner() + \">\";\n};\n\nFragment.prototype.toStringInner = function toStringInner() {\n  return this.content.join(\", \");\n}; // :: () → ?Object\n// Create a JSON-serializeable representation of this fragment.\n\n\nFragment.prototype.toJSON = function toJSON() {\n  return this.content.length ? this.content.map(function (n) {\n    return n.toJSON();\n  }) : null;\n}; // :: (Schema, ?Object) → Fragment\n// Deserialize a fragment from its JSON representation.\n\n\nFragment.fromJSON = function fromJSON(schema, value) {\n  if (!value) {\n    return Fragment.empty;\n  }\n\n  if (!Array.isArray(value)) {\n    throw new RangeError(\"Invalid input for Fragment.fromJSON\");\n  }\n\n  return new Fragment(value.map(schema.nodeFromJSON));\n}; // :: ([Node]) → Fragment\n// Build a fragment from an array of nodes. Ensures that adjacent\n// text nodes with the same marks are joined together.\n\n\nFragment.fromArray = function fromArray(array) {\n  if (!array.length) {\n    return Fragment.empty;\n  }\n\n  var joined,\n      size = 0;\n\n  for (var i = 0; i < array.length; i++) {\n    var node = array[i];\n    size += node.nodeSize;\n\n    if (i && node.isText && array[i - 1].sameMarkup(node)) {\n      if (!joined) {\n        joined = array.slice(0, i);\n      }\n\n      joined[joined.length - 1] = node.withText(joined[joined.length - 1].text + node.text);\n    } else if (joined) {\n      joined.push(node);\n    }\n  }\n\n  return new Fragment(joined || array, size);\n}; // :: (?union<Fragment, Node, [Node]>) → Fragment\n// Create a fragment from something that can be interpreted as a set\n// of nodes. For `null`, it returns the empty fragment. For a\n// fragment, the fragment itself. For a node or array of nodes, a\n// fragment containing those nodes.\n\n\nFragment.from = function from(nodes) {\n  if (!nodes) {\n    return Fragment.empty;\n  }\n\n  if (nodes instanceof Fragment) {\n    return nodes;\n  }\n\n  if (Array.isArray(nodes)) {\n    return this.fromArray(nodes);\n  }\n\n  return new Fragment([nodes], nodes.nodeSize);\n};\n\nObject.defineProperties(Fragment.prototype, prototypeAccessors$1);\nvar found = {\n  index: 0,\n  offset: 0\n};\n\nfunction retIndex(index, offset) {\n  found.index = index;\n  found.offset = offset;\n  return found;\n} // :: Fragment\n// An empty fragment. Intended to be reused whenever a node doesn't\n// contain anything (rather than allocating a new empty fragment for\n// each leaf node).\n\n\nFragment.empty = new Fragment([], 0);\n\nfunction compareDeep(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (!(a && typeof a == \"object\") || !(b && typeof b == \"object\")) {\n    return false;\n  }\n\n  var array = Array.isArray(a);\n\n  if (Array.isArray(b) != array) {\n    return false;\n  }\n\n  if (array) {\n    if (a.length != b.length) {\n      return false;\n    }\n\n    for (var i = 0; i < a.length; i++) {\n      if (!compareDeep(a[i], b[i])) {\n        return false;\n      }\n    }\n  } else {\n    for (var p in a) {\n      if (!(p in b) || !compareDeep(a[p], b[p])) {\n        return false;\n      }\n    }\n\n    for (var p$1 in b) {\n      if (!(p$1 in a)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n} // ::- A mark is a piece of information that can be attached to a node,\n// such as it being emphasized, in code font, or a link. It has a type\n// and optionally a set of attributes that provide further information\n// (such as the target of the link). Marks are created through a\n// `Schema`, which controls which types exist and which\n// attributes they have.\n\n\nvar Mark = function Mark(type, attrs) {\n  // :: MarkType\n  // The type of this mark.\n  this.type = type; // :: Object\n  // The attributes associated with this mark.\n\n  this.attrs = attrs;\n}; // :: ([Mark]) → [Mark]\n// Given a set of marks, create a new set which contains this one as\n// well, in the right position. If this mark is already in the set,\n// the set itself is returned. If any marks that are set to be\n// [exclusive](#model.MarkSpec.excludes) with this mark are present,\n// those are replaced by this one.\n\n\nMark.prototype.addToSet = function addToSet(set) {\n  var this$1 = this;\n  var copy,\n      placed = false;\n\n  for (var i = 0; i < set.length; i++) {\n    var other = set[i];\n\n    if (this$1.eq(other)) {\n      return set;\n    }\n\n    if (this$1.type.excludes(other.type)) {\n      if (!copy) {\n        copy = set.slice(0, i);\n      }\n    } else if (other.type.excludes(this$1.type)) {\n      return set;\n    } else {\n      if (!placed && other.type.rank > this$1.type.rank) {\n        if (!copy) {\n          copy = set.slice(0, i);\n        }\n\n        copy.push(this$1);\n        placed = true;\n      }\n\n      if (copy) {\n        copy.push(other);\n      }\n    }\n  }\n\n  if (!copy) {\n    copy = set.slice();\n  }\n\n  if (!placed) {\n    copy.push(this);\n  }\n\n  return copy;\n}; // :: ([Mark]) → [Mark]\n// Remove this mark from the given set, returning a new set. If this\n// mark is not in the set, the set itself is returned.\n\n\nMark.prototype.removeFromSet = function removeFromSet(set) {\n  var this$1 = this;\n\n  for (var i = 0; i < set.length; i++) {\n    if (this$1.eq(set[i])) {\n      return set.slice(0, i).concat(set.slice(i + 1));\n    }\n  }\n\n  return set;\n}; // :: ([Mark]) → bool\n// Test whether this mark is in the given set of marks.\n\n\nMark.prototype.isInSet = function isInSet(set) {\n  var this$1 = this;\n\n  for (var i = 0; i < set.length; i++) {\n    if (this$1.eq(set[i])) {\n      return true;\n    }\n  }\n\n  return false;\n}; // :: (Mark) → bool\n// Test whether this mark has the same type and attributes as\n// another mark.\n\n\nMark.prototype.eq = function eq(other) {\n  return this == other || this.type == other.type && compareDeep(this.attrs, other.attrs);\n}; // :: () → Object\n// Convert this mark to a JSON-serializeable representation.\n\n\nMark.prototype.toJSON = function toJSON() {\n  var this$1 = this;\n  var obj = {\n    type: this.type.name\n  };\n\n  for (var _ in this$1.attrs) {\n    obj.attrs = this$1.attrs;\n    break;\n  }\n\n  return obj;\n}; // :: (Schema, Object) → Mark\n\n\nMark.fromJSON = function fromJSON(schema, json) {\n  if (!json) {\n    throw new RangeError(\"Invalid input for Mark.fromJSON\");\n  }\n\n  var type = schema.marks[json.type];\n\n  if (!type) {\n    throw new RangeError(\"There is no mark type \" + json.type + \" in this schema\");\n  }\n\n  return type.create(json.attrs);\n}; // :: ([Mark], [Mark]) → bool\n// Test whether two sets of marks are identical.\n\n\nMark.sameSet = function sameSet(a, b) {\n  if (a == b) {\n    return true;\n  }\n\n  if (a.length != b.length) {\n    return false;\n  }\n\n  for (var i = 0; i < a.length; i++) {\n    if (!a[i].eq(b[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}; // :: (?union<Mark, [Mark]>) → [Mark]\n// Create a properly sorted mark set from null, a single mark, or an\n// unsorted array of marks.\n\n\nMark.setFrom = function setFrom(marks) {\n  if (!marks || marks.length == 0) {\n    return Mark.none;\n  }\n\n  if (marks instanceof Mark) {\n    return [marks];\n  }\n\n  var copy = marks.slice();\n  copy.sort(function (a, b) {\n    return a.type.rank - b.type.rank;\n  });\n  return copy;\n}; // :: [Mark] The empty set of marks.\n\n\nMark.none = []; // ReplaceError:: class extends Error\n// Error type raised by [`Node.replace`](#model.Node.replace) when\n// given an invalid replacement.\n\nfunction ReplaceError(message) {\n  var err = Error.call(this, message);\n  err.__proto__ = ReplaceError.prototype;\n  return err;\n}\n\nReplaceError.prototype = Object.create(Error.prototype);\nReplaceError.prototype.constructor = ReplaceError;\nReplaceError.prototype.name = \"ReplaceError\"; // ::- A slice represents a piece cut out of a larger document. It\n// stores not only a fragment, but also the depth up to which nodes on\n// both side are ‘open’ (cut through).\n\nvar Slice = function Slice(content, openStart, openEnd) {\n  // :: Fragment The slice's content.\n  this.content = content; // :: number The open depth at the start.\n\n  this.openStart = openStart; // :: number The open depth at the end.\n\n  this.openEnd = openEnd;\n};\n\nvar prototypeAccessors$2 = {\n  size: {}\n}; // :: number\n// The size this slice would add when inserted into a document.\n\nprototypeAccessors$2.size.get = function () {\n  return this.content.size - this.openStart - this.openEnd;\n};\n\nSlice.prototype.insertAt = function insertAt(pos, fragment) {\n  var content = insertInto(this.content, pos + this.openStart, fragment, null);\n  return content && new Slice(content, this.openStart, this.openEnd);\n};\n\nSlice.prototype.removeBetween = function removeBetween(from, to) {\n  return new Slice(removeRange(this.content, from + this.openStart, to + this.openStart), this.openStart, this.openEnd);\n}; // :: (Slice) → bool\n// Tests whether this slice is equal to another slice.\n\n\nSlice.prototype.eq = function eq(other) {\n  return this.content.eq(other.content) && this.openStart == other.openStart && this.openEnd == other.openEnd;\n};\n\nSlice.prototype.toString = function toString() {\n  return this.content + \"(\" + this.openStart + \",\" + this.openEnd + \")\";\n}; // :: () → ?Object\n// Convert a slice to a JSON-serializable representation.\n\n\nSlice.prototype.toJSON = function toJSON() {\n  if (!this.content.size) {\n    return null;\n  }\n\n  var json = {\n    content: this.content.toJSON()\n  };\n\n  if (this.openStart > 0) {\n    json.openStart = this.openStart;\n  }\n\n  if (this.openEnd > 0) {\n    json.openEnd = this.openEnd;\n  }\n\n  return json;\n}; // :: (Schema, ?Object) → Slice\n// Deserialize a slice from its JSON representation.\n\n\nSlice.fromJSON = function fromJSON(schema, json) {\n  if (!json) {\n    return Slice.empty;\n  }\n\n  var openStart = json.openStart || 0,\n      openEnd = json.openEnd || 0;\n\n  if (typeof openStart != \"number\" || typeof openEnd != \"number\") {\n    throw new RangeError(\"Invalid input for Slice.fromJSON\");\n  }\n\n  return new Slice(Fragment.fromJSON(schema, json.content), json.openStart || 0, json.openEnd || 0);\n}; // :: (Fragment, ?bool) → Slice\n// Create a slice from a fragment by taking the maximum possible\n// open value on both side of the fragment.\n\n\nSlice.maxOpen = function maxOpen(fragment, openIsolating) {\n  if (openIsolating === void 0) openIsolating = true;\n  var openStart = 0,\n      openEnd = 0;\n\n  for (var n = fragment.firstChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.firstChild) {\n    openStart++;\n  }\n\n  for (var n$1 = fragment.lastChild; n$1 && !n$1.isLeaf && (openIsolating || !n$1.type.spec.isolating); n$1 = n$1.lastChild) {\n    openEnd++;\n  }\n\n  return new Slice(fragment, openStart, openEnd);\n};\n\nObject.defineProperties(Slice.prototype, prototypeAccessors$2);\n\nfunction removeRange(content, from, to) {\n  var ref = content.findIndex(from);\n  var index = ref.index;\n  var offset = ref.offset;\n  var child = content.maybeChild(index);\n  var ref$1 = content.findIndex(to);\n  var indexTo = ref$1.index;\n  var offsetTo = ref$1.offset;\n\n  if (offset == from || child.isText) {\n    if (offsetTo != to && !content.child(indexTo).isText) {\n      throw new RangeError(\"Removing non-flat range\");\n    }\n\n    return content.cut(0, from).append(content.cut(to));\n  }\n\n  if (index != indexTo) {\n    throw new RangeError(\"Removing non-flat range\");\n  }\n\n  return content.replaceChild(index, child.copy(removeRange(child.content, from - offset - 1, to - offset - 1)));\n}\n\nfunction insertInto(content, dist, insert, parent) {\n  var ref = content.findIndex(dist);\n  var index = ref.index;\n  var offset = ref.offset;\n  var child = content.maybeChild(index);\n\n  if (offset == dist || child.isText) {\n    if (parent && !parent.canReplace(index, index, insert)) {\n      return null;\n    }\n\n    return content.cut(0, dist).append(insert).append(content.cut(dist));\n  }\n\n  var inner = insertInto(child.content, dist - offset - 1, insert);\n  return inner && content.replaceChild(index, child.copy(inner));\n} // :: Slice\n// The empty slice.\n\n\nSlice.empty = new Slice(Fragment.empty, 0, 0);\n\nfunction replace($from, $to, slice) {\n  if (slice.openStart > $from.depth) {\n    throw new ReplaceError(\"Inserted content deeper than insertion position\");\n  }\n\n  if ($from.depth - slice.openStart != $to.depth - slice.openEnd) {\n    throw new ReplaceError(\"Inconsistent open depths\");\n  }\n\n  return replaceOuter($from, $to, slice, 0);\n}\n\nfunction replaceOuter($from, $to, slice, depth) {\n  var index = $from.index(depth),\n      node = $from.node(depth);\n\n  if (index == $to.index(depth) && depth < $from.depth - slice.openStart) {\n    var inner = replaceOuter($from, $to, slice, depth + 1);\n    return node.copy(node.content.replaceChild(index, inner));\n  } else if (!slice.content.size) {\n    return close(node, replaceTwoWay($from, $to, depth));\n  } else if (!slice.openStart && !slice.openEnd && $from.depth == depth && $to.depth == depth) {\n    // Simple, flat case\n    var parent = $from.parent,\n        content = parent.content;\n    return close(parent, content.cut(0, $from.parentOffset).append(slice.content).append(content.cut($to.parentOffset)));\n  } else {\n    var ref = prepareSliceForReplace(slice, $from);\n    var start = ref.start;\n    var end = ref.end;\n    return close(node, replaceThreeWay($from, start, end, $to, depth));\n  }\n}\n\nfunction checkJoin(main, sub) {\n  if (!sub.type.compatibleContent(main.type)) {\n    throw new ReplaceError(\"Cannot join \" + sub.type.name + \" onto \" + main.type.name);\n  }\n}\n\nfunction joinable($before, $after, depth) {\n  var node = $before.node(depth);\n  checkJoin(node, $after.node(depth));\n  return node;\n}\n\nfunction addNode(child, target) {\n  var last = target.length - 1;\n\n  if (last >= 0 && child.isText && child.sameMarkup(target[last])) {\n    target[last] = child.withText(target[last].text + child.text);\n  } else {\n    target.push(child);\n  }\n}\n\nfunction addRange($start, $end, depth, target) {\n  var node = ($end || $start).node(depth);\n  var startIndex = 0,\n      endIndex = $end ? $end.index(depth) : node.childCount;\n\n  if ($start) {\n    startIndex = $start.index(depth);\n\n    if ($start.depth > depth) {\n      startIndex++;\n    } else if ($start.textOffset) {\n      addNode($start.nodeAfter, target);\n      startIndex++;\n    }\n  }\n\n  for (var i = startIndex; i < endIndex; i++) {\n    addNode(node.child(i), target);\n  }\n\n  if ($end && $end.depth == depth && $end.textOffset) {\n    addNode($end.nodeBefore, target);\n  }\n}\n\nfunction close(node, content) {\n  if (!node.type.validContent(content)) {\n    throw new ReplaceError(\"Invalid content for node \" + node.type.name);\n  }\n\n  return node.copy(content);\n}\n\nfunction replaceThreeWay($from, $start, $end, $to, depth) {\n  var openStart = $from.depth > depth && joinable($from, $start, depth + 1);\n  var openEnd = $to.depth > depth && joinable($end, $to, depth + 1);\n  var content = [];\n  addRange(null, $from, depth, content);\n\n  if (openStart && openEnd && $start.index(depth) == $end.index(depth)) {\n    checkJoin(openStart, openEnd);\n    addNode(close(openStart, replaceThreeWay($from, $start, $end, $to, depth + 1)), content);\n  } else {\n    if (openStart) {\n      addNode(close(openStart, replaceTwoWay($from, $start, depth + 1)), content);\n    }\n\n    addRange($start, $end, depth, content);\n\n    if (openEnd) {\n      addNode(close(openEnd, replaceTwoWay($end, $to, depth + 1)), content);\n    }\n  }\n\n  addRange($to, null, depth, content);\n  return new Fragment(content);\n}\n\nfunction replaceTwoWay($from, $to, depth) {\n  var content = [];\n  addRange(null, $from, depth, content);\n\n  if ($from.depth > depth) {\n    var type = joinable($from, $to, depth + 1);\n    addNode(close(type, replaceTwoWay($from, $to, depth + 1)), content);\n  }\n\n  addRange($to, null, depth, content);\n  return new Fragment(content);\n}\n\nfunction prepareSliceForReplace(slice, $along) {\n  var extra = $along.depth - slice.openStart,\n      parent = $along.node(extra);\n  var node = parent.copy(slice.content);\n\n  for (var i = extra - 1; i >= 0; i--) {\n    node = $along.node(i).copy(Fragment.from(node));\n  }\n\n  return {\n    start: node.resolveNoCache(slice.openStart + extra),\n    end: node.resolveNoCache(node.content.size - slice.openEnd - extra)\n  };\n} // ::- You can [_resolve_](#model.Node.resolve) a position to get more\n// information about it. Objects of this class represent such a\n// resolved position, providing various pieces of context information,\n// and some helper methods.\n//\n// Throughout this interface, methods that take an optional `depth`\n// parameter will interpret undefined as `this.depth` and negative\n// numbers as `this.depth + value`.\n\n\nvar ResolvedPos = function ResolvedPos(pos, path, parentOffset) {\n  // :: number The position that was resolved.\n  this.pos = pos;\n  this.path = path; // :: number\n  // The number of levels the parent node is from the root. If this\n  // position points directly into the root node, it is 0. If it\n  // points into a top-level paragraph, 1, and so on.\n\n  this.depth = path.length / 3 - 1; // :: number The offset this position has into its parent node.\n\n  this.parentOffset = parentOffset;\n};\n\nvar prototypeAccessors$3 = {\n  parent: {},\n  doc: {},\n  textOffset: {},\n  nodeAfter: {},\n  nodeBefore: {}\n};\n\nResolvedPos.prototype.resolveDepth = function resolveDepth(val) {\n  if (val == null) {\n    return this.depth;\n  }\n\n  if (val < 0) {\n    return this.depth + val;\n  }\n\n  return val;\n}; // :: Node\n// The parent node that the position points into. Note that even if\n// a position points into a text node, that node is not considered\n// the parent—text nodes are ‘flat’ in this model, and have no content.\n\n\nprototypeAccessors$3.parent.get = function () {\n  return this.node(this.depth);\n}; // :: Node\n// The root node in which the position was resolved.\n\n\nprototypeAccessors$3.doc.get = function () {\n  return this.node(0);\n}; // :: (?number) → Node\n// The ancestor node at the given level. `p.node(p.depth)` is the\n// same as `p.parent`.\n\n\nResolvedPos.prototype.node = function node(depth) {\n  return this.path[this.resolveDepth(depth) * 3];\n}; // :: (?number) → number\n// The index into the ancestor at the given level. If this points at\n// the 3rd node in the 2nd paragraph on the top level, for example,\n// `p.index(0)` is 2 and `p.index(1)` is 3.\n\n\nResolvedPos.prototype.index = function index(depth) {\n  return this.path[this.resolveDepth(depth) * 3 + 1];\n}; // :: (?number) → number\n// The index pointing after this position into the ancestor at the\n// given level.\n\n\nResolvedPos.prototype.indexAfter = function indexAfter(depth) {\n  depth = this.resolveDepth(depth);\n  return this.index(depth) + (depth == this.depth && !this.textOffset ? 0 : 1);\n}; // :: (?number) → number\n// The (absolute) position at the start of the node at the given\n// level.\n\n\nResolvedPos.prototype.start = function start(depth) {\n  depth = this.resolveDepth(depth);\n  return depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;\n}; // :: (?number) → number\n// The (absolute) position at the end of the node at the given\n// level.\n\n\nResolvedPos.prototype.end = function end(depth) {\n  depth = this.resolveDepth(depth);\n  return this.start(depth) + this.node(depth).content.size;\n}; // :: (?number) → number\n// The (absolute) position directly before the wrapping node at the\n// given level, or, when `level` is `this.depth + 1`, the original\n// position.\n\n\nResolvedPos.prototype.before = function before(depth) {\n  depth = this.resolveDepth(depth);\n\n  if (!depth) {\n    throw new RangeError(\"There is no position before the top-level node\");\n  }\n\n  return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1];\n}; // :: (?number) → number\n// The (absolute) position directly after the wrapping node at the\n// given level, or the original position when `level` is `this.depth + 1`.\n\n\nResolvedPos.prototype.after = function after(depth) {\n  depth = this.resolveDepth(depth);\n\n  if (!depth) {\n    throw new RangeError(\"There is no position after the top-level node\");\n  }\n\n  return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1] + this.path[depth * 3].nodeSize;\n}; // :: number\n// When this position points into a text node, this returns the\n// distance between the position and the start of the text node.\n// Will be zero for positions that point between nodes.\n\n\nprototypeAccessors$3.textOffset.get = function () {\n  return this.pos - this.path[this.path.length - 1];\n}; // :: ?Node\n// Get the node directly after the position, if any. If the position\n// points into a text node, only the part of that node after the\n// position is returned.\n\n\nprototypeAccessors$3.nodeAfter.get = function () {\n  var parent = this.parent,\n      index = this.index(this.depth);\n\n  if (index == parent.childCount) {\n    return null;\n  }\n\n  var dOff = this.pos - this.path[this.path.length - 1],\n      child = parent.child(index);\n  return dOff ? parent.child(index).cut(dOff) : child;\n}; // :: ?Node\n// Get the node directly before the position, if any. If the\n// position points into a text node, only the part of that node\n// before the position is returned.\n\n\nprototypeAccessors$3.nodeBefore.get = function () {\n  var index = this.index(this.depth);\n  var dOff = this.pos - this.path[this.path.length - 1];\n\n  if (dOff) {\n    return this.parent.child(index).cut(0, dOff);\n  }\n\n  return index == 0 ? null : this.parent.child(index - 1);\n}; // :: () → [Mark]\n// Get the marks at this position, factoring in the surrounding\n// marks' [`inclusive`](#model.MarkSpec.inclusive) property. If the\n// position is at the start of a non-empty node, the marks of the\n// node after it (if any) are returned.\n\n\nResolvedPos.prototype.marks = function marks() {\n  var parent = this.parent,\n      index = this.index(); // In an empty parent, return the empty array\n\n  if (parent.content.size == 0) {\n    return Mark.none;\n  } // When inside a text node, just return the text node's marks\n\n\n  if (this.textOffset) {\n    return parent.child(index).marks;\n  }\n\n  var main = parent.maybeChild(index - 1),\n      other = parent.maybeChild(index); // If the `after` flag is true of there is no node before, make\n  // the node after this position the main reference.\n\n  if (!main) {\n    var tmp = main;\n    main = other;\n    other = tmp;\n  } // Use all marks in the main node, except those that have\n  // `inclusive` set to false and are not present in the other node.\n\n\n  var marks = main.marks;\n\n  for (var i = 0; i < marks.length; i++) {\n    if (marks[i].type.spec.inclusive === false && (!other || !marks[i].isInSet(other.marks))) {\n      marks = marks[i--].removeFromSet(marks);\n    }\n  }\n\n  return marks;\n}; // :: (ResolvedPos) → ?[Mark]\n// Get the marks after the current position, if any, except those\n// that are non-inclusive and not present at position `$end`. This\n// is mostly useful for getting the set of marks to preserve after a\n// deletion. Will return `null` if this position is at the end of\n// its parent node or its parent node isn't a textblock (in which\n// case no marks should be preserved).\n\n\nResolvedPos.prototype.marksAcross = function marksAcross($end) {\n  var after = this.parent.maybeChild(this.index());\n\n  if (!after || !after.isInline) {\n    return null;\n  }\n\n  var marks = after.marks,\n      next = $end.parent.maybeChild($end.index());\n\n  for (var i = 0; i < marks.length; i++) {\n    if (marks[i].type.spec.inclusive === false && (!next || !marks[i].isInSet(next.marks))) {\n      marks = marks[i--].removeFromSet(marks);\n    }\n  }\n\n  return marks;\n}; // :: (number) → number\n// The depth up to which this position and the given (non-resolved)\n// position share the same parent nodes.\n\n\nResolvedPos.prototype.sharedDepth = function sharedDepth(pos) {\n  var this$1 = this;\n\n  for (var depth = this.depth; depth > 0; depth--) {\n    if (this$1.start(depth) <= pos && this$1.end(depth) >= pos) {\n      return depth;\n    }\n  }\n\n  return 0;\n}; // :: (?ResolvedPos, ?(Node) → bool) → ?NodeRange\n// Returns a range based on the place where this position and the\n// given position diverge around block content. If both point into\n// the same textblock, for example, a range around that textblock\n// will be returned. If they point into different blocks, the range\n// around those blocks in their shared ancestor is returned. You can\n// pass in an optional predicate that will be called with a parent\n// node to see if a range into that parent is acceptable.\n\n\nResolvedPos.prototype.blockRange = function blockRange(other, pred) {\n  var this$1 = this;\n  if (other === void 0) other = this;\n\n  if (other.pos < this.pos) {\n    return other.blockRange(this);\n  }\n\n  for (var d = this.depth - (this.parent.inlineContent || this.pos == other.pos ? 1 : 0); d >= 0; d--) {\n    if (other.pos <= this$1.end(d) && (!pred || pred(this$1.node(d)))) {\n      return new NodeRange(this$1, other, d);\n    }\n  }\n}; // :: (ResolvedPos) → bool\n// Query whether the given position shares the same parent node.\n\n\nResolvedPos.prototype.sameParent = function sameParent(other) {\n  return this.pos - this.parentOffset == other.pos - other.parentOffset;\n}; // :: (ResolvedPos) → ResolvedPos\n// Return the greater of this and the given position.\n\n\nResolvedPos.prototype.max = function max(other) {\n  return other.pos > this.pos ? other : this;\n}; // :: (ResolvedPos) → ResolvedPos\n// Return the smaller of this and the given position.\n\n\nResolvedPos.prototype.min = function min(other) {\n  return other.pos < this.pos ? other : this;\n};\n\nResolvedPos.prototype.toString = function toString() {\n  var this$1 = this;\n  var str = \"\";\n\n  for (var i = 1; i <= this.depth; i++) {\n    str += (str ? \"/\" : \"\") + this$1.node(i).type.name + \"_\" + this$1.index(i - 1);\n  }\n\n  return str + \":\" + this.parentOffset;\n};\n\nResolvedPos.resolve = function resolve(doc, pos) {\n  if (!(pos >= 0 && pos <= doc.content.size)) {\n    throw new RangeError(\"Position \" + pos + \" out of range\");\n  }\n\n  var path = [];\n  var start = 0,\n      parentOffset = pos;\n\n  for (var node = doc;;) {\n    var ref = node.content.findIndex(parentOffset);\n    var index = ref.index;\n    var offset = ref.offset;\n    var rem = parentOffset - offset;\n    path.push(node, index, start + offset);\n\n    if (!rem) {\n      break;\n    }\n\n    node = node.child(index);\n\n    if (node.isText) {\n      break;\n    }\n\n    parentOffset = rem - 1;\n    start += offset + 1;\n  }\n\n  return new ResolvedPos(pos, path, parentOffset);\n};\n\nResolvedPos.resolveCached = function resolveCached(doc, pos) {\n  for (var i = 0; i < resolveCache.length; i++) {\n    var cached = resolveCache[i];\n\n    if (cached.pos == pos && cached.doc == doc) {\n      return cached;\n    }\n  }\n\n  var result = resolveCache[resolveCachePos] = ResolvedPos.resolve(doc, pos);\n  resolveCachePos = (resolveCachePos + 1) % resolveCacheSize;\n  return result;\n};\n\nObject.defineProperties(ResolvedPos.prototype, prototypeAccessors$3);\nvar resolveCache = [];\nvar resolveCachePos = 0;\nvar resolveCacheSize = 12; // ::- Represents a flat range of content, i.e. one that starts and\n// ends in the same node.\n\nvar NodeRange = function NodeRange($from, $to, depth) {\n  // :: ResolvedPos A resolved position along the start of the\n  // content. May have a `depth` greater than this object's `depth`\n  // property, since these are the positions that were used to\n  // compute the range, not re-resolved positions directly at its\n  // boundaries.\n  this.$from = $from; // :: ResolvedPos A position along the end of the content. See\n  // caveat for [`$from`](#model.NodeRange.$from).\n\n  this.$to = $to; // :: number The depth of the node that this range points into.\n\n  this.depth = depth;\n};\n\nvar prototypeAccessors$1$1 = {\n  start: {},\n  end: {},\n  parent: {},\n  startIndex: {},\n  endIndex: {}\n}; // :: number The position at the start of the range.\n\nprototypeAccessors$1$1.start.get = function () {\n  return this.$from.before(this.depth + 1);\n}; // :: number The position at the end of the range.\n\n\nprototypeAccessors$1$1.end.get = function () {\n  return this.$to.after(this.depth + 1);\n}; // :: Node The parent node that the range points into.\n\n\nprototypeAccessors$1$1.parent.get = function () {\n  return this.$from.node(this.depth);\n}; // :: number The start index of the range in the parent node.\n\n\nprototypeAccessors$1$1.startIndex.get = function () {\n  return this.$from.index(this.depth);\n}; // :: number The end index of the range in the parent node.\n\n\nprototypeAccessors$1$1.endIndex.get = function () {\n  return this.$to.indexAfter(this.depth);\n};\n\nObject.defineProperties(NodeRange.prototype, prototypeAccessors$1$1);\nvar emptyAttrs = Object.create(null); // ::- This class represents a node in the tree that makes up a\n// ProseMirror document. So a document is an instance of `Node`, with\n// children that are also instances of `Node`.\n//\n// Nodes are persistent data structures. Instead of changing them, you\n// create new ones with the content you want. Old ones keep pointing\n// at the old document shape. This is made cheaper by sharing\n// structure between the old and new data as much as possible, which a\n// tree shape like this (without back pointers) makes easy.\n//\n// **Do not** directly mutate the properties of a `Node` object. See\n// [the guide](/docs/guide/#doc) for more information.\n\nvar Node = function Node(type, attrs, content, marks) {\n  // :: NodeType\n  // The type of node that this is.\n  this.type = type; // :: Object\n  // An object mapping attribute names to values. The kind of\n  // attributes allowed and required are\n  // [determined](#model.NodeSpec.attrs) by the node type.\n\n  this.attrs = attrs; // :: Fragment\n  // A container holding the node's children.\n\n  this.content = content || Fragment.empty; // :: [Mark]\n  // The marks (things like whether it is emphasized or part of a\n  // link) applied to this node.\n\n  this.marks = marks || Mark.none;\n};\n\nvar prototypeAccessors = {\n  nodeSize: {},\n  childCount: {},\n  textContent: {},\n  firstChild: {},\n  lastChild: {},\n  isBlock: {},\n  isTextblock: {},\n  inlineContent: {},\n  isInline: {},\n  isText: {},\n  isLeaf: {},\n  isAtom: {}\n}; // text:: ?string\n// For text nodes, this contains the node's text content.\n// :: number\n// The size of this node, as defined by the integer-based [indexing\n// scheme](/docs/guide/#doc.indexing). For text nodes, this is the\n// amount of characters. For other leaf nodes, it is one. For\n// non-leaf nodes, it is the size of the content plus two (the start\n// and end token).\n\nprototypeAccessors.nodeSize.get = function () {\n  return this.isLeaf ? 1 : 2 + this.content.size;\n}; // :: number\n// The number of children that the node has.\n\n\nprototypeAccessors.childCount.get = function () {\n  return this.content.childCount;\n}; // :: (number) → Node\n// Get the child node at the given index. Raises an error when the\n// index is out of range.\n\n\nNode.prototype.child = function child(index) {\n  return this.content.child(index);\n}; // :: (number) → ?Node\n// Get the child node at the given index, if it exists.\n\n\nNode.prototype.maybeChild = function maybeChild(index) {\n  return this.content.maybeChild(index);\n}; // :: ((node: Node, offset: number, index: number))\n// Call `f` for every child node, passing the node, its offset\n// into this parent node, and its index.\n\n\nNode.prototype.forEach = function forEach(f) {\n  this.content.forEach(f);\n}; // :: (number, number, (node: Node, pos: number, parent: Node, index: number) → ?bool, ?number)\n// Invoke a callback for all descendant nodes recursively between\n// the given two positions that are relative to start of this node's\n// content. The callback is invoked with the node, its\n// parent-relative position, its parent node, and its child index.\n// When the callback returns false for a given node, that node's\n// children will not be recursed over. The last parameter can be\n// used to specify a starting position to count from.\n\n\nNode.prototype.nodesBetween = function nodesBetween(from, to, f, startPos) {\n  if (startPos === void 0) startPos = 0;\n  this.content.nodesBetween(from, to, f, startPos, this);\n}; // :: ((node: Node, pos: number, parent: Node) → ?bool)\n// Call the given callback for every descendant node. Doesn't\n// descend into a node when the callback returns `false`.\n\n\nNode.prototype.descendants = function descendants(f) {\n  this.nodesBetween(0, this.content.size, f);\n}; // :: string\n// Concatenates all the text nodes found in this fragment and its\n// children.\n\n\nprototypeAccessors.textContent.get = function () {\n  return this.textBetween(0, this.content.size, \"\");\n}; // :: (number, number, ?string, ?string) → string\n// Get all text between positions `from` and `to`. When\n// `blockSeparator` is given, it will be inserted whenever a new\n// block node is started. When `leafText` is given, it'll be\n// inserted for every non-text leaf node encountered.\n\n\nNode.prototype.textBetween = function textBetween(from, to, blockSeparator, leafText) {\n  return this.content.textBetween(from, to, blockSeparator, leafText);\n}; // :: ?Node\n// Returns this node's first child, or `null` if there are no\n// children.\n\n\nprototypeAccessors.firstChild.get = function () {\n  return this.content.firstChild;\n}; // :: ?Node\n// Returns this node's last child, or `null` if there are no\n// children.\n\n\nprototypeAccessors.lastChild.get = function () {\n  return this.content.lastChild;\n}; // :: (Node) → bool\n// Test whether two nodes represent the same piece of document.\n\n\nNode.prototype.eq = function eq(other) {\n  return this == other || this.sameMarkup(other) && this.content.eq(other.content);\n}; // :: (Node) → bool\n// Compare the markup (type, attributes, and marks) of this node to\n// those of another. Returns `true` if both have the same markup.\n\n\nNode.prototype.sameMarkup = function sameMarkup(other) {\n  return this.hasMarkup(other.type, other.attrs, other.marks);\n}; // :: (NodeType, ?Object, ?[Mark]) → bool\n// Check whether this node's markup correspond to the given type,\n// attributes, and marks.\n\n\nNode.prototype.hasMarkup = function hasMarkup(type, attrs, marks) {\n  return this.type == type && compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) && Mark.sameSet(this.marks, marks || Mark.none);\n}; // :: (?Fragment) → Node\n// Create a new node with the same markup as this node, containing\n// the given content (or empty, if no content is given).\n\n\nNode.prototype.copy = function copy(content) {\n  if (content === void 0) content = null;\n\n  if (content == this.content) {\n    return this;\n  }\n\n  return new this.constructor(this.type, this.attrs, content, this.marks);\n}; // :: ([Mark]) → Node\n// Create a copy of this node, with the given set of marks instead\n// of the node's own marks.\n\n\nNode.prototype.mark = function mark(marks) {\n  return marks == this.marks ? this : new this.constructor(this.type, this.attrs, this.content, marks);\n}; // :: (number, ?number) → Node\n// Create a copy of this node with only the content between the\n// given positions. If `to` is not given, it defaults to the end of\n// the node.\n\n\nNode.prototype.cut = function cut(from, to) {\n  if (from == 0 && to == this.content.size) {\n    return this;\n  }\n\n  return this.copy(this.content.cut(from, to));\n}; // :: (number, ?number) → Slice\n// Cut out the part of the document between the given positions, and\n// return it as a `Slice` object.\n\n\nNode.prototype.slice = function slice(from, to, includeParents) {\n  if (to === void 0) to = this.content.size;\n  if (includeParents === void 0) includeParents = false;\n\n  if (from == to) {\n    return Slice.empty;\n  }\n\n  var $from = this.resolve(from),\n      $to = this.resolve(to);\n  var depth = includeParents ? 0 : $from.sharedDepth(to);\n  var start = $from.start(depth),\n      node = $from.node(depth);\n  var content = node.content.cut($from.pos - start, $to.pos - start);\n  return new Slice(content, $from.depth - depth, $to.depth - depth);\n}; // :: (number, number, Slice) → Node\n// Replace the part of the document between the given positions with\n// the given slice. The slice must 'fit', meaning its open sides\n// must be able to connect to the surrounding content, and its\n// content nodes must be valid children for the node they are placed\n// into. If any of this is violated, an error of type\n// [`ReplaceError`](#model.ReplaceError) is thrown.\n\n\nNode.prototype.replace = function replace$1(from, to, slice) {\n  return replace(this.resolve(from), this.resolve(to), slice);\n}; // :: (number) → ?Node\n// Find the node directly after the given position.\n\n\nNode.prototype.nodeAt = function nodeAt(pos) {\n  for (var node = this;;) {\n    var ref = node.content.findIndex(pos);\n    var index = ref.index;\n    var offset = ref.offset;\n    node = node.maybeChild(index);\n\n    if (!node) {\n      return null;\n    }\n\n    if (offset == pos || node.isText) {\n      return node;\n    }\n\n    pos -= offset + 1;\n  }\n}; // :: (number) → {node: ?Node, index: number, offset: number}\n// Find the (direct) child node after the given offset, if any,\n// and return it along with its index and offset relative to this\n// node.\n\n\nNode.prototype.childAfter = function childAfter(pos) {\n  var ref = this.content.findIndex(pos);\n  var index = ref.index;\n  var offset = ref.offset;\n  return {\n    node: this.content.maybeChild(index),\n    index: index,\n    offset: offset\n  };\n}; // :: (number) → {node: ?Node, index: number, offset: number}\n// Find the (direct) child node before the given offset, if any,\n// and return it along with its index and offset relative to this\n// node.\n\n\nNode.prototype.childBefore = function childBefore(pos) {\n  if (pos == 0) {\n    return {\n      node: null,\n      index: 0,\n      offset: 0\n    };\n  }\n\n  var ref = this.content.findIndex(pos);\n  var index = ref.index;\n  var offset = ref.offset;\n\n  if (offset < pos) {\n    return {\n      node: this.content.child(index),\n      index: index,\n      offset: offset\n    };\n  }\n\n  var node = this.content.child(index - 1);\n  return {\n    node: node,\n    index: index - 1,\n    offset: offset - node.nodeSize\n  };\n}; // :: (number) → ResolvedPos\n// Resolve the given position in the document, returning an\n// [object](#model.ResolvedPos) with information about its context.\n\n\nNode.prototype.resolve = function resolve(pos) {\n  return ResolvedPos.resolveCached(this, pos);\n};\n\nNode.prototype.resolveNoCache = function resolveNoCache(pos) {\n  return ResolvedPos.resolve(this, pos);\n}; // :: (number, number, MarkType) → bool\n// Test whether a mark of the given type occurs in this document\n// between the two given positions.\n\n\nNode.prototype.rangeHasMark = function rangeHasMark(from, to, type) {\n  var found = false;\n\n  if (to > from) {\n    this.nodesBetween(from, to, function (node) {\n      if (type.isInSet(node.marks)) {\n        found = true;\n      }\n\n      return !found;\n    });\n  }\n\n  return found;\n}; // :: bool\n// True when this is a block (non-inline node)\n\n\nprototypeAccessors.isBlock.get = function () {\n  return this.type.isBlock;\n}; // :: bool\n// True when this is a textblock node, a block node with inline\n// content.\n\n\nprototypeAccessors.isTextblock.get = function () {\n  return this.type.isTextblock;\n}; // :: bool\n// True when this node allows inline content.\n\n\nprototypeAccessors.inlineContent.get = function () {\n  return this.type.inlineContent;\n}; // :: bool\n// True when this is an inline node (a text node or a node that can\n// appear among text).\n\n\nprototypeAccessors.isInline.get = function () {\n  return this.type.isInline;\n}; // :: bool\n// True when this is a text node.\n\n\nprototypeAccessors.isText.get = function () {\n  return this.type.isText;\n}; // :: bool\n// True when this is a leaf node.\n\n\nprototypeAccessors.isLeaf.get = function () {\n  return this.type.isLeaf;\n}; // :: bool\n// True when this is an atom, i.e. when it does not have directly\n// editable content. This is usually the same as `isLeaf`, but can\n// be configured with the [`atom` property](#model.NodeSpec.atom) on\n// a node's spec (typically used when the node is displayed as an\n// uneditable [node view](#view.NodeView)).\n\n\nprototypeAccessors.isAtom.get = function () {\n  return this.type.isAtom;\n}; // :: () → string\n// Return a string representation of this node for debugging\n// purposes.\n\n\nNode.prototype.toString = function toString() {\n  if (this.type.spec.toDebugString) {\n    return this.type.spec.toDebugString(this);\n  }\n\n  var name = this.type.name;\n\n  if (this.content.size) {\n    name += \"(\" + this.content.toStringInner() + \")\";\n  }\n\n  return wrapMarks(this.marks, name);\n}; // :: (number) → ContentMatch\n// Get the content match in this node at the given index.\n\n\nNode.prototype.contentMatchAt = function contentMatchAt(index) {\n  var match = this.type.contentMatch.matchFragment(this.content, 0, index);\n\n  if (!match) {\n    throw new Error(\"Called contentMatchAt on a node with invalid content\");\n  }\n\n  return match;\n}; // :: (number, number, ?Fragment, ?number, ?number) → bool\n// Test whether replacing the range between `from` and `to` (by\n// child index) with the given replacement fragment (which defaults\n// to the empty fragment) would leave the node's content valid. You\n// can optionally pass `start` and `end` indices into the\n// replacement fragment.\n\n\nNode.prototype.canReplace = function canReplace(from, to, replacement, start, end) {\n  var this$1 = this;\n  if (replacement === void 0) replacement = Fragment.empty;\n  if (start === void 0) start = 0;\n  if (end === void 0) end = replacement.childCount;\n  var one = this.contentMatchAt(from).matchFragment(replacement, start, end);\n  var two = one && one.matchFragment(this.content, to);\n\n  if (!two || !two.validEnd) {\n    return false;\n  }\n\n  for (var i = start; i < end; i++) {\n    if (!this$1.type.allowsMarks(replacement.child(i).marks)) {\n      return false;\n    }\n  }\n\n  return true;\n}; // :: (number, number, NodeType, ?[Mark]) → bool\n// Test whether replacing the range `from` to `to` (by index) with a\n// node of the given type would leave the node's content valid.\n\n\nNode.prototype.canReplaceWith = function canReplaceWith(from, to, type, marks) {\n  if (marks && !this.type.allowsMarks(marks)) {\n    return false;\n  }\n\n  var start = this.contentMatchAt(from).matchType(type);\n  var end = start && start.matchFragment(this.content, to);\n  return end ? end.validEnd : false;\n}; // :: (Node) → bool\n// Test whether the given node's content could be appended to this\n// node. If that node is empty, this will only return true if there\n// is at least one node type that can appear in both nodes (to avoid\n// merging completely incompatible nodes).\n\n\nNode.prototype.canAppend = function canAppend(other) {\n  if (other.content.size) {\n    return this.canReplace(this.childCount, this.childCount, other.content);\n  } else {\n    return this.type.compatibleContent(other.type);\n  }\n}; // Unused. Left for backwards compatibility.\n\n\nNode.prototype.defaultContentType = function defaultContentType(at) {\n  return this.contentMatchAt(at).defaultType;\n}; // :: ()\n// Check whether this node and its descendants conform to the\n// schema, and raise error when they do not.\n\n\nNode.prototype.check = function check() {\n  if (!this.type.validContent(this.content)) {\n    throw new RangeError(\"Invalid content for node \" + this.type.name + \": \" + this.content.toString().slice(0, 50));\n  }\n\n  this.content.forEach(function (node) {\n    return node.check();\n  });\n}; // :: () → Object\n// Return a JSON-serializeable representation of this node.\n\n\nNode.prototype.toJSON = function toJSON() {\n  var this$1 = this;\n  var obj = {\n    type: this.type.name\n  };\n\n  for (var _ in this$1.attrs) {\n    obj.attrs = this$1.attrs;\n    break;\n  }\n\n  if (this.content.size) {\n    obj.content = this.content.toJSON();\n  }\n\n  if (this.marks.length) {\n    obj.marks = this.marks.map(function (n) {\n      return n.toJSON();\n    });\n  }\n\n  return obj;\n}; // :: (Schema, Object) → Node\n// Deserialize a node from its JSON representation.\n\n\nNode.fromJSON = function fromJSON(schema, json) {\n  if (!json) {\n    throw new RangeError(\"Invalid input for Node.fromJSON\");\n  }\n\n  var marks = null;\n\n  if (json.marks) {\n    if (!Array.isArray(json.marks)) {\n      throw new RangeError(\"Invalid mark data for Node.fromJSON\");\n    }\n\n    marks = json.marks.map(schema.markFromJSON);\n  }\n\n  if (json.type == \"text\") {\n    if (typeof json.text != \"string\") {\n      throw new RangeError(\"Invalid text node in JSON\");\n    }\n\n    return schema.text(json.text, marks);\n  }\n\n  var content = Fragment.fromJSON(schema, json.content);\n  return schema.nodeType(json.type).create(json.attrs, content, marks);\n};\n\nObject.defineProperties(Node.prototype, prototypeAccessors);\n\nvar TextNode = function (Node) {\n  function TextNode(type, attrs, content, marks) {\n    Node.call(this, type, attrs, null, marks);\n\n    if (!content) {\n      throw new RangeError(\"Empty text nodes are not allowed\");\n    }\n\n    this.text = content;\n  }\n\n  if (Node) TextNode.__proto__ = Node;\n  TextNode.prototype = Object.create(Node && Node.prototype);\n  TextNode.prototype.constructor = TextNode;\n  var prototypeAccessors$1 = {\n    textContent: {},\n    nodeSize: {}\n  };\n\n  TextNode.prototype.toString = function toString() {\n    if (this.type.spec.toDebugString) {\n      return this.type.spec.toDebugString(this);\n    }\n\n    return wrapMarks(this.marks, JSON.stringify(this.text));\n  };\n\n  prototypeAccessors$1.textContent.get = function () {\n    return this.text;\n  };\n\n  TextNode.prototype.textBetween = function textBetween(from, to) {\n    return this.text.slice(from, to);\n  };\n\n  prototypeAccessors$1.nodeSize.get = function () {\n    return this.text.length;\n  };\n\n  TextNode.prototype.mark = function mark(marks) {\n    return marks == this.marks ? this : new TextNode(this.type, this.attrs, this.text, marks);\n  };\n\n  TextNode.prototype.withText = function withText(text) {\n    if (text == this.text) {\n      return this;\n    }\n\n    return new TextNode(this.type, this.attrs, text, this.marks);\n  };\n\n  TextNode.prototype.cut = function cut(from, to) {\n    if (from === void 0) from = 0;\n    if (to === void 0) to = this.text.length;\n\n    if (from == 0 && to == this.text.length) {\n      return this;\n    }\n\n    return this.withText(this.text.slice(from, to));\n  };\n\n  TextNode.prototype.eq = function eq(other) {\n    return this.sameMarkup(other) && this.text == other.text;\n  };\n\n  TextNode.prototype.toJSON = function toJSON() {\n    var base = Node.prototype.toJSON.call(this);\n    base.text = this.text;\n    return base;\n  };\n\n  Object.defineProperties(TextNode.prototype, prototypeAccessors$1);\n  return TextNode;\n}(Node);\n\nfunction wrapMarks(marks, str) {\n  for (var i = marks.length - 1; i >= 0; i--) {\n    str = marks[i].type.name + \"(\" + str + \")\";\n  }\n\n  return str;\n} // ::- Instances of this class represent a match state of a node\n// type's [content expression](#model.NodeSpec.content), and can be\n// used to find out whether further content matches here, and whether\n// a given position is a valid end of the node.\n\n\nvar ContentMatch = function ContentMatch(validEnd) {\n  // :: bool\n  // True when this match state represents a valid end of the node.\n  this.validEnd = validEnd;\n  this.next = [];\n  this.wrapCache = [];\n};\n\nvar prototypeAccessors$5 = {\n  inlineContent: {},\n  defaultType: {},\n  edgeCount: {}\n};\n\nContentMatch.parse = function parse(string, nodeTypes) {\n  var stream = new TokenStream(string, nodeTypes);\n\n  if (stream.next == null) {\n    return ContentMatch.empty;\n  }\n\n  var expr = parseExpr(stream);\n\n  if (stream.next) {\n    stream.err(\"Unexpected trailing text\");\n  }\n\n  var match = dfa(nfa(expr));\n  checkForDeadEnds(match, stream);\n  return match;\n}; // :: (NodeType) → ?ContentMatch\n// Match a node type, returning a match after that node if\n// successful.\n\n\nContentMatch.prototype.matchType = function matchType(type) {\n  var this$1 = this;\n\n  for (var i = 0; i < this.next.length; i += 2) {\n    if (this$1.next[i] == type) {\n      return this$1.next[i + 1];\n    }\n  }\n\n  return null;\n}; // :: (Fragment, ?number, ?number) → ?ContentMatch\n// Try to match a fragment. Returns the resulting match when\n// successful.\n\n\nContentMatch.prototype.matchFragment = function matchFragment(frag, start, end) {\n  if (start === void 0) start = 0;\n  if (end === void 0) end = frag.childCount;\n  var cur = this;\n\n  for (var i = start; cur && i < end; i++) {\n    cur = cur.matchType(frag.child(i).type);\n  }\n\n  return cur;\n};\n\nprototypeAccessors$5.inlineContent.get = function () {\n  var first = this.next[0];\n  return first ? first.isInline : false;\n}; // :: ?NodeType\n// Get the first matching node type at this match position that can\n// be generated.\n\n\nprototypeAccessors$5.defaultType.get = function () {\n  var this$1 = this;\n\n  for (var i = 0; i < this.next.length; i += 2) {\n    var type = this$1.next[i];\n\n    if (!(type.isText || type.hasRequiredAttrs())) {\n      return type;\n    }\n  }\n};\n\nContentMatch.prototype.compatible = function compatible(other) {\n  var this$1 = this;\n\n  for (var i = 0; i < this.next.length; i += 2) {\n    for (var j = 0; j < other.next.length; j += 2) {\n      if (this$1.next[i] == other.next[j]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}; // :: (Fragment, bool, ?number) → ?Fragment\n// Try to match the given fragment, and if that fails, see if it can\n// be made to match by inserting nodes in front of it. When\n// successful, return a fragment of inserted nodes (which may be\n// empty if nothing had to be inserted). When `toEnd` is true, only\n// return a fragment if the resulting match goes to the end of the\n// content expression.\n\n\nContentMatch.prototype.fillBefore = function fillBefore(after, toEnd, startIndex) {\n  if (toEnd === void 0) toEnd = false;\n  if (startIndex === void 0) startIndex = 0;\n  var seen = [this];\n\n  function search(match, types) {\n    var finished = match.matchFragment(after, startIndex);\n\n    if (finished && (!toEnd || finished.validEnd)) {\n      return Fragment.from(types.map(function (tp) {\n        return tp.createAndFill();\n      }));\n    }\n\n    for (var i = 0; i < match.next.length; i += 2) {\n      var type = match.next[i],\n          next = match.next[i + 1];\n\n      if (!(type.isText || type.hasRequiredAttrs()) && seen.indexOf(next) == -1) {\n        seen.push(next);\n        var found = search(next, types.concat(type));\n\n        if (found) {\n          return found;\n        }\n      }\n    }\n  }\n\n  return search(this, []);\n}; // :: (NodeType) → ?[NodeType]\n// Find a set of wrapping node types that would allow a node of the\n// given type to appear at this position. The result may be empty\n// (when it fits directly) and will be null when no such wrapping\n// exists.\n\n\nContentMatch.prototype.findWrapping = function findWrapping(target) {\n  var this$1 = this;\n\n  for (var i = 0; i < this.wrapCache.length; i += 2) {\n    if (this$1.wrapCache[i] == target) {\n      return this$1.wrapCache[i + 1];\n    }\n  }\n\n  var computed = this.computeWrapping(target);\n  this.wrapCache.push(target, computed);\n  return computed;\n};\n\nContentMatch.prototype.computeWrapping = function computeWrapping(target) {\n  var seen = Object.create(null),\n      active = [{\n    match: this,\n    type: null,\n    via: null\n  }];\n\n  while (active.length) {\n    var current = active.shift(),\n        match = current.match;\n\n    if (match.matchType(target)) {\n      var result = [];\n\n      for (var obj = current; obj.type; obj = obj.via) {\n        result.push(obj.type);\n      }\n\n      return result.reverse();\n    }\n\n    for (var i = 0; i < match.next.length; i += 2) {\n      var type = match.next[i];\n\n      if (!type.isLeaf && !type.hasRequiredAttrs() && !(type.name in seen) && (!current.type || match.next[i + 1].validEnd)) {\n        active.push({\n          match: type.contentMatch,\n          type: type,\n          via: current\n        });\n        seen[type.name] = true;\n      }\n    }\n  }\n}; // :: number\n// The number of outgoing edges this node has in the finite\n// automaton that describes the content expression.\n\n\nprototypeAccessors$5.edgeCount.get = function () {\n  return this.next.length >> 1;\n}; // :: (number) → {type: NodeType, next: ContentMatch}\n// Get the _n_th outgoing edge from this node in the finite\n// automaton that describes the content expression.\n\n\nContentMatch.prototype.edge = function edge(n) {\n  var i = n << 1;\n\n  if (i > this.next.length) {\n    throw new RangeError(\"There's no \" + n + \"th edge in this content match\");\n  }\n\n  return {\n    type: this.next[i],\n    next: this.next[i + 1]\n  };\n};\n\nContentMatch.prototype.toString = function toString() {\n  var seen = [];\n\n  function scan(m) {\n    seen.push(m);\n\n    for (var i = 1; i < m.next.length; i += 2) {\n      if (seen.indexOf(m.next[i]) == -1) {\n        scan(m.next[i]);\n      }\n    }\n  }\n\n  scan(this);\n  return seen.map(function (m, i) {\n    var out = i + (m.validEnd ? \"*\" : \" \") + \" \";\n\n    for (var i$1 = 0; i$1 < m.next.length; i$1 += 2) {\n      out += (i$1 ? \", \" : \"\") + m.next[i$1].name + \"->\" + seen.indexOf(m.next[i$1 + 1]);\n    }\n\n    return out;\n  }).join(\"\\n\");\n};\n\nObject.defineProperties(ContentMatch.prototype, prototypeAccessors$5);\nContentMatch.empty = new ContentMatch(true);\n\nvar TokenStream = function TokenStream(string, nodeTypes) {\n  this.string = string;\n  this.nodeTypes = nodeTypes;\n  this.inline = null;\n  this.pos = 0;\n  this.tokens = string.split(/\\s*(?=\\b|\\W|$)/);\n\n  if (this.tokens[this.tokens.length - 1] == \"\") {\n    this.tokens.pop();\n  }\n\n  if (this.tokens[0] == \"\") {\n    this.tokens.unshift();\n  }\n};\n\nvar prototypeAccessors$1$3 = {\n  next: {}\n};\n\nprototypeAccessors$1$3.next.get = function () {\n  return this.tokens[this.pos];\n};\n\nTokenStream.prototype.eat = function eat(tok) {\n  return this.next == tok && (this.pos++ || true);\n};\n\nTokenStream.prototype.err = function err(str) {\n  throw new SyntaxError(str + \" (in content expression '\" + this.string + \"')\");\n};\n\nObject.defineProperties(TokenStream.prototype, prototypeAccessors$1$3);\n\nfunction parseExpr(stream) {\n  var exprs = [];\n\n  do {\n    exprs.push(parseExprSeq(stream));\n  } while (stream.eat(\"|\"));\n\n  return exprs.length == 1 ? exprs[0] : {\n    type: \"choice\",\n    exprs: exprs\n  };\n}\n\nfunction parseExprSeq(stream) {\n  var exprs = [];\n\n  do {\n    exprs.push(parseExprSubscript(stream));\n  } while (stream.next && stream.next != \")\" && stream.next != \"|\");\n\n  return exprs.length == 1 ? exprs[0] : {\n    type: \"seq\",\n    exprs: exprs\n  };\n}\n\nfunction parseExprSubscript(stream) {\n  var expr = parseExprAtom(stream);\n\n  for (;;) {\n    if (stream.eat(\"+\")) {\n      expr = {\n        type: \"plus\",\n        expr: expr\n      };\n    } else if (stream.eat(\"*\")) {\n      expr = {\n        type: \"star\",\n        expr: expr\n      };\n    } else if (stream.eat(\"?\")) {\n      expr = {\n        type: \"opt\",\n        expr: expr\n      };\n    } else if (stream.eat(\"{\")) {\n      expr = parseExprRange(stream, expr);\n    } else {\n      break;\n    }\n  }\n\n  return expr;\n}\n\nfunction parseNum(stream) {\n  if (/\\D/.test(stream.next)) {\n    stream.err(\"Expected number, got '\" + stream.next + \"'\");\n  }\n\n  var result = Number(stream.next);\n  stream.pos++;\n  return result;\n}\n\nfunction parseExprRange(stream, expr) {\n  var min = parseNum(stream),\n      max = min;\n\n  if (stream.eat(\",\")) {\n    if (stream.next != \"}\") {\n      max = parseNum(stream);\n    } else {\n      max = -1;\n    }\n  }\n\n  if (!stream.eat(\"}\")) {\n    stream.err(\"Unclosed braced range\");\n  }\n\n  return {\n    type: \"range\",\n    min: min,\n    max: max,\n    expr: expr\n  };\n}\n\nfunction resolveName(stream, name) {\n  var types = stream.nodeTypes,\n      type = types[name];\n\n  if (type) {\n    return [type];\n  }\n\n  var result = [];\n\n  for (var typeName in types) {\n    var type$1 = types[typeName];\n\n    if (type$1.groups.indexOf(name) > -1) {\n      result.push(type$1);\n    }\n  }\n\n  if (result.length == 0) {\n    stream.err(\"No node type or group '\" + name + \"' found\");\n  }\n\n  return result;\n}\n\nfunction parseExprAtom(stream) {\n  if (stream.eat(\"(\")) {\n    var expr = parseExpr(stream);\n\n    if (!stream.eat(\")\")) {\n      stream.err(\"Missing closing paren\");\n    }\n\n    return expr;\n  } else if (!/\\W/.test(stream.next)) {\n    var exprs = resolveName(stream, stream.next).map(function (type) {\n      if (stream.inline == null) {\n        stream.inline = type.isInline;\n      } else if (stream.inline != type.isInline) {\n        stream.err(\"Mixing inline and block content\");\n      }\n\n      return {\n        type: \"name\",\n        value: type\n      };\n    });\n    stream.pos++;\n    return exprs.length == 1 ? exprs[0] : {\n      type: \"choice\",\n      exprs: exprs\n    };\n  } else {\n    stream.err(\"Unexpected token '\" + stream.next + \"'\");\n  }\n} // The code below helps compile a regular-expression-like language\n// into a deterministic finite automaton. For a good introduction to\n// these concepts, see https://swtch.com/~rsc/regexp/regexp1.html\n// : (Object) → [[{term: ?any, to: number}]]\n// Construct an NFA from an expression as returned by the parser. The\n// NFA is represented as an array of states, which are themselves\n// arrays of edges, which are `{term, to}` objects. The first state is\n// the entry state and the last node is the success state.\n//\n// Note that unlike typical NFAs, the edge ordering in this one is\n// significant, in that it is used to contruct filler content when\n// necessary.\n\n\nfunction nfa(expr) {\n  var nfa = [[]];\n  connect(compile(expr, 0), node());\n  return nfa;\n\n  function node() {\n    return nfa.push([]) - 1;\n  }\n\n  function edge(from, to, term) {\n    var edge = {\n      term: term,\n      to: to\n    };\n    nfa[from].push(edge);\n    return edge;\n  }\n\n  function connect(edges, to) {\n    edges.forEach(function (edge) {\n      return edge.to = to;\n    });\n  }\n\n  function compile(expr, from) {\n    if (expr.type == \"choice\") {\n      return expr.exprs.reduce(function (out, expr) {\n        return out.concat(compile(expr, from));\n      }, []);\n    } else if (expr.type == \"seq\") {\n      for (var i = 0;; i++) {\n        var next = compile(expr.exprs[i], from);\n\n        if (i == expr.exprs.length - 1) {\n          return next;\n        }\n\n        connect(next, from = node());\n      }\n    } else if (expr.type == \"star\") {\n      var loop = node();\n      edge(from, loop);\n      connect(compile(expr.expr, loop), loop);\n      return [edge(loop)];\n    } else if (expr.type == \"plus\") {\n      var loop$1 = node();\n      connect(compile(expr.expr, from), loop$1);\n      connect(compile(expr.expr, loop$1), loop$1);\n      return [edge(loop$1)];\n    } else if (expr.type == \"opt\") {\n      return [edge(from)].concat(compile(expr.expr, from));\n    } else if (expr.type == \"range\") {\n      var cur = from;\n\n      for (var i$1 = 0; i$1 < expr.min; i$1++) {\n        var next$1 = node();\n        connect(compile(expr.expr, cur), next$1);\n        cur = next$1;\n      }\n\n      if (expr.max == -1) {\n        connect(compile(expr.expr, cur), cur);\n      } else {\n        for (var i$2 = expr.min; i$2 < expr.max; i$2++) {\n          var next$2 = node();\n          edge(cur, next$2);\n          connect(compile(expr.expr, cur), next$2);\n          cur = next$2;\n        }\n      }\n\n      return [edge(cur)];\n    } else if (expr.type == \"name\") {\n      return [edge(from, null, expr.value)];\n    }\n  }\n}\n\nfunction cmp(a, b) {\n  return a - b;\n} // Get the set of nodes reachable by null edges from `node`. Omit\n// nodes with only a single null-out-edge, since they may lead to\n// needless duplicated nodes.\n\n\nfunction nullFrom(nfa, node) {\n  var result = [];\n  scan(node);\n  return result.sort(cmp);\n\n  function scan(node) {\n    var edges = nfa[node];\n\n    if (edges.length == 1 && !edges[0].term) {\n      return scan(edges[0].to);\n    }\n\n    result.push(node);\n\n    for (var i = 0; i < edges.length; i++) {\n      var ref = edges[i];\n      var term = ref.term;\n      var to = ref.to;\n\n      if (!term && result.indexOf(to) == -1) {\n        scan(to);\n      }\n    }\n  }\n} // : ([[{term: ?any, to: number}]]) → ContentMatch\n// Compiles an NFA as produced by `nfa` into a DFA, modeled as a set\n// of state objects (`ContentMatch` instances) with transitions\n// between them.\n\n\nfunction dfa(nfa) {\n  var labeled = Object.create(null);\n  return explore(nullFrom(nfa, 0));\n\n  function explore(states) {\n    var out = [];\n    states.forEach(function (node) {\n      nfa[node].forEach(function (ref) {\n        var term = ref.term;\n        var to = ref.to;\n\n        if (!term) {\n          return;\n        }\n\n        var known = out.indexOf(term),\n            set = known > -1 && out[known + 1];\n        nullFrom(nfa, to).forEach(function (node) {\n          if (!set) {\n            out.push(term, set = []);\n          }\n\n          if (set.indexOf(node) == -1) {\n            set.push(node);\n          }\n        });\n      });\n    });\n    var state = labeled[states.join(\",\")] = new ContentMatch(states.indexOf(nfa.length - 1) > -1);\n\n    for (var i = 0; i < out.length; i += 2) {\n      var states$1 = out[i + 1].sort(cmp);\n      state.next.push(out[i], labeled[states$1.join(\",\")] || explore(states$1));\n    }\n\n    return state;\n  }\n}\n\nfunction checkForDeadEnds(match, stream) {\n  for (var i = 0, work = [match]; i < work.length; i++) {\n    var state = work[i],\n        dead = !state.validEnd,\n        nodes = [];\n\n    for (var j = 0; j < state.next.length; j += 2) {\n      var node = state.next[j],\n          next = state.next[j + 1];\n      nodes.push(node.name);\n\n      if (dead && !(node.isText || node.hasRequiredAttrs())) {\n        dead = false;\n      }\n\n      if (work.indexOf(next) == -1) {\n        work.push(next);\n      }\n    }\n\n    if (dead) {\n      stream.err(\"Only non-generatable nodes (\" + nodes.join(\", \") + \") in a required position\");\n    }\n  }\n} // For node types where all attrs have a default value (or which don't\n// have any attributes), build up a single reusable default attribute\n// object, and use it for all nodes that don't specify specific\n// attributes.\n\n\nfunction defaultAttrs(attrs) {\n  var defaults = Object.create(null);\n\n  for (var attrName in attrs) {\n    var attr = attrs[attrName];\n\n    if (!attr.hasDefault) {\n      return null;\n    }\n\n    defaults[attrName] = attr.default;\n  }\n\n  return defaults;\n}\n\nfunction computeAttrs(attrs, value) {\n  var built = Object.create(null);\n\n  for (var name in attrs) {\n    var given = value && value[name];\n\n    if (given === undefined) {\n      var attr = attrs[name];\n\n      if (attr.hasDefault) {\n        given = attr.default;\n      } else {\n        throw new RangeError(\"No value supplied for attribute \" + name);\n      }\n    }\n\n    built[name] = given;\n  }\n\n  return built;\n}\n\nfunction initAttrs(attrs) {\n  var result = Object.create(null);\n\n  if (attrs) {\n    for (var name in attrs) {\n      result[name] = new Attribute(attrs[name]);\n    }\n  }\n\n  return result;\n} // ::- Node types are objects allocated once per `Schema` and used to\n// [tag](#model.Node.type) `Node` instances. They contain information\n// about the node type, such as its name and what kind of node it\n// represents.\n\n\nvar NodeType = function NodeType(name, schema, spec) {\n  // :: string\n  // The name the node type has in this schema.\n  this.name = name; // :: Schema\n  // A link back to the `Schema` the node type belongs to.\n\n  this.schema = schema; // :: NodeSpec\n  // The spec that this type is based on\n\n  this.spec = spec;\n  this.groups = spec.group ? spec.group.split(\" \") : [];\n  this.attrs = initAttrs(spec.attrs);\n  this.defaultAttrs = defaultAttrs(this.attrs); // :: ContentMatch\n  // The starting match of the node type's content expression.\n\n  this.contentMatch = null; // : ?[MarkType]\n  // The set of marks allowed in this node. `null` means all marks\n  // are allowed.\n\n  this.markSet = null; // :: bool\n  // True if this node type has inline content.\n\n  this.inlineContent = null; // :: bool\n  // True if this is a block type\n\n  this.isBlock = !(spec.inline || name == \"text\"); // :: bool\n  // True if this is the text node type.\n\n  this.isText = name == \"text\";\n};\n\nvar prototypeAccessors$4 = {\n  isInline: {},\n  isTextblock: {},\n  isLeaf: {},\n  isAtom: {}\n}; // :: bool\n// True if this is an inline type.\n\nprototypeAccessors$4.isInline.get = function () {\n  return !this.isBlock;\n}; // :: bool\n// True if this is a textblock type, a block that contains inline\n// content.\n\n\nprototypeAccessors$4.isTextblock.get = function () {\n  return this.isBlock && this.inlineContent;\n}; // :: bool\n// True for node types that allow no content.\n\n\nprototypeAccessors$4.isLeaf.get = function () {\n  return this.contentMatch == ContentMatch.empty;\n}; // :: bool\n// True when this node is an atom, i.e. when it does not have\n// directly editable content.\n\n\nprototypeAccessors$4.isAtom.get = function () {\n  return this.isLeaf || this.spec.atom;\n};\n\nNodeType.prototype.hasRequiredAttrs = function hasRequiredAttrs(ignore) {\n  var this$1 = this;\n\n  for (var n in this$1.attrs) {\n    if (this$1.attrs[n].isRequired && (!ignore || !(n in ignore))) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nNodeType.prototype.compatibleContent = function compatibleContent(other) {\n  return this == other || this.contentMatch.compatible(other.contentMatch);\n};\n\nNodeType.prototype.computeAttrs = function computeAttrs$1(attrs) {\n  if (!attrs && this.defaultAttrs) {\n    return this.defaultAttrs;\n  } else {\n    return computeAttrs(this.attrs, attrs);\n  }\n}; // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\n// Create a `Node` of this type. The given attributes are\n// checked and defaulted (you can pass `null` to use the type's\n// defaults entirely, if no required attributes exist). `content`\n// may be a `Fragment`, a node, an array of nodes, or\n// `null`. Similarly `marks` may be `null` to default to the empty\n// set of marks.\n\n\nNodeType.prototype.create = function create(attrs, content, marks) {\n  if (this.isText) {\n    throw new Error(\"NodeType.create can't construct text nodes\");\n  }\n\n  return new Node(this, this.computeAttrs(attrs), Fragment.from(content), Mark.setFrom(marks));\n}; // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\n// Like [`create`](#model.NodeType.create), but check the given content\n// against the node type's content restrictions, and throw an error\n// if it doesn't match.\n\n\nNodeType.prototype.createChecked = function createChecked(attrs, content, marks) {\n  content = Fragment.from(content);\n\n  if (!this.validContent(content)) {\n    throw new RangeError(\"Invalid content for node \" + this.name);\n  }\n\n  return new Node(this, this.computeAttrs(attrs), content, Mark.setFrom(marks));\n}; // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → ?Node\n// Like [`create`](#model.NodeType.create), but see if it is necessary to\n// add nodes to the start or end of the given fragment to make it\n// fit the node. If no fitting wrapping can be found, return null.\n// Note that, due to the fact that required nodes can always be\n// created, this will always succeed if you pass null or\n// `Fragment.empty` as content.\n\n\nNodeType.prototype.createAndFill = function createAndFill(attrs, content, marks) {\n  attrs = this.computeAttrs(attrs);\n  content = Fragment.from(content);\n\n  if (content.size) {\n    var before = this.contentMatch.fillBefore(content);\n\n    if (!before) {\n      return null;\n    }\n\n    content = before.append(content);\n  }\n\n  var after = this.contentMatch.matchFragment(content).fillBefore(Fragment.empty, true);\n\n  if (!after) {\n    return null;\n  }\n\n  return new Node(this, attrs, content.append(after), Mark.setFrom(marks));\n}; // :: (Fragment) → bool\n// Returns true if the given fragment is valid content for this node\n// type with the given attributes.\n\n\nNodeType.prototype.validContent = function validContent(content) {\n  var this$1 = this;\n  var result = this.contentMatch.matchFragment(content);\n\n  if (!result || !result.validEnd) {\n    return false;\n  }\n\n  for (var i = 0; i < content.childCount; i++) {\n    if (!this$1.allowsMarks(content.child(i).marks)) {\n      return false;\n    }\n  }\n\n  return true;\n}; // :: (MarkType) → bool\n// Check whether the given mark type is allowed in this node.\n\n\nNodeType.prototype.allowsMarkType = function allowsMarkType(markType) {\n  return this.markSet == null || this.markSet.indexOf(markType) > -1;\n}; // :: ([Mark]) → bool\n// Test whether the given set of marks are allowed in this node.\n\n\nNodeType.prototype.allowsMarks = function allowsMarks(marks) {\n  var this$1 = this;\n\n  if (this.markSet == null) {\n    return true;\n  }\n\n  for (var i = 0; i < marks.length; i++) {\n    if (!this$1.allowsMarkType(marks[i].type)) {\n      return false;\n    }\n  }\n\n  return true;\n}; // :: ([Mark]) → [Mark]\n// Removes the marks that are not allowed in this node from the given set.\n\n\nNodeType.prototype.allowedMarks = function allowedMarks(marks) {\n  var this$1 = this;\n\n  if (this.markSet == null) {\n    return marks;\n  }\n\n  var copy;\n\n  for (var i = 0; i < marks.length; i++) {\n    if (!this$1.allowsMarkType(marks[i].type)) {\n      if (!copy) {\n        copy = marks.slice(0, i);\n      }\n    } else if (copy) {\n      copy.push(marks[i]);\n    }\n  }\n\n  return !copy ? marks : copy.length ? copy : Mark.empty;\n};\n\nNodeType.compile = function compile(nodes, schema) {\n  var result = Object.create(null);\n  nodes.forEach(function (name, spec) {\n    return result[name] = new NodeType(name, schema, spec);\n  });\n  var topType = schema.spec.topNode || \"doc\";\n\n  if (!result[topType]) {\n    throw new RangeError(\"Schema is missing its top node type ('\" + topType + \"')\");\n  }\n\n  if (!result.text) {\n    throw new RangeError(\"Every schema needs a 'text' type\");\n  }\n\n  for (var _ in result.text.attrs) {\n    throw new RangeError(\"The text node type should not have attributes\");\n  }\n\n  return result;\n};\n\nObject.defineProperties(NodeType.prototype, prototypeAccessors$4); // Attribute descriptors\n\nvar Attribute = function Attribute(options) {\n  this.hasDefault = Object.prototype.hasOwnProperty.call(options, \"default\");\n  this.default = options.default;\n};\n\nvar prototypeAccessors$1$2 = {\n  isRequired: {}\n};\n\nprototypeAccessors$1$2.isRequired.get = function () {\n  return !this.hasDefault;\n};\n\nObject.defineProperties(Attribute.prototype, prototypeAccessors$1$2); // Marks\n// ::- Like nodes, marks (which are associated with nodes to signify\n// things like emphasis or being part of a link) are\n// [tagged](#model.Mark.type) with type objects, which are\n// instantiated once per `Schema`.\n\nvar MarkType = function MarkType(name, rank, schema, spec) {\n  // :: string\n  // The name of the mark type.\n  this.name = name; // :: Schema\n  // The schema that this mark type instance is part of.\n\n  this.schema = schema; // :: MarkSpec\n  // The spec on which the type is based.\n\n  this.spec = spec;\n  this.attrs = initAttrs(spec.attrs);\n  this.rank = rank;\n  this.excluded = null;\n  var defaults = defaultAttrs(this.attrs);\n  this.instance = defaults && new Mark(this, defaults);\n}; // :: (?Object) → Mark\n// Create a mark of this type. `attrs` may be `null` or an object\n// containing only some of the mark's attributes. The others, if\n// they have defaults, will be added.\n\n\nMarkType.prototype.create = function create(attrs) {\n  if (!attrs && this.instance) {\n    return this.instance;\n  }\n\n  return new Mark(this, computeAttrs(this.attrs, attrs));\n};\n\nMarkType.compile = function compile(marks, schema) {\n  var result = Object.create(null),\n      rank = 0;\n  marks.forEach(function (name, spec) {\n    return result[name] = new MarkType(name, rank++, schema, spec);\n  });\n  return result;\n}; // :: ([Mark]) → [Mark]\n// When there is a mark of this type in the given set, a new set\n// without it is returned. Otherwise, the input set is returned.\n\n\nMarkType.prototype.removeFromSet = function removeFromSet(set) {\n  var this$1 = this;\n\n  for (var i = 0; i < set.length; i++) {\n    if (set[i].type == this$1) {\n      return set.slice(0, i).concat(set.slice(i + 1));\n    }\n  }\n\n  return set;\n}; // :: ([Mark]) → ?Mark\n// Tests whether there is a mark of this type in the given set.\n\n\nMarkType.prototype.isInSet = function isInSet(set) {\n  var this$1 = this;\n\n  for (var i = 0; i < set.length; i++) {\n    if (set[i].type == this$1) {\n      return set[i];\n    }\n  }\n}; // :: (MarkType) → bool\n// Queries whether a given mark type is\n// [excluded](#model.MarkSpec.excludes) by this one.\n\n\nMarkType.prototype.excludes = function excludes(other) {\n  return this.excluded.indexOf(other) > -1;\n}; // SchemaSpec:: interface\n// An object describing a schema, as passed to the [`Schema`](#model.Schema)\n// constructor.\n//\n//   nodes:: union<Object<NodeSpec>, OrderedMap<NodeSpec>>\n//   The node types in this schema. Maps names to\n//   [`NodeSpec`](#model.NodeSpec) objects that describe the node type\n//   associated with that name. Their order is significant—it\n//   determines which [parse rules](#model.NodeSpec.parseDOM) take\n//   precedence by default, and which nodes come first in a given\n//   [group](#model.NodeSpec.group).\n//\n//   marks:: ?union<Object<MarkSpec>, OrderedMap<MarkSpec>>\n//   The mark types that exist in this schema. The order in which they\n//   are provided determines the order in which [mark\n//   sets](#model.Mark.addToSet) are sorted and in which [parse\n//   rules](#model.MarkSpec.parseDOM) are tried.\n//\n//   topNode:: ?string\n//   The name of the default top-level node for the schema. Defaults\n//   to `\"doc\"`.\n// NodeSpec:: interface\n//\n//   content:: ?string\n//   The content expression for this node, as described in the [schema\n//   guide](/docs/guide/#schema.content_expressions). When not given,\n//   the node does not allow any content.\n//\n//   marks:: ?string\n//   The marks that are allowed inside of this node. May be a\n//   space-separated string referring to mark names or groups, `\"_\"`\n//   to explicitly allow all marks, or `\"\"` to disallow marks. When\n//   not given, nodes with inline content default to allowing all\n//   marks, other nodes default to not allowing marks.\n//\n//   group:: ?string\n//   The group or space-separated groups to which this node belongs,\n//   which can be referred to in the content expressions for the\n//   schema.\n//\n//   inline:: ?bool\n//   Should be set to true for inline nodes. (Implied for text nodes.)\n//\n//   atom:: ?bool\n//   Can be set to true to indicate that, though this isn't a [leaf\n//   node](#model.NodeType.isLeaf), it doesn't have directly editable\n//   content and should be treated as a single unit in the view.\n//\n//   attrs:: ?Object<AttributeSpec>\n//   The attributes that nodes of this type get.\n//\n//   selectable:: ?bool\n//   Controls whether nodes of this type can be selected as a [node\n//   selection](#state.NodeSelection). Defaults to true for non-text\n//   nodes.\n//\n//   draggable:: ?bool\n//   Determines whether nodes of this type can be dragged without\n//   being selected. Defaults to false.\n//\n//   code:: ?bool\n//   Can be used to indicate that this node contains code, which\n//   causes some commands to behave differently.\n//\n//   defining:: ?bool\n//   Determines whether this node is considered an important parent\n//   node during replace operations (such as paste). Non-defining (the\n//   default) nodes get dropped when their entire content is replaced,\n//   whereas defining nodes persist and wrap the inserted content.\n//   Likewise, in _inserted_ content the defining parents of the\n//   content are preserved when possible. Typically,\n//   non-default-paragraph textblock types, and possibly list items,\n//   are marked as defining.\n//\n//   isolating:: ?bool\n//   When enabled (default is false), the sides of nodes of this type\n//   count as boundaries that regular editing operations, like\n//   backspacing or lifting, won't cross. An example of a node that\n//   should probably have this enabled is a table cell.\n//\n//   toDOM:: ?(node: Node) → DOMOutputSpec\n//   Defines the default way a node of this type should be serialized\n//   to DOM/HTML (as used by\n//   [`DOMSerializer.fromSchema`](#model.DOMSerializer^fromSchema)).\n//   Should return a DOM node or an [array\n//   structure](#model.DOMOutputSpec) that describes one, with an\n//   optional number zero (“hole”) in it to indicate where the node's\n//   content should be inserted.\n//\n//   For text nodes, the default is to create a text DOM node. Though\n//   it is possible to create a serializer where text is rendered\n//   differently, this is not supported inside the editor, so you\n//   shouldn't override that in your text node spec.\n//\n//   parseDOM:: ?[ParseRule]\n//   Associates DOM parser information with this node, which can be\n//   used by [`DOMParser.fromSchema`](#model.DOMParser^fromSchema) to\n//   automatically derive a parser. The `node` field in the rules is\n//   implied (the name of this node will be filled in automatically).\n//   If you supply your own parser, you do not need to also specify\n//   parsing rules in your schema.\n//\n//   toDebugString:: ?(node: Node) -> string\n//   Defines the default way a node of this type should be serialized\n//   to a string representation for debugging (e.g. in error messages).\n// MarkSpec:: interface\n//\n//   attrs:: ?Object<AttributeSpec>\n//   The attributes that marks of this type get.\n//\n//   inclusive:: ?bool\n//   Whether this mark should be active when the cursor is positioned\n//   at its end (or at its start when that is also the start of the\n//   parent node). Defaults to true.\n//\n//   excludes:: ?string\n//   Determines which other marks this mark can coexist with. Should\n//   be a space-separated strings naming other marks or groups of marks.\n//   When a mark is [added](#model.Mark.addToSet) to a set, all marks\n//   that it excludes are removed in the process. If the set contains\n//   any mark that excludes the new mark but is not, itself, excluded\n//   by the new mark, the mark can not be added an the set. You can\n//   use the value `\"_\"` to indicate that the mark excludes all\n//   marks in the schema.\n//\n//   Defaults to only being exclusive with marks of the same type. You\n//   can set it to an empty string (or any string not containing the\n//   mark's own name) to allow multiple marks of a given type to\n//   coexist (as long as they have different attributes).\n//\n//   group:: ?string\n//   The group or space-separated groups to which this mark belongs.\n//\n//   spanning:: ?bool\n//   Determines whether marks of this type can span multiple adjacent\n//   nodes when serialized to DOM/HTML. Defaults to true.\n//\n//   toDOM:: ?(mark: Mark, inline: bool) → DOMOutputSpec\n//   Defines the default way marks of this type should be serialized\n//   to DOM/HTML. When the resulting spec contains a hole, that is\n//   where the marked content is placed. Otherwise, it is appended to\n//   the top node.\n//\n//   parseDOM:: ?[ParseRule]\n//   Associates DOM parser information with this mark (see the\n//   corresponding [node spec field](#model.NodeSpec.parseDOM)). The\n//   `mark` field in the rules is implied.\n// AttributeSpec:: interface\n//\n// Used to [define](#model.NodeSpec.attrs) attributes on nodes or\n// marks.\n//\n//   default:: ?any\n//   The default value for this attribute, to use when no explicit\n//   value is provided. Attributes that have no default must be\n//   provided whenever a node or mark of a type that has them is\n//   created.\n// ::- A document schema. Holds [node](#model.NodeType) and [mark\n// type](#model.MarkType) objects for the nodes and marks that may\n// occur in conforming documents, and provides functionality for\n// creating and deserializing such documents.\n\n\nvar Schema = function Schema(spec) {\n  var this$1 = this; // :: SchemaSpec\n  // The [spec](#model.SchemaSpec) on which the schema is based,\n  // with the added guarantee that its `nodes` and `marks`\n  // properties are\n  // [`OrderedMap`](https://github.com/marijnh/orderedmap) instances\n  // (not raw objects).\n\n  this.spec = {};\n\n  for (var prop in spec) {\n    this$1.spec[prop] = spec[prop];\n  }\n\n  this.spec.nodes = OrderedMap.from(spec.nodes);\n  this.spec.marks = OrderedMap.from(spec.marks); // :: Object<NodeType>\n  // An object mapping the schema's node names to node type objects.\n\n  this.nodes = NodeType.compile(this.spec.nodes, this); // :: Object<MarkType>\n  // A map from mark names to mark type objects.\n\n  this.marks = MarkType.compile(this.spec.marks, this);\n  var contentExprCache = Object.create(null);\n\n  for (var prop$1 in this$1.nodes) {\n    if (prop$1 in this$1.marks) {\n      throw new RangeError(prop$1 + \" can not be both a node and a mark\");\n    }\n\n    var type = this$1.nodes[prop$1],\n        contentExpr = type.spec.content || \"\",\n        markExpr = type.spec.marks;\n    type.contentMatch = contentExprCache[contentExpr] || (contentExprCache[contentExpr] = ContentMatch.parse(contentExpr, this$1.nodes));\n    type.inlineContent = type.contentMatch.inlineContent;\n    type.markSet = markExpr == \"_\" ? null : markExpr ? gatherMarks(this$1, markExpr.split(\" \")) : markExpr == \"\" || !type.inlineContent ? [] : null;\n  }\n\n  for (var prop$2 in this$1.marks) {\n    var type$1 = this$1.marks[prop$2],\n        excl = type$1.spec.excludes;\n    type$1.excluded = excl == null ? [type$1] : excl == \"\" ? [] : gatherMarks(this$1, excl.split(\" \"));\n  }\n\n  this.nodeFromJSON = this.nodeFromJSON.bind(this);\n  this.markFromJSON = this.markFromJSON.bind(this); // :: NodeType\n  // The type of the [default top node](#model.SchemaSpec.topNode)\n  // for this schema.\n\n  this.topNodeType = this.nodes[this.spec.topNode || \"doc\"]; // :: Object\n  // An object for storing whatever values modules may want to\n  // compute and cache per schema. (If you want to store something\n  // in it, try to use property names unlikely to clash.)\n\n  this.cached = Object.create(null);\n  this.cached.wrappings = Object.create(null);\n}; // :: (union<string, NodeType>, ?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\n// Create a node in this schema. The `type` may be a string or a\n// `NodeType` instance. Attributes will be extended\n// with defaults, `content` may be a `Fragment`,\n// `null`, a `Node`, or an array of nodes.\n\n\nSchema.prototype.node = function node(type, attrs, content, marks) {\n  if (typeof type == \"string\") {\n    type = this.nodeType(type);\n  } else if (!(type instanceof NodeType)) {\n    throw new RangeError(\"Invalid node type: \" + type);\n  } else if (type.schema != this) {\n    throw new RangeError(\"Node type from different schema used (\" + type.name + \")\");\n  }\n\n  return type.createChecked(attrs, content, marks);\n}; // :: (string, ?[Mark]) → Node\n// Create a text node in the schema. Empty text nodes are not\n// allowed.\n\n\nSchema.prototype.text = function text(text$1, marks) {\n  var type = this.nodes.text;\n  return new TextNode(type, type.defaultAttrs, text$1, Mark.setFrom(marks));\n}; // :: (union<string, MarkType>, ?Object) → Mark\n// Create a mark with the given type and attributes.\n\n\nSchema.prototype.mark = function mark(type, attrs) {\n  if (typeof type == \"string\") {\n    type = this.marks[type];\n  }\n\n  return type.create(attrs);\n}; // :: (Object) → Node\n// Deserialize a node from its JSON representation. This method is\n// bound.\n\n\nSchema.prototype.nodeFromJSON = function nodeFromJSON(json) {\n  return Node.fromJSON(this, json);\n}; // :: (Object) → Mark\n// Deserialize a mark from its JSON representation. This method is\n// bound.\n\n\nSchema.prototype.markFromJSON = function markFromJSON(json) {\n  return Mark.fromJSON(this, json);\n};\n\nSchema.prototype.nodeType = function nodeType(name) {\n  var found = this.nodes[name];\n\n  if (!found) {\n    throw new RangeError(\"Unknown node type: \" + name);\n  }\n\n  return found;\n};\n\nfunction gatherMarks(schema, marks) {\n  var found = [];\n\n  for (var i = 0; i < marks.length; i++) {\n    var name = marks[i],\n        mark = schema.marks[name],\n        ok = mark;\n\n    if (mark) {\n      found.push(mark);\n    } else {\n      for (var prop in schema.marks) {\n        var mark$1 = schema.marks[prop];\n\n        if (name == \"_\" || mark$1.spec.group && mark$1.spec.group.split(\" \").indexOf(name) > -1) {\n          found.push(ok = mark$1);\n        }\n      }\n    }\n\n    if (!ok) {\n      throw new SyntaxError(\"Unknown mark type: '\" + marks[i] + \"'\");\n    }\n  }\n\n  return found;\n} // ParseOptions:: interface\n// These are the options recognized by the\n// [`parse`](#model.DOMParser.parse) and\n// [`parseSlice`](#model.DOMParser.parseSlice) methods.\n//\n//   preserveWhitespace:: ?union<bool, \"full\">\n//   By default, whitespace is collapsed as per HTML's rules. Pass\n//   `true` to preserve whitespace, but normalize newlines to\n//   spaces, and `\"full\"` to preserve whitespace entirely.\n//\n//   findPositions:: ?[{node: dom.Node, offset: number}]\n//   When given, the parser will, beside parsing the content,\n//   record the document positions of the given DOM positions. It\n//   will do so by writing to the objects, adding a `pos` property\n//   that holds the document position. DOM positions that are not\n//   in the parsed content will not be written to.\n//\n//   from:: ?number\n//   The child node index to start parsing from.\n//\n//   to:: ?number\n//   The child node index to stop parsing at.\n//\n//   topNode:: ?Node\n//   By default, the content is parsed into the schema's default\n//   [top node type](#model.Schema.topNodeType). You can pass this\n//   option to use the type and attributes from a different node\n//   as the top container.\n//\n//   topMatch:: ?ContentMatch\n//   Provide the starting content match that content parsed into the\n//   top node is matched against.\n//\n//   context:: ?ResolvedPos\n//   A set of additional nodes to count as\n//   [context](#model.ParseRule.context) when parsing, above the\n//   given [top node](#model.ParseOptions.topNode).\n// ParseRule:: interface\n// A value that describes how to parse a given DOM node or inline\n// style as a ProseMirror node or mark.\n//\n//   tag:: ?string\n//   A CSS selector describing the kind of DOM elements to match. A\n//   single rule should have _either_ a `tag` or a `style` property.\n//\n//   namespace:: ?string\n//   The namespace to match. This should be used with `tag`.\n//   Nodes are only matched when the namespace matches or this property\n//   is null.\n//\n//   style:: ?string\n//   A CSS property name to match. When given, this rule matches\n//   inline styles that list that property. May also have the form\n//   `\"property=value\"`, in which case the rule only matches if the\n//   propery's value exactly matches the given value. (For more\n//   complicated filters, use [`getAttrs`](#model.ParseRule.getAttrs)\n//   and return undefined to indicate that the match failed.)\n//\n//   priority:: ?number\n//   Can be used to change the order in which the parse rules in a\n//   schema are tried. Those with higher priority come first. Rules\n//   without a priority are counted as having priority 50. This\n//   property is only meaningful in a schema—when directly\n//   constructing a parser, the order of the rule array is used.\n//\n//   context:: ?string\n//   When given, restricts this rule to only match when the current\n//   context—the parent nodes into which the content is being\n//   parsed—matches this expression. Should contain one or more node\n//   names or node group names followed by single or double slashes.\n//   For example `\"paragraph/\"` means the rule only matches when the\n//   parent node is a paragraph, `\"blockquote/paragraph/\"` restricts\n//   it to be in a paragraph that is inside a blockquote, and\n//   `\"section//\"` matches any position inside a section—a double\n//   slash matches any sequence of ancestor nodes. To allow multiple\n//   different contexts, they can be separated by a pipe (`|`)\n//   character, as in `\"blockquote/|list_item/\"`.\n//\n//   node:: ?string\n//   The name of the node type to create when this rule matches. Only\n//   valid for rules with a `tag` property, not for style rules. Each\n//   rule should have one of a `node`, `mark`, or `ignore` property\n//   (except when it appears in a [node](#model.NodeSpec.parseDOM) or\n//   [mark spec](#model.MarkSpec.parseDOM), in which case the `node`\n//   or `mark` property will be derived from its position).\n//\n//   mark:: ?string\n//   The name of the mark type to wrap the matched content in.\n//\n//   ignore:: ?bool\n//   When true, ignore content that matches this rule.\n//\n//   skip:: ?bool\n//   When true, ignore the node that matches this rule, but do parse\n//   its content.\n//\n//   attrs:: ?Object\n//   Attributes for the node or mark created by this rule. When\n//   `getAttrs` is provided, it takes precedence.\n//\n//   getAttrs:: ?(union<dom.Node, string>) → ?union<Object, false>\n//   A function used to compute the attributes for the node or mark\n//   created by this rule. Can also be used to describe further\n//   conditions the DOM element or style must match. When it returns\n//   `false`, the rule won't match. When it returns null or undefined,\n//   that is interpreted as an empty/default set of attributes.\n//\n//   Called with a DOM Element for `tag` rules, and with a string (the\n//   style's value) for `style` rules.\n//\n//   contentElement:: ?union<string, (dom.Node) → dom.Node>\n//   For `tag` rules that produce non-leaf nodes or marks, by default\n//   the content of the DOM element is parsed as content of the mark\n//   or node. If the child nodes are in a descendent node, this may be\n//   a CSS selector string that the parser must use to find the actual\n//   content element, or a function that returns the actual content\n//   element to the parser.\n//\n//   getContent:: ?(dom.Node, schema: Schema) → Fragment\n//   Can be used to override the content of a matched node. When\n//   present, instead of parsing the node's child nodes, the result of\n//   this function is used.\n//\n//   preserveWhitespace:: ?union<bool, \"full\">\n//   Controls whether whitespace should be preserved when parsing the\n//   content inside the matched element. `false` means whitespace may\n//   be collapsed, `true` means that whitespace should be preserved\n//   but newlines normalized to spaces, and `\"full\"` means that\n//   newlines should also be preserved.\n// ::- A DOM parser represents a strategy for parsing DOM content into\n// a ProseMirror document conforming to a given schema. Its behavior\n// is defined by an array of [rules](#model.ParseRule).\n\n\nvar DOMParser = function DOMParser(schema, rules) {\n  var this$1 = this; // :: Schema\n  // The schema into which the parser parses.\n\n  this.schema = schema; // :: [ParseRule]\n  // The set of [parse rules](#model.ParseRule) that the parser\n  // uses, in order of precedence.\n\n  this.rules = rules;\n  this.tags = [];\n  this.styles = [];\n  rules.forEach(function (rule) {\n    if (rule.tag) {\n      this$1.tags.push(rule);\n    } else if (rule.style) {\n      this$1.styles.push(rule);\n    }\n  });\n}; // :: (dom.Node, ?ParseOptions) → Node\n// Parse a document from the content of a DOM node.\n\n\nDOMParser.prototype.parse = function parse(dom, options) {\n  if (options === void 0) options = {};\n  var context = new ParseContext(this, options, false);\n  context.addAll(dom, null, options.from, options.to);\n  return context.finish();\n}; // :: (dom.Node, ?ParseOptions) → Slice\n// Parses the content of the given DOM node, like\n// [`parse`](#model.DOMParser.parse), and takes the same set of\n// options. But unlike that method, which produces a whole node,\n// this one returns a slice that is open at the sides, meaning that\n// the schema constraints aren't applied to the start of nodes to\n// the left of the input and the end of nodes at the end.\n\n\nDOMParser.prototype.parseSlice = function parseSlice(dom, options) {\n  if (options === void 0) options = {};\n  var context = new ParseContext(this, options, true);\n  context.addAll(dom, null, options.from, options.to);\n  return Slice.maxOpen(context.finish());\n};\n\nDOMParser.prototype.matchTag = function matchTag(dom, context) {\n  var this$1 = this;\n\n  for (var i = 0; i < this.tags.length; i++) {\n    var rule = this$1.tags[i];\n\n    if (matches(dom, rule.tag) && (rule.namespace === undefined || dom.namespaceURI == rule.namespace) && (!rule.context || context.matchesContext(rule.context))) {\n      if (rule.getAttrs) {\n        var result = rule.getAttrs(dom);\n\n        if (result === false) {\n          continue;\n        }\n\n        rule.attrs = result;\n      }\n\n      return rule;\n    }\n  }\n};\n\nDOMParser.prototype.matchStyle = function matchStyle(prop, value, context) {\n  var this$1 = this;\n\n  for (var i = 0; i < this.styles.length; i++) {\n    var rule = this$1.styles[i];\n\n    if (rule.style.indexOf(prop) != 0 || rule.context && !context.matchesContext(rule.context) || // Test that the style string either precisely matches the prop,\n    // or has an '=' sign after the prop, followed by the given\n    // value.\n    rule.style.length > prop.length && (rule.style.charCodeAt(prop.length) != 61 || rule.style.slice(prop.length + 1) != value)) {\n      continue;\n    }\n\n    if (rule.getAttrs) {\n      var result = rule.getAttrs(value);\n\n      if (result === false) {\n        continue;\n      }\n\n      rule.attrs = result;\n    }\n\n    return rule;\n  }\n}; // : (Schema) → [ParseRule]\n\n\nDOMParser.schemaRules = function schemaRules(schema) {\n  var result = [];\n\n  function insert(rule) {\n    var priority = rule.priority == null ? 50 : rule.priority,\n        i = 0;\n\n    for (; i < result.length; i++) {\n      var next = result[i],\n          nextPriority = next.priority == null ? 50 : next.priority;\n\n      if (nextPriority < priority) {\n        break;\n      }\n    }\n\n    result.splice(i, 0, rule);\n  }\n\n  var loop = function (name) {\n    var rules = schema.marks[name].spec.parseDOM;\n\n    if (rules) {\n      rules.forEach(function (rule) {\n        insert(rule = copy(rule));\n        rule.mark = name;\n      });\n    }\n  };\n\n  for (var name in schema.marks) loop(name);\n\n  var loop$1 = function (name) {\n    var rules$1 = schema.nodes[name$1].spec.parseDOM;\n\n    if (rules$1) {\n      rules$1.forEach(function (rule) {\n        insert(rule = copy(rule));\n        rule.node = name$1;\n      });\n    }\n  };\n\n  for (var name$1 in schema.nodes) loop$1(name);\n\n  return result;\n}; // :: (Schema) → DOMParser\n// Construct a DOM parser using the parsing rules listed in a\n// schema's [node specs](#model.NodeSpec.parseDOM), reordered by\n// [priority](#model.ParseRule.priority).\n\n\nDOMParser.fromSchema = function fromSchema(schema) {\n  return schema.cached.domParser || (schema.cached.domParser = new DOMParser(schema, DOMParser.schemaRules(schema)));\n}; // : Object<bool> The block-level tags in HTML5\n\n\nvar blockTags = {\n  address: true,\n  article: true,\n  aside: true,\n  blockquote: true,\n  canvas: true,\n  dd: true,\n  div: true,\n  dl: true,\n  fieldset: true,\n  figcaption: true,\n  figure: true,\n  footer: true,\n  form: true,\n  h1: true,\n  h2: true,\n  h3: true,\n  h4: true,\n  h5: true,\n  h6: true,\n  header: true,\n  hgroup: true,\n  hr: true,\n  li: true,\n  noscript: true,\n  ol: true,\n  output: true,\n  p: true,\n  pre: true,\n  section: true,\n  table: true,\n  tfoot: true,\n  ul: true\n}; // : Object<bool> The tags that we normally ignore.\n\nvar ignoreTags = {\n  head: true,\n  noscript: true,\n  object: true,\n  script: true,\n  style: true,\n  title: true\n}; // : Object<bool> List tags.\n\nvar listTags = {\n  ol: true,\n  ul: true\n}; // Using a bitfield for node context options\n\nvar OPT_PRESERVE_WS = 1;\nvar OPT_PRESERVE_WS_FULL = 2;\nvar OPT_OPEN_LEFT = 4;\n\nfunction wsOptionsFor(preserveWhitespace) {\n  return (preserveWhitespace ? OPT_PRESERVE_WS : 0) | (preserveWhitespace === \"full\" ? OPT_PRESERVE_WS_FULL : 0);\n}\n\nvar NodeContext = function NodeContext(type, attrs, marks, solid, match, options) {\n  this.type = type;\n  this.attrs = attrs;\n  this.solid = solid;\n  this.match = match || (options & OPT_OPEN_LEFT ? null : type.contentMatch);\n  this.options = options;\n  this.content = [];\n  this.marks = marks;\n  this.activeMarks = Mark.none;\n};\n\nNodeContext.prototype.findWrapping = function findWrapping(node) {\n  if (!this.match) {\n    if (!this.type) {\n      return [];\n    }\n\n    var fill = this.type.contentMatch.fillBefore(Fragment.from(node));\n\n    if (fill) {\n      this.match = this.type.contentMatch.matchFragment(fill);\n    } else {\n      var start = this.type.contentMatch,\n          wrap;\n\n      if (wrap = start.findWrapping(node.type)) {\n        this.match = start;\n        return wrap;\n      } else {\n        return null;\n      }\n    }\n  }\n\n  return this.match.findWrapping(node.type);\n};\n\nNodeContext.prototype.finish = function finish(openEnd) {\n  if (!(this.options & OPT_PRESERVE_WS)) {\n    // Strip trailing whitespace\n    var last = this.content[this.content.length - 1],\n        m;\n\n    if (last && last.isText && (m = /\\s+$/.exec(last.text))) {\n      if (last.text.length == m[0].length) {\n        this.content.pop();\n      } else {\n        this.content[this.content.length - 1] = last.withText(last.text.slice(0, last.text.length - m[0].length));\n      }\n    }\n  }\n\n  var content = Fragment.from(this.content);\n\n  if (!openEnd && this.match) {\n    content = content.append(this.match.fillBefore(Fragment.empty, true));\n  }\n\n  return this.type ? this.type.create(this.attrs, content, this.marks) : content;\n};\n\nvar ParseContext = function ParseContext(parser, options, open) {\n  // : DOMParser The parser we are using.\n  this.parser = parser; // : Object The options passed to this parse.\n\n  this.options = options;\n  this.isOpen = open;\n  this.pendingMarks = [];\n  var topNode = options.topNode,\n      topContext;\n  var topOptions = wsOptionsFor(options.preserveWhitespace) | (open ? OPT_OPEN_LEFT : 0);\n\n  if (topNode) {\n    topContext = new NodeContext(topNode.type, topNode.attrs, Mark.none, true, options.topMatch || topNode.type.contentMatch, topOptions);\n  } else if (open) {\n    topContext = new NodeContext(null, null, Mark.none, true, null, topOptions);\n  } else {\n    topContext = new NodeContext(parser.schema.topNodeType, null, Mark.none, true, null, topOptions);\n  }\n\n  this.nodes = [topContext]; // : [Mark] The current set of marks\n\n  this.open = 0;\n  this.find = options.findPositions;\n  this.needsBlock = false;\n};\n\nvar prototypeAccessors$6 = {\n  top: {},\n  currentPos: {}\n};\n\nprototypeAccessors$6.top.get = function () {\n  return this.nodes[this.open];\n}; // : (dom.Node)\n// Add a DOM node to the content. Text is inserted as text node,\n// otherwise, the node is passed to `addElement` or, if it has a\n// `style` attribute, `addElementWithStyles`.\n\n\nParseContext.prototype.addDOM = function addDOM(dom) {\n  var this$1 = this;\n\n  if (dom.nodeType == 3) {\n    this.addTextNode(dom);\n  } else if (dom.nodeType == 1) {\n    var style = dom.getAttribute(\"style\");\n    var marks = style ? this.readStyles(parseStyles(style)) : null;\n\n    if (marks != null) {\n      for (var i = 0; i < marks.length; i++) {\n        this$1.addPendingMark(marks[i]);\n      }\n    }\n\n    this.addElement(dom);\n\n    if (marks != null) {\n      for (var i$1 = 0; i$1 < marks.length; i$1++) {\n        this$1.removePendingMark(marks[i$1]);\n      }\n    }\n  }\n};\n\nParseContext.prototype.addTextNode = function addTextNode(dom) {\n  var value = dom.nodeValue;\n  var top = this.top;\n\n  if ((top.type ? top.type.inlineContent : top.content.length && top.content[0].isInline) || /\\S/.test(value)) {\n    if (!(top.options & OPT_PRESERVE_WS)) {\n      value = value.replace(/\\s+/g, \" \"); // If this starts with whitespace, and there is no node before it, or\n      // a hard break, or a text node that ends with whitespace, strip the\n      // leading space.\n\n      if (/^\\s/.test(value) && this.open == this.nodes.length - 1) {\n        var nodeBefore = top.content[top.content.length - 1];\n        var domNodeBefore = dom.previousSibling;\n\n        if (!nodeBefore || domNodeBefore && domNodeBefore.nodeName == 'BR' || nodeBefore.isText && /\\s$/.test(nodeBefore.text)) {\n          value = value.slice(1);\n        }\n      }\n    } else if (!(top.options & OPT_PRESERVE_WS_FULL)) {\n      value = value.replace(/\\r?\\n|\\r/g, \" \");\n    }\n\n    if (value) {\n      this.insertNode(this.parser.schema.text(value));\n    }\n\n    this.findInText(dom);\n  } else {\n    this.findInside(dom);\n  }\n}; // : (dom.Element)\n// Try to find a handler for the given tag and use that to parse. If\n// none is found, the element's content nodes are added directly.\n\n\nParseContext.prototype.addElement = function addElement(dom) {\n  var name = dom.nodeName.toLowerCase();\n\n  if (listTags.hasOwnProperty(name)) {\n    normalizeList(dom);\n  }\n\n  var rule = this.options.ruleFromNode && this.options.ruleFromNode(dom) || this.parser.matchTag(dom, this);\n\n  if (rule ? rule.ignore : ignoreTags.hasOwnProperty(name)) {\n    this.findInside(dom);\n  } else if (!rule || rule.skip) {\n    if (rule && rule.skip.nodeType) {\n      dom = rule.skip;\n    }\n\n    var sync,\n        top = this.top,\n        oldNeedsBlock = this.needsBlock;\n\n    if (blockTags.hasOwnProperty(name)) {\n      sync = true;\n\n      if (!top.type) {\n        this.needsBlock = true;\n      }\n    }\n\n    this.addAll(dom);\n\n    if (sync) {\n      this.sync(top);\n    }\n\n    this.needsBlock = oldNeedsBlock;\n  } else {\n    this.addElementByRule(dom, rule);\n  }\n}; // Run any style parser associated with the node's styles. Either\n// return an array of marks, or null to indicate some of the styles\n// had a rule with `ignore` set.\n\n\nParseContext.prototype.readStyles = function readStyles(styles) {\n  var this$1 = this;\n  var marks = Mark.none;\n\n  for (var i = 0; i < styles.length; i += 2) {\n    var rule = this$1.parser.matchStyle(styles[i], styles[i + 1], this$1);\n\n    if (!rule) {\n      continue;\n    }\n\n    if (rule.ignore) {\n      return null;\n    }\n\n    marks = this$1.parser.schema.marks[rule.mark].create(rule.attrs).addToSet(marks);\n  }\n\n  return marks;\n}; // : (dom.Element, ParseRule) → bool\n// Look up a handler for the given node. If none are found, return\n// false. Otherwise, apply it, use its return value to drive the way\n// the node's content is wrapped, and return true.\n\n\nParseContext.prototype.addElementByRule = function addElementByRule(dom, rule) {\n  var this$1 = this;\n  var sync, nodeType, markType, mark;\n\n  if (rule.node) {\n    nodeType = this.parser.schema.nodes[rule.node];\n\n    if (nodeType.isLeaf) {\n      this.insertNode(nodeType.create(rule.attrs));\n    } else {\n      sync = this.enter(nodeType, rule.attrs, rule.preserveWhitespace);\n    }\n  } else {\n    markType = this.parser.schema.marks[rule.mark];\n    mark = markType.create(rule.attrs);\n    this.addPendingMark(mark);\n  }\n\n  var startIn = this.top;\n\n  if (nodeType && nodeType.isLeaf) {\n    this.findInside(dom);\n  } else if (rule.getContent) {\n    this.findInside(dom);\n    rule.getContent(dom, this.parser.schema).forEach(function (node) {\n      return this$1.insertNode(node);\n    });\n  } else {\n    var contentDOM = rule.contentElement;\n\n    if (typeof contentDOM == \"string\") {\n      contentDOM = dom.querySelector(contentDOM);\n    } else if (typeof contentDOM == \"function\") {\n      contentDOM = contentDOM(dom);\n    }\n\n    if (!contentDOM) {\n      contentDOM = dom;\n    }\n\n    this.findAround(dom, contentDOM, true);\n    this.addAll(contentDOM, sync);\n  }\n\n  if (sync) {\n    this.sync(startIn);\n    this.open--;\n  }\n\n  if (mark) {\n    this.removePendingMark(mark);\n  }\n\n  return true;\n}; // : (dom.Node, ?NodeBuilder, ?number, ?number)\n// Add all child nodes between `startIndex` and `endIndex` (or the\n// whole node, if not given). If `sync` is passed, use it to\n// synchronize after every block element.\n\n\nParseContext.prototype.addAll = function addAll(parent, sync, startIndex, endIndex) {\n  var this$1 = this;\n  var index = startIndex || 0;\n\n  for (var dom = startIndex ? parent.childNodes[startIndex] : parent.firstChild, end = endIndex == null ? null : parent.childNodes[endIndex]; dom != end; dom = dom.nextSibling, ++index) {\n    this$1.findAtPoint(parent, index);\n    this$1.addDOM(dom);\n\n    if (sync && blockTags.hasOwnProperty(dom.nodeName.toLowerCase())) {\n      this$1.sync(sync);\n    }\n  }\n\n  this.findAtPoint(parent, index);\n}; // Try to find a way to fit the given node type into the current\n// context. May add intermediate wrappers and/or leave non-solid\n// nodes that we're in.\n\n\nParseContext.prototype.findPlace = function findPlace(node) {\n  var this$1 = this;\n  var route, sync;\n\n  for (var depth = this.open; depth >= 0; depth--) {\n    var cx = this$1.nodes[depth];\n    var found = cx.findWrapping(node);\n\n    if (found && (!route || route.length > found.length)) {\n      route = found;\n      sync = cx;\n\n      if (!found.length) {\n        break;\n      }\n    }\n\n    if (cx.solid) {\n      break;\n    }\n  }\n\n  if (!route) {\n    return false;\n  }\n\n  this.sync(sync);\n\n  for (var i = 0; i < route.length; i++) {\n    this$1.enterInner(route[i], null, false);\n  }\n\n  return true;\n}; // : (Node) → ?Node\n// Try to insert the given node, adjusting the context when needed.\n\n\nParseContext.prototype.insertNode = function insertNode(node) {\n  if (node.isInline && this.needsBlock && !this.top.type) {\n    var block = this.textblockFromContext();\n\n    if (block) {\n      this.enterInner(block);\n    }\n  }\n\n  if (this.findPlace(node)) {\n    this.closeExtra();\n    var top = this.top;\n    this.applyPendingMarks(top);\n\n    if (top.match) {\n      top.match = top.match.matchType(node.type);\n    }\n\n    var marks = top.activeMarks;\n\n    for (var i = 0; i < node.marks.length; i++) {\n      if (!top.type || top.type.allowsMarkType(node.marks[i].type)) {\n        marks = node.marks[i].addToSet(marks);\n      }\n    }\n\n    top.content.push(node.mark(marks));\n  }\n};\n\nParseContext.prototype.applyPendingMarks = function applyPendingMarks(top) {\n  var this$1 = this;\n\n  for (var i = 0; i < this.pendingMarks.length; i++) {\n    var mark = this$1.pendingMarks[i];\n\n    if ((!top.type || top.type.allowsMarkType(mark.type)) && !mark.type.isInSet(top.activeMarks)) {\n      top.activeMarks = mark.addToSet(top.activeMarks);\n      this$1.pendingMarks.splice(i--, 1);\n    }\n  }\n}; // : (NodeType, ?Object) → bool\n// Try to start a node of the given type, adjusting the context when\n// necessary.\n\n\nParseContext.prototype.enter = function enter(type, attrs, preserveWS) {\n  var ok = this.findPlace(type.create(attrs));\n\n  if (ok) {\n    this.applyPendingMarks(this.top);\n    this.enterInner(type, attrs, true, preserveWS);\n  }\n\n  return ok;\n}; // Open a node of the given type\n\n\nParseContext.prototype.enterInner = function enterInner(type, attrs, solid, preserveWS) {\n  this.closeExtra();\n  var top = this.top;\n  top.match = top.match && top.match.matchType(type, attrs);\n  var options = preserveWS == null ? top.options & ~OPT_OPEN_LEFT : wsOptionsFor(preserveWS);\n\n  if (top.options & OPT_OPEN_LEFT && top.content.length == 0) {\n    options |= OPT_OPEN_LEFT;\n  }\n\n  this.nodes.push(new NodeContext(type, attrs, top.activeMarks, solid, null, options));\n  this.open++;\n}; // Make sure all nodes above this.open are finished and added to\n// their parents\n\n\nParseContext.prototype.closeExtra = function closeExtra(openEnd) {\n  var this$1 = this;\n  var i = this.nodes.length - 1;\n\n  if (i > this.open) {\n    for (; i > this.open; i--) {\n      this$1.nodes[i - 1].content.push(this$1.nodes[i].finish(openEnd));\n    }\n\n    this.nodes.length = this.open + 1;\n  }\n};\n\nParseContext.prototype.finish = function finish() {\n  this.open = 0;\n  this.closeExtra(this.isOpen);\n  return this.nodes[0].finish(this.isOpen || this.options.topOpen);\n};\n\nParseContext.prototype.sync = function sync(to) {\n  var this$1 = this;\n\n  for (var i = this.open; i >= 0; i--) {\n    if (this$1.nodes[i] == to) {\n      this$1.open = i;\n      return;\n    }\n  }\n};\n\nParseContext.prototype.addPendingMark = function addPendingMark(mark) {\n  this.pendingMarks.push(mark);\n};\n\nParseContext.prototype.removePendingMark = function removePendingMark(mark) {\n  var found = this.pendingMarks.lastIndexOf(mark);\n\n  if (found > -1) {\n    this.pendingMarks.splice(found, 1);\n  } else {\n    var top = this.top;\n    top.activeMarks = mark.removeFromSet(top.activeMarks);\n  }\n};\n\nprototypeAccessors$6.currentPos.get = function () {\n  var this$1 = this;\n  this.closeExtra();\n  var pos = 0;\n\n  for (var i = this.open; i >= 0; i--) {\n    var content = this$1.nodes[i].content;\n\n    for (var j = content.length - 1; j >= 0; j--) {\n      pos += content[j].nodeSize;\n    }\n\n    if (i) {\n      pos++;\n    }\n  }\n\n  return pos;\n};\n\nParseContext.prototype.findAtPoint = function findAtPoint(parent, offset) {\n  var this$1 = this;\n\n  if (this.find) {\n    for (var i = 0; i < this.find.length; i++) {\n      if (this$1.find[i].node == parent && this$1.find[i].offset == offset) {\n        this$1.find[i].pos = this$1.currentPos;\n      }\n    }\n  }\n};\n\nParseContext.prototype.findInside = function findInside(parent) {\n  var this$1 = this;\n\n  if (this.find) {\n    for (var i = 0; i < this.find.length; i++) {\n      if (this$1.find[i].pos == null && parent.nodeType == 1 && parent.contains(this$1.find[i].node)) {\n        this$1.find[i].pos = this$1.currentPos;\n      }\n    }\n  }\n};\n\nParseContext.prototype.findAround = function findAround(parent, content, before) {\n  var this$1 = this;\n\n  if (parent != content && this.find) {\n    for (var i = 0; i < this.find.length; i++) {\n      if (this$1.find[i].pos == null && parent.nodeType == 1 && parent.contains(this$1.find[i].node)) {\n        var pos = content.compareDocumentPosition(this$1.find[i].node);\n\n        if (pos & (before ? 2 : 4)) {\n          this$1.find[i].pos = this$1.currentPos;\n        }\n      }\n    }\n  }\n};\n\nParseContext.prototype.findInText = function findInText(textNode) {\n  var this$1 = this;\n\n  if (this.find) {\n    for (var i = 0; i < this.find.length; i++) {\n      if (this$1.find[i].node == textNode) {\n        this$1.find[i].pos = this$1.currentPos - (textNode.nodeValue.length - this$1.find[i].offset);\n      }\n    }\n  }\n}; // : (string) → bool\n// Determines whether the given [context\n// string](#ParseRule.context) matches this context.\n\n\nParseContext.prototype.matchesContext = function matchesContext(context) {\n  var this$1 = this;\n\n  if (context.indexOf(\"|\") > -1) {\n    return context.split(/\\s*\\|\\s*/).some(this.matchesContext, this);\n  }\n\n  var parts = context.split(\"/\");\n  var option = this.options.context;\n  var useRoot = !this.isOpen && (!option || option.parent.type == this.nodes[0].type);\n  var minDepth = -(option ? option.depth + 1 : 0) + (useRoot ? 0 : 1);\n\n  var match = function (i, depth) {\n    for (; i >= 0; i--) {\n      var part = parts[i];\n\n      if (part == \"\") {\n        if (i == parts.length - 1 || i == 0) {\n          continue;\n        }\n\n        for (; depth >= minDepth; depth--) {\n          if (match(i - 1, depth)) {\n            return true;\n          }\n        }\n\n        return false;\n      } else {\n        var next = depth > 0 || depth == 0 && useRoot ? this$1.nodes[depth].type : option && depth >= minDepth ? option.node(depth - minDepth).type : null;\n\n        if (!next || next.name != part && next.groups.indexOf(part) == -1) {\n          return false;\n        }\n\n        depth--;\n      }\n    }\n\n    return true;\n  };\n\n  return match(parts.length - 1, this.open);\n};\n\nParseContext.prototype.textblockFromContext = function textblockFromContext() {\n  var this$1 = this;\n  var $context = this.options.context;\n\n  if ($context) {\n    for (var d = $context.depth; d >= 0; d--) {\n      var deflt = $context.node(d).contentMatchAt($context.indexAfter(d)).defaultType;\n\n      if (deflt && deflt.isTextblock && deflt.defaultAttrs) {\n        return deflt;\n      }\n    }\n  }\n\n  for (var name in this$1.parser.schema.nodes) {\n    var type = this$1.parser.schema.nodes[name];\n\n    if (type.isTextblock && type.defaultAttrs) {\n      return type;\n    }\n  }\n};\n\nObject.defineProperties(ParseContext.prototype, prototypeAccessors$6); // Kludge to work around directly nested list nodes produced by some\n// tools and allowed by browsers to mean that the nested list is\n// actually part of the list item above it.\n\nfunction normalizeList(dom) {\n  for (var child = dom.firstChild, prevItem = null; child; child = child.nextSibling) {\n    var name = child.nodeType == 1 ? child.nodeName.toLowerCase() : null;\n\n    if (name && listTags.hasOwnProperty(name) && prevItem) {\n      prevItem.appendChild(child);\n      child = prevItem;\n    } else if (name == \"li\") {\n      prevItem = child;\n    } else if (name) {\n      prevItem = null;\n    }\n  }\n} // Apply a CSS selector.\n\n\nfunction matches(dom, selector) {\n  return (dom.matches || dom.msMatchesSelector || dom.webkitMatchesSelector || dom.mozMatchesSelector).call(dom, selector);\n} // : (string) → [string]\n// Tokenize a style attribute into property/value pairs.\n\n\nfunction parseStyles(style) {\n  var re = /\\s*([\\w-]+)\\s*:\\s*([^;]+)/g,\n      m,\n      result = [];\n\n  while (m = re.exec(style)) {\n    result.push(m[1], m[2].trim());\n  }\n\n  return result;\n}\n\nfunction copy(obj) {\n  var copy = {};\n\n  for (var prop in obj) {\n    copy[prop] = obj[prop];\n  }\n\n  return copy;\n} // DOMOutputSpec:: interface\n// A description of a DOM structure. Can be either a string, which is\n// interpreted as a text node, a DOM node, which is interpreted as\n// itself, or an array.\n//\n// An array describes a DOM element. The first value in the array\n// should be a string—the name of the DOM element. If the second\n// element is plain object, it is interpreted as a set of attributes\n// for the element. Any elements after that (including the 2nd if it's\n// not an attribute object) are interpreted as children of the DOM\n// elements, and must either be valid `DOMOutputSpec` values, or the\n// number zero.\n//\n// The number zero (pronounced “hole”) is used to indicate the place\n// where a node's child nodes should be inserted. It it occurs in an\n// output spec, it should be the only child element in its parent\n// node.\n// ::- A DOM serializer knows how to convert ProseMirror nodes and\n// marks of various types to DOM nodes.\n\n\nvar DOMSerializer = function DOMSerializer(nodes, marks) {\n  // :: Object<(node: Node) → DOMOutputSpec>\n  // The node serialization functions.\n  this.nodes = nodes || {}; // :: Object<?(mark: Mark, inline: bool) → DOMOutputSpec>\n  // The mark serialization functions.\n\n  this.marks = marks || {};\n}; // :: (Fragment, ?Object) → dom.DocumentFragment\n// Serialize the content of this fragment to a DOM fragment. When\n// not in the browser, the `document` option, containing a DOM\n// document, should be passed so that the serializer can create\n// nodes.\n\n\nDOMSerializer.prototype.serializeFragment = function serializeFragment(fragment, options, target) {\n  var this$1 = this;\n  if (options === void 0) options = {};\n\n  if (!target) {\n    target = doc(options).createDocumentFragment();\n  }\n\n  var top = target,\n      active = null;\n  fragment.forEach(function (node) {\n    if (active || node.marks.length) {\n      if (!active) {\n        active = [];\n      }\n\n      var keep = 0,\n          rendered = 0;\n\n      while (keep < active.length && rendered < node.marks.length) {\n        var next = node.marks[rendered];\n\n        if (!this$1.marks[next.type.name]) {\n          rendered++;\n          continue;\n        }\n\n        if (!next.eq(active[keep]) || next.type.spec.spanning === false) {\n          break;\n        }\n\n        keep += 2;\n        rendered++;\n      }\n\n      while (keep < active.length) {\n        top = active.pop();\n        active.pop();\n      }\n\n      while (rendered < node.marks.length) {\n        var add = node.marks[rendered++];\n        var markDOM = this$1.serializeMark(add, node.isInline, options);\n\n        if (markDOM) {\n          active.push(add, top);\n          top.appendChild(markDOM.dom);\n          top = markDOM.contentDOM || markDOM.dom;\n        }\n      }\n    }\n\n    top.appendChild(this$1.serializeNode(node, options));\n  });\n  return target;\n}; // :: (Node, ?Object) → dom.Node\n// Serialize this node to a DOM node. This can be useful when you\n// need to serialize a part of a document, as opposed to the whole\n// document. To serialize a whole document, use\n// [`serializeFragment`](#model.DOMSerializer.serializeFragment) on\n// its [content](#model.Node.content).\n\n\nDOMSerializer.prototype.serializeNode = function serializeNode(node, options) {\n  if (options === void 0) options = {};\n  var ref = DOMSerializer.renderSpec(doc(options), this.nodes[node.type.name](node));\n  var dom = ref.dom;\n  var contentDOM = ref.contentDOM;\n\n  if (contentDOM) {\n    if (node.isLeaf) {\n      throw new RangeError(\"Content hole not allowed in a leaf node spec\");\n    }\n\n    if (options.onContent) {\n      options.onContent(node, contentDOM, options);\n    } else {\n      this.serializeFragment(node.content, options, contentDOM);\n    }\n  }\n\n  return dom;\n};\n\nDOMSerializer.prototype.serializeNodeAndMarks = function serializeNodeAndMarks(node, options) {\n  var this$1 = this;\n  if (options === void 0) options = {};\n  var dom = this.serializeNode(node, options);\n\n  for (var i = node.marks.length - 1; i >= 0; i--) {\n    var wrap = this$1.serializeMark(node.marks[i], node.isInline, options);\n\n    if (wrap) {\n      (wrap.contentDOM || wrap.dom).appendChild(dom);\n      dom = wrap.dom;\n    }\n  }\n\n  return dom;\n};\n\nDOMSerializer.prototype.serializeMark = function serializeMark(mark, inline, options) {\n  if (options === void 0) options = {};\n  var toDOM = this.marks[mark.type.name];\n  return toDOM && DOMSerializer.renderSpec(doc(options), toDOM(mark, inline));\n}; // :: (dom.Document, DOMOutputSpec) → {dom: dom.Node, contentDOM: ?dom.Node}\n// Render an [output spec](#model.DOMOutputSpec) to a DOM node. If\n// the spec has a hole (zero) in it, `contentDOM` will point at the\n// node with the hole.\n\n\nDOMSerializer.renderSpec = function renderSpec(doc, structure) {\n  if (typeof structure == \"string\") {\n    return {\n      dom: doc.createTextNode(structure)\n    };\n  }\n\n  if (structure.nodeType != null) {\n    return {\n      dom: structure\n    };\n  }\n\n  var dom = doc.createElement(structure[0]),\n      contentDOM = null;\n  var attrs = structure[1],\n      start = 1;\n\n  if (attrs && typeof attrs == \"object\" && attrs.nodeType == null && !Array.isArray(attrs)) {\n    start = 2;\n\n    for (var name in attrs) {\n      if (attrs[name] != null) {\n        dom.setAttribute(name, attrs[name]);\n      }\n    }\n  }\n\n  for (var i = start; i < structure.length; i++) {\n    var child = structure[i];\n\n    if (child === 0) {\n      if (i < structure.length - 1 || i > start) {\n        throw new RangeError(\"Content hole must be the only child of its parent node\");\n      }\n\n      return {\n        dom: dom,\n        contentDOM: dom\n      };\n    } else {\n      var ref = DOMSerializer.renderSpec(doc, child);\n      var inner = ref.dom;\n      var innerContent = ref.contentDOM;\n      dom.appendChild(inner);\n\n      if (innerContent) {\n        if (contentDOM) {\n          throw new RangeError(\"Multiple content holes\");\n        }\n\n        contentDOM = innerContent;\n      }\n    }\n  }\n\n  return {\n    dom: dom,\n    contentDOM: contentDOM\n  };\n}; // :: (Schema) → DOMSerializer\n// Build a serializer using the [`toDOM`](#model.NodeSpec.toDOM)\n// properties in a schema's node and mark specs.\n\n\nDOMSerializer.fromSchema = function fromSchema(schema) {\n  return schema.cached.domSerializer || (schema.cached.domSerializer = new DOMSerializer(this.nodesFromSchema(schema), this.marksFromSchema(schema)));\n}; // : (Schema) → Object<(node: Node) → DOMOutputSpec>\n// Gather the serializers in a schema's node specs into an object.\n// This can be useful as a base to build a custom serializer from.\n\n\nDOMSerializer.nodesFromSchema = function nodesFromSchema(schema) {\n  var result = gatherToDOM(schema.nodes);\n\n  if (!result.text) {\n    result.text = function (node) {\n      return node.text;\n    };\n  }\n\n  return result;\n}; // : (Schema) → Object<(mark: Mark) → DOMOutputSpec>\n// Gather the serializers in a schema's mark specs into an object.\n\n\nDOMSerializer.marksFromSchema = function marksFromSchema(schema) {\n  return gatherToDOM(schema.marks);\n};\n\nfunction gatherToDOM(obj) {\n  var result = {};\n\n  for (var name in obj) {\n    var toDOM = obj[name].spec.toDOM;\n\n    if (toDOM) {\n      result[name] = toDOM;\n    }\n  }\n\n  return result;\n}\n\nfunction doc(options) {\n  // declare global: window\n  return options.document || window.document;\n}\n\nexports.Node = Node;\nexports.ResolvedPos = ResolvedPos;\nexports.NodeRange = NodeRange;\nexports.Fragment = Fragment;\nexports.Slice = Slice;\nexports.ReplaceError = ReplaceError;\nexports.Mark = Mark;\nexports.Schema = Schema;\nexports.NodeType = NodeType;\nexports.MarkType = MarkType;\nexports.ContentMatch = ContentMatch;\nexports.DOMParser = DOMParser;\nexports.DOMSerializer = DOMSerializer;","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar prosemirrorModel = require('prosemirror-model');\n\nvar prosemirrorTransform = require('prosemirror-transform');\n\nvar classesById = Object.create(null); // ::- Superclass for editor selections. Every selection type should\n// extend this. Should not be instantiated directly.\n\nvar Selection = function Selection($anchor, $head, ranges) {\n  // :: [SelectionRange]\n  // The ranges covered by the selection.\n  this.ranges = ranges || [new SelectionRange($anchor.min($head), $anchor.max($head))]; // :: ResolvedPos\n  // The resolved anchor of the selection (the side that stays in\n  // place when the selection is modified).\n\n  this.$anchor = $anchor; // :: ResolvedPos\n  // The resolved head of the selection (the side that moves when\n  // the selection is modified).\n\n  this.$head = $head;\n};\n\nvar prototypeAccessors = {\n  anchor: {},\n  head: {},\n  from: {},\n  to: {},\n  $from: {},\n  $to: {},\n  empty: {}\n}; // :: number\n// The selection's anchor, as an unresolved position.\n\nprototypeAccessors.anchor.get = function () {\n  return this.$anchor.pos;\n}; // :: number\n// The selection's head.\n\n\nprototypeAccessors.head.get = function () {\n  return this.$head.pos;\n}; // :: number\n// The lower bound of the selection's main range.\n\n\nprototypeAccessors.from.get = function () {\n  return this.$from.pos;\n}; // :: number\n// The upper bound of the selection's main range.\n\n\nprototypeAccessors.to.get = function () {\n  return this.$to.pos;\n}; // :: ResolvedPos\n// The resolved lowerbound of the selection's main range.\n\n\nprototypeAccessors.$from.get = function () {\n  return this.ranges[0].$from;\n}; // :: ResolvedPos\n// The resolved upper bound of the selection's main range.\n\n\nprototypeAccessors.$to.get = function () {\n  return this.ranges[0].$to;\n}; // :: bool\n// Indicates whether the selection contains any content.\n\n\nprototypeAccessors.empty.get = function () {\n  var ranges = this.ranges;\n\n  for (var i = 0; i < ranges.length; i++) {\n    if (ranges[i].$from.pos != ranges[i].$to.pos) {\n      return false;\n    }\n  }\n\n  return true;\n}; // eq:: (Selection) → bool\n// Test whether the selection is the same as another selection.\n// map:: (doc: Node, mapping: Mappable) → Selection\n// Map this selection through a [mappable](#transform.Mappable) thing. `doc`\n// should be the new document to which we are mapping.\n// :: () → Slice\n// Get the content of this selection as a slice.\n\n\nSelection.prototype.content = function content() {\n  return this.$from.node(0).slice(this.from, this.to, true);\n}; // :: (Transaction, ?Slice)\n// Replace the selection with a slice or, if no slice is given,\n// delete the selection. Will append to the given transaction.\n\n\nSelection.prototype.replace = function replace(tr, content) {\n  if (content === void 0) content = prosemirrorModel.Slice.empty; // Put the new selection at the position after the inserted\n  // content. When that ended in an inline node, search backwards,\n  // to get the position after that node. If not, search forward.\n\n  var lastNode = content.content.lastChild,\n      lastParent = null;\n\n  for (var i = 0; i < content.openEnd; i++) {\n    lastParent = lastNode;\n    lastNode = lastNode.lastChild;\n  }\n\n  var mapFrom = tr.steps.length,\n      ranges = this.ranges;\n\n  for (var i$1 = 0; i$1 < ranges.length; i$1++) {\n    var ref = ranges[i$1];\n    var $from = ref.$from;\n    var $to = ref.$to;\n    var mapping = tr.mapping.slice(mapFrom);\n    tr.replaceRange(mapping.map($from.pos), mapping.map($to.pos), i$1 ? prosemirrorModel.Slice.empty : content);\n\n    if (i$1 == 0) {\n      selectionToInsertionEnd(tr, mapFrom, (lastNode ? lastNode.isInline : lastParent && lastParent.isTextblock) ? -1 : 1);\n    }\n  }\n}; // :: (Transaction, Node)\n// Replace the selection with the given node, appending the changes\n// to the given transaction.\n\n\nSelection.prototype.replaceWith = function replaceWith(tr, node) {\n  var mapFrom = tr.steps.length,\n      ranges = this.ranges;\n\n  for (var i = 0; i < ranges.length; i++) {\n    var ref = ranges[i];\n    var $from = ref.$from;\n    var $to = ref.$to;\n    var mapping = tr.mapping.slice(mapFrom);\n    var from = mapping.map($from.pos),\n        to = mapping.map($to.pos);\n\n    if (i) {\n      tr.deleteRange(from, to);\n    } else {\n      tr.replaceRangeWith(from, to, node);\n      selectionToInsertionEnd(tr, mapFrom, node.isInline ? -1 : 1);\n    }\n  }\n}; // toJSON:: () → Object\n// Convert the selection to a JSON representation. When implementing\n// this for a custom selection class, make sure to give the object a\n// `type` property whose value matches the ID under which you\n// [registered](#state.Selection^jsonID) your class.\n// :: (ResolvedPos, number, ?bool) → ?Selection\n// Find a valid cursor or leaf node selection starting at the given\n// position and searching back if `dir` is negative, and forward if\n// positive. When `textOnly` is true, only consider cursor\n// selections. Will return null when no valid selection position is\n// found.\n\n\nSelection.findFrom = function findFrom($pos, dir, textOnly) {\n  var inner = $pos.parent.inlineContent ? new TextSelection($pos) : findSelectionIn($pos.node(0), $pos.parent, $pos.pos, $pos.index(), dir, textOnly);\n\n  if (inner) {\n    return inner;\n  }\n\n  for (var depth = $pos.depth - 1; depth >= 0; depth--) {\n    var found = dir < 0 ? findSelectionIn($pos.node(0), $pos.node(depth), $pos.before(depth + 1), $pos.index(depth), dir, textOnly) : findSelectionIn($pos.node(0), $pos.node(depth), $pos.after(depth + 1), $pos.index(depth) + 1, dir, textOnly);\n\n    if (found) {\n      return found;\n    }\n  }\n}; // :: (ResolvedPos, ?number) → Selection\n// Find a valid cursor or leaf node selection near the given\n// position. Searches forward first by default, but if `bias` is\n// negative, it will search backwards first.\n\n\nSelection.near = function near($pos, bias) {\n  if (bias === void 0) bias = 1;\n  return this.findFrom($pos, bias) || this.findFrom($pos, -bias) || new AllSelection($pos.node(0));\n}; // :: (Node) → Selection\n// Find the cursor or leaf node selection closest to the start of\n// the given document. Will return an\n// [`AllSelection`](#state.AllSelection) if no valid position\n// exists.\n\n\nSelection.atStart = function atStart(doc) {\n  return findSelectionIn(doc, doc, 0, 0, 1) || new AllSelection(doc);\n}; // :: (Node) → Selection\n// Find the cursor or leaf node selection closest to the end of the\n// given document.\n\n\nSelection.atEnd = function atEnd(doc) {\n  return findSelectionIn(doc, doc, doc.content.size, doc.childCount, -1) || new AllSelection(doc);\n}; // :: (Node, Object) → Selection\n// Deserialize the JSON representation of a selection. Must be\n// implemented for custom classes (as a static class method).\n\n\nSelection.fromJSON = function fromJSON(doc, json) {\n  if (!json || !json.type) {\n    throw new RangeError(\"Invalid input for Selection.fromJSON\");\n  }\n\n  var cls = classesById[json.type];\n\n  if (!cls) {\n    throw new RangeError(\"No selection type \" + json.type + \" defined\");\n  }\n\n  return cls.fromJSON(doc, json);\n}; // :: (string, constructor<Selection>)\n// To be able to deserialize selections from JSON, custom selection\n// classes must register themselves with an ID string, so that they\n// can be disambiguated. Try to pick something that's unlikely to\n// clash with classes from other modules.\n\n\nSelection.jsonID = function jsonID(id, selectionClass) {\n  if (id in classesById) {\n    throw new RangeError(\"Duplicate use of selection JSON ID \" + id);\n  }\n\n  classesById[id] = selectionClass;\n  selectionClass.prototype.jsonID = id;\n  return selectionClass;\n}; // :: () → SelectionBookmark\n// Get a [bookmark](#state.SelectionBookmark) for this selection,\n// which is a value that can be mapped without having access to a\n// current document, and later resolved to a real selection for a\n// given document again. (This is used mostly by the history to\n// track and restore old selections.) The default implementation of\n// this method just converts the selection to a text selection and\n// returns the bookmark for that.\n\n\nSelection.prototype.getBookmark = function getBookmark() {\n  return TextSelection.between(this.$anchor, this.$head).getBookmark();\n};\n\nObject.defineProperties(Selection.prototype, prototypeAccessors); // :: bool\n// Controls whether, when a selection of this type is active in the\n// browser, the selected range should be visible to the user. Defaults\n// to `true`.\n\nSelection.prototype.visible = true; // SelectionBookmark:: interface\n// A lightweight, document-independent representation of a selection.\n// You can define a custom bookmark type for a custom selection class\n// to make the history handle it well.\n//\n//   map:: (mapping: Mapping) → SelectionBookmark\n//   Map the bookmark through a set of changes.\n//\n//   resolve:: (doc: Node) → Selection\n//   Resolve the bookmark to a real selection again. This may need to\n//   do some error checking and may fall back to a default (usually\n//   [`TextSelection.between`](#state.TextSelection^between)) if\n//   mapping made the bookmark invalid.\n// ::- Represents a selected range in a document.\n\nvar SelectionRange = function SelectionRange($from, $to) {\n  // :: ResolvedPos\n  // The lower bound of the range.\n  this.$from = $from; // :: ResolvedPos\n  // The upper bound of the range.\n\n  this.$to = $to;\n}; // ::- A text selection represents a classical editor selection, with\n// a head (the moving side) and anchor (immobile side), both of which\n// point into textblock nodes. It can be empty (a regular cursor\n// position).\n\n\nvar TextSelection = function (Selection) {\n  function TextSelection($anchor, $head) {\n    if ($head === void 0) $head = $anchor;\n    Selection.call(this, $anchor, $head);\n  }\n\n  if (Selection) TextSelection.__proto__ = Selection;\n  TextSelection.prototype = Object.create(Selection && Selection.prototype);\n  TextSelection.prototype.constructor = TextSelection;\n  var prototypeAccessors$1 = {\n    $cursor: {}\n  }; // :: ?ResolvedPos\n  // Returns a resolved position if this is a cursor selection (an\n  // empty text selection), and null otherwise.\n\n  prototypeAccessors$1.$cursor.get = function () {\n    return this.$anchor.pos == this.$head.pos ? this.$head : null;\n  };\n\n  TextSelection.prototype.map = function map(doc, mapping) {\n    var $head = doc.resolve(mapping.map(this.head));\n\n    if (!$head.parent.inlineContent) {\n      return Selection.near($head);\n    }\n\n    var $anchor = doc.resolve(mapping.map(this.anchor));\n    return new TextSelection($anchor.parent.inlineContent ? $anchor : $head, $head);\n  };\n\n  TextSelection.prototype.replace = function replace(tr, content) {\n    if (content === void 0) content = prosemirrorModel.Slice.empty;\n    Selection.prototype.replace.call(this, tr, content);\n\n    if (content == prosemirrorModel.Slice.empty) {\n      var marks = this.$from.marksAcross(this.$to);\n\n      if (marks) {\n        tr.ensureMarks(marks);\n      }\n    }\n  };\n\n  TextSelection.prototype.eq = function eq(other) {\n    return other instanceof TextSelection && other.anchor == this.anchor && other.head == this.head;\n  };\n\n  TextSelection.prototype.getBookmark = function getBookmark() {\n    return new TextBookmark(this.anchor, this.head);\n  };\n\n  TextSelection.prototype.toJSON = function toJSON() {\n    return {\n      type: \"text\",\n      anchor: this.anchor,\n      head: this.head\n    };\n  };\n\n  TextSelection.fromJSON = function fromJSON(doc, json) {\n    if (typeof json.anchor != \"number\" || typeof json.head != \"number\") {\n      throw new RangeError(\"Invalid input for TextSelection.fromJSON\");\n    }\n\n    return new TextSelection(doc.resolve(json.anchor), doc.resolve(json.head));\n  }; // :: (Node, number, ?number) → TextSelection\n  // Create a text selection from non-resolved positions.\n\n\n  TextSelection.create = function create(doc, anchor, head) {\n    if (head === void 0) head = anchor;\n    var $anchor = doc.resolve(anchor);\n    return new this($anchor, head == anchor ? $anchor : doc.resolve(head));\n  }; // :: (ResolvedPos, ResolvedPos, ?number) → Selection\n  // Return a text selection that spans the given positions or, if\n  // they aren't text positions, find a text selection near them.\n  // `bias` determines whether the method searches forward (default)\n  // or backwards (negative number) first. Will fall back to calling\n  // [`Selection.near`](#state.Selection^near) when the document\n  // doesn't contain a valid text position.\n\n\n  TextSelection.between = function between($anchor, $head, bias) {\n    var dPos = $anchor.pos - $head.pos;\n\n    if (!bias || dPos) {\n      bias = dPos >= 0 ? 1 : -1;\n    }\n\n    if (!$head.parent.inlineContent) {\n      var found = Selection.findFrom($head, bias, true) || Selection.findFrom($head, -bias, true);\n\n      if (found) {\n        $head = found.$head;\n      } else {\n        return Selection.near($head, bias);\n      }\n    }\n\n    if (!$anchor.parent.inlineContent) {\n      if (dPos == 0) {\n        $anchor = $head;\n      } else {\n        $anchor = (Selection.findFrom($anchor, -bias, true) || Selection.findFrom($anchor, bias, true)).$anchor;\n\n        if ($anchor.pos < $head.pos != dPos < 0) {\n          $anchor = $head;\n        }\n      }\n    }\n\n    return new TextSelection($anchor, $head);\n  };\n\n  Object.defineProperties(TextSelection.prototype, prototypeAccessors$1);\n  return TextSelection;\n}(Selection);\n\nSelection.jsonID(\"text\", TextSelection);\n\nvar TextBookmark = function TextBookmark(anchor, head) {\n  this.anchor = anchor;\n  this.head = head;\n};\n\nTextBookmark.prototype.map = function map(mapping) {\n  return new TextBookmark(mapping.map(this.anchor), mapping.map(this.head));\n};\n\nTextBookmark.prototype.resolve = function resolve(doc) {\n  return TextSelection.between(doc.resolve(this.anchor), doc.resolve(this.head));\n}; // ::- A node selection is a selection that points at a single node.\n// All nodes marked [selectable](#model.NodeSpec.selectable) can be\n// the target of a node selection. In such a selection, `from` and\n// `to` point directly before and after the selected node, `anchor`\n// equals `from`, and `head` equals `to`..\n\n\nvar NodeSelection = function (Selection) {\n  function NodeSelection($pos) {\n    var node = $pos.nodeAfter;\n    var $end = $pos.node(0).resolve($pos.pos + node.nodeSize);\n    Selection.call(this, $pos, $end); // :: Node The selected node.\n\n    this.node = node;\n  }\n\n  if (Selection) NodeSelection.__proto__ = Selection;\n  NodeSelection.prototype = Object.create(Selection && Selection.prototype);\n  NodeSelection.prototype.constructor = NodeSelection;\n\n  NodeSelection.prototype.map = function map(doc, mapping) {\n    var ref = mapping.mapResult(this.anchor);\n    var deleted = ref.deleted;\n    var pos = ref.pos;\n    var $pos = doc.resolve(pos);\n\n    if (deleted) {\n      return Selection.near($pos);\n    }\n\n    return new NodeSelection($pos);\n  };\n\n  NodeSelection.prototype.content = function content() {\n    return new prosemirrorModel.Slice(prosemirrorModel.Fragment.from(this.node), 0, 0);\n  };\n\n  NodeSelection.prototype.eq = function eq(other) {\n    return other instanceof NodeSelection && other.anchor == this.anchor;\n  };\n\n  NodeSelection.prototype.toJSON = function toJSON() {\n    return {\n      type: \"node\",\n      anchor: this.anchor\n    };\n  };\n\n  NodeSelection.prototype.getBookmark = function getBookmark() {\n    return new NodeBookmark(this.anchor);\n  };\n\n  NodeSelection.fromJSON = function fromJSON(doc, json) {\n    if (typeof json.anchor != \"number\") {\n      throw new RangeError(\"Invalid input for NodeSelection.fromJSON\");\n    }\n\n    return new NodeSelection(doc.resolve(json.anchor));\n  }; // :: (Node, number) → NodeSelection\n  // Create a node selection from non-resolved positions.\n\n\n  NodeSelection.create = function create(doc, from) {\n    return new this(doc.resolve(from));\n  }; // :: (Node) → bool\n  // Determines whether the given node may be selected as a node\n  // selection.\n\n\n  NodeSelection.isSelectable = function isSelectable(node) {\n    return !node.isText && node.type.spec.selectable !== false;\n  };\n\n  return NodeSelection;\n}(Selection);\n\nNodeSelection.prototype.visible = false;\nSelection.jsonID(\"node\", NodeSelection);\n\nvar NodeBookmark = function NodeBookmark(anchor) {\n  this.anchor = anchor;\n};\n\nNodeBookmark.prototype.map = function map(mapping) {\n  var ref = mapping.mapResult(this.anchor);\n  var deleted = ref.deleted;\n  var pos = ref.pos;\n  return deleted ? new TextBookmark(pos, pos) : new NodeBookmark(pos);\n};\n\nNodeBookmark.prototype.resolve = function resolve(doc) {\n  var $pos = doc.resolve(this.anchor),\n      node = $pos.nodeAfter;\n\n  if (node && NodeSelection.isSelectable(node)) {\n    return new NodeSelection($pos);\n  }\n\n  return Selection.near($pos);\n}; // ::- A selection type that represents selecting the whole document\n// (which can not necessarily be expressed with a text selection, when\n// there are for example leaf block nodes at the start or end of the\n// document).\n\n\nvar AllSelection = function (Selection) {\n  function AllSelection(doc) {\n    Selection.call(this, doc.resolve(0), doc.resolve(doc.content.size));\n  }\n\n  if (Selection) AllSelection.__proto__ = Selection;\n  AllSelection.prototype = Object.create(Selection && Selection.prototype);\n  AllSelection.prototype.constructor = AllSelection;\n\n  AllSelection.prototype.toJSON = function toJSON() {\n    return {\n      type: \"all\"\n    };\n  };\n\n  AllSelection.fromJSON = function fromJSON(doc) {\n    return new AllSelection(doc);\n  };\n\n  AllSelection.prototype.map = function map(doc) {\n    return new AllSelection(doc);\n  };\n\n  AllSelection.prototype.eq = function eq(other) {\n    return other instanceof AllSelection;\n  };\n\n  AllSelection.prototype.getBookmark = function getBookmark() {\n    return AllBookmark;\n  };\n\n  return AllSelection;\n}(Selection);\n\nSelection.jsonID(\"all\", AllSelection);\nvar AllBookmark = {\n  map: function map() {\n    return this;\n  },\n  resolve: function resolve(doc) {\n    return new AllSelection(doc);\n  }\n}; // FIXME we'll need some awareness of text direction when scanning for selections\n// Try to find a selection inside the given node. `pos` points at the\n// position where the search starts. When `text` is true, only return\n// text selections.\n\nfunction findSelectionIn(doc, node, pos, index, dir, text) {\n  if (node.inlineContent) {\n    return TextSelection.create(doc, pos);\n  }\n\n  for (var i = index - (dir > 0 ? 0 : 1); dir > 0 ? i < node.childCount : i >= 0; i += dir) {\n    var child = node.child(i);\n\n    if (!child.isAtom) {\n      var inner = findSelectionIn(doc, child, pos + dir, dir < 0 ? child.childCount : 0, dir, text);\n\n      if (inner) {\n        return inner;\n      }\n    } else if (!text && NodeSelection.isSelectable(child)) {\n      return NodeSelection.create(doc, pos - (dir < 0 ? child.nodeSize : 0));\n    }\n\n    pos += child.nodeSize * dir;\n  }\n}\n\nfunction selectionToInsertionEnd(tr, startLen, bias) {\n  var last = tr.steps.length - 1;\n\n  if (last < startLen) {\n    return;\n  }\n\n  var step = tr.steps[last];\n\n  if (!(step instanceof prosemirrorTransform.ReplaceStep || step instanceof prosemirrorTransform.ReplaceAroundStep)) {\n    return;\n  }\n\n  var map = tr.mapping.maps[last],\n      end;\n  map.forEach(function (_from, _to, _newFrom, newTo) {\n    if (end == null) {\n      end = newTo;\n    }\n  });\n  tr.setSelection(Selection.near(tr.doc.resolve(end), bias));\n}\n\nvar UPDATED_SEL = 1;\nvar UPDATED_MARKS = 2;\nvar UPDATED_SCROLL = 4; // ::- An editor state transaction, which can be applied to a state to\n// create an updated state. Use\n// [`EditorState.tr`](#state.EditorState.tr) to create an instance.\n//\n// Transactions track changes to the document (they are a subclass of\n// [`Transform`](#transform.Transform)), but also other state changes,\n// like selection updates and adjustments of the set of [stored\n// marks](#state.EditorState.storedMarks). In addition, you can store\n// metadata properties in a transaction, which are extra pieces of\n// information that client code or plugins can use to describe what a\n// transacion represents, so that they can update their [own\n// state](#state.StateField) accordingly.\n//\n// The [editor view](#view.EditorView) uses a few metadata properties:\n// it will attach a property `\"pointer\"` with the value `true` to\n// selection transactions directly caused by mouse or touch input, and\n// a `\"uiEvent\"` property of that may be `\"paste\"`, `\"cut\"`, or `\"drop\"`.\n\nvar Transaction = function (Transform$$1) {\n  function Transaction(state) {\n    Transform$$1.call(this, state.doc); // :: number\n    // The timestamp associated with this transaction, in the same\n    // format as `Date.now()`.\n\n    this.time = Date.now();\n    this.curSelection = state.selection; // The step count for which the current selection is valid.\n\n    this.curSelectionFor = 0; // :: ?[Mark]\n    // The stored marks set by this transaction, if any.\n\n    this.storedMarks = state.storedMarks; // Bitfield to track which aspects of the state were updated by\n    // this transaction.\n\n    this.updated = 0; // Object used to store metadata properties for the transaction.\n\n    this.meta = Object.create(null);\n  }\n\n  if (Transform$$1) Transaction.__proto__ = Transform$$1;\n  Transaction.prototype = Object.create(Transform$$1 && Transform$$1.prototype);\n  Transaction.prototype.constructor = Transaction;\n  var prototypeAccessors = {\n    selection: {},\n    selectionSet: {},\n    storedMarksSet: {},\n    isGeneric: {},\n    scrolledIntoView: {}\n  }; // :: Selection\n  // The transaction's current selection. This defaults to the editor\n  // selection [mapped](#state.Selection.map) through the steps in the\n  // transaction, but can be overwritten with\n  // [`setSelection`](#state.Transaction.setSelection).\n\n  prototypeAccessors.selection.get = function () {\n    if (this.curSelectionFor < this.steps.length) {\n      this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor));\n      this.curSelectionFor = this.steps.length;\n    }\n\n    return this.curSelection;\n  }; // :: (Selection) → Transaction\n  // Update the transaction's current selection. Will determine the\n  // selection that the editor gets when the transaction is applied.\n\n\n  Transaction.prototype.setSelection = function setSelection(selection) {\n    this.curSelection = selection;\n    this.curSelectionFor = this.steps.length;\n    this.updated = (this.updated | UPDATED_SEL) & ~UPDATED_MARKS;\n    this.storedMarks = null;\n    return this;\n  }; // :: bool\n  // Whether the selection was explicitly updated by this transaction.\n\n\n  prototypeAccessors.selectionSet.get = function () {\n    return (this.updated & UPDATED_SEL) > 0;\n  }; // :: (?[Mark]) → Transaction\n  // Set the current stored marks.\n\n\n  Transaction.prototype.setStoredMarks = function setStoredMarks(marks) {\n    this.storedMarks = marks;\n    this.updated |= UPDATED_MARKS;\n    return this;\n  }; // :: ([Mark]) → Transaction\n  // Make sure the current stored marks or, if that is null, the marks\n  // at the selection, match the given set of marks. Does nothing if\n  // this is already the case.\n\n\n  Transaction.prototype.ensureMarks = function ensureMarks(marks) {\n    if (!prosemirrorModel.Mark.sameSet(this.storedMarks || this.selection.$from.marks(), marks)) {\n      this.setStoredMarks(marks);\n    }\n\n    return this;\n  }; // :: (Mark) → Transaction\n  // Add a mark to the set of stored marks.\n\n\n  Transaction.prototype.addStoredMark = function addStoredMark(mark) {\n    return this.ensureMarks(mark.addToSet(this.storedMarks || this.selection.$head.marks()));\n  }; // :: (union<Mark, MarkType>) → Transaction\n  // Remove a mark or mark type from the set of stored marks.\n\n\n  Transaction.prototype.removeStoredMark = function removeStoredMark(mark) {\n    return this.ensureMarks(mark.removeFromSet(this.storedMarks || this.selection.$head.marks()));\n  }; // :: bool\n  // Whether the stored marks were explicitly set for this transaction.\n\n\n  prototypeAccessors.storedMarksSet.get = function () {\n    return (this.updated & UPDATED_MARKS) > 0;\n  };\n\n  Transaction.prototype.addStep = function addStep(step, doc) {\n    Transform$$1.prototype.addStep.call(this, step, doc);\n    this.updated = this.updated & ~UPDATED_MARKS;\n    this.storedMarks = null;\n  }; // :: (number) → Transaction\n  // Update the timestamp for the transaction.\n\n\n  Transaction.prototype.setTime = function setTime(time) {\n    this.time = time;\n    return this;\n  }; // :: (Slice) → Transaction\n  // Replace the current selection with the given slice.\n\n\n  Transaction.prototype.replaceSelection = function replaceSelection(slice) {\n    this.selection.replace(this, slice);\n    return this;\n  }; // :: (Node, ?bool) → Transaction\n  // Replace the selection with the given node. When `inheritMarks` is\n  // true and the content is inline, it inherits the marks from the\n  // place where it is inserted.\n\n\n  Transaction.prototype.replaceSelectionWith = function replaceSelectionWith(node, inheritMarks) {\n    var selection = this.selection;\n\n    if (inheritMarks !== false) {\n      node = node.mark(this.storedMarks || (selection.empty ? selection.$from.marks() : selection.$from.marksAcross(selection.$to) || prosemirrorModel.Mark.none));\n    }\n\n    selection.replaceWith(this, node);\n    return this;\n  }; // :: () → Transaction\n  // Delete the selection.\n\n\n  Transaction.prototype.deleteSelection = function deleteSelection() {\n    this.selection.replace(this);\n    return this;\n  }; // :: (string, from: ?number, to: ?number) → Transaction\n  // Replace the given range, or the selection if no range is given,\n  // with a text node containing the given string.\n\n\n  Transaction.prototype.insertText = function insertText(text, from, to) {\n    if (to === void 0) to = from;\n    var schema = this.doc.type.schema;\n\n    if (from == null) {\n      if (!text) {\n        return this.deleteSelection();\n      }\n\n      return this.replaceSelectionWith(schema.text(text), true);\n    } else {\n      if (!text) {\n        return this.deleteRange(from, to);\n      }\n\n      var marks = this.storedMarks;\n\n      if (!marks) {\n        var $from = this.doc.resolve(from);\n        marks = to == from ? $from.marks() : $from.marksAcross(this.doc.resolve(to));\n      }\n\n      return this.replaceRangeWith(from, to, schema.text(text, marks));\n    }\n  }; // :: (union<string, Plugin, PluginKey>, any) → Transaction\n  // Store a metadata property in this transaction, keyed either by\n  // name or by plugin.\n\n\n  Transaction.prototype.setMeta = function setMeta(key, value) {\n    this.meta[typeof key == \"string\" ? key : key.key] = value;\n    return this;\n  }; // :: (union<string, Plugin, PluginKey>) → any\n  // Retrieve a metadata property for a given name or plugin.\n\n\n  Transaction.prototype.getMeta = function getMeta(key) {\n    return this.meta[typeof key == \"string\" ? key : key.key];\n  }; // :: bool\n  // Returns true if this transaction doesn't contain any metadata,\n  // and can thus safely be extended.\n\n\n  prototypeAccessors.isGeneric.get = function () {\n    var this$1 = this;\n\n    for (var _ in this$1.meta) {\n      return false;\n    }\n\n    return true;\n  }; // :: () → Transaction\n  // Indicate that the editor should scroll the selection into view\n  // when updated to the state produced by this transaction.\n\n\n  Transaction.prototype.scrollIntoView = function scrollIntoView() {\n    this.updated |= UPDATED_SCROLL;\n    return this;\n  };\n\n  prototypeAccessors.scrolledIntoView.get = function () {\n    return (this.updated & UPDATED_SCROLL) > 0;\n  };\n\n  Object.defineProperties(Transaction.prototype, prototypeAccessors);\n  return Transaction;\n}(prosemirrorTransform.Transform);\n\nfunction bind(f, self) {\n  return !self || !f ? f : f.bind(self);\n}\n\nvar FieldDesc = function FieldDesc(name, desc, self) {\n  this.name = name;\n  this.init = bind(desc.init, self);\n  this.apply = bind(desc.apply, self);\n};\n\nvar baseFields = [new FieldDesc(\"doc\", {\n  init: function init(config) {\n    return config.doc || config.schema.topNodeType.createAndFill();\n  },\n  apply: function apply(tr) {\n    return tr.doc;\n  }\n}), new FieldDesc(\"selection\", {\n  init: function init(config, instance) {\n    return config.selection || Selection.atStart(instance.doc);\n  },\n  apply: function apply(tr) {\n    return tr.selection;\n  }\n}), new FieldDesc(\"storedMarks\", {\n  init: function init(config) {\n    return config.storedMarks || null;\n  },\n  apply: function apply(tr, _marks, _old, state) {\n    return state.selection.$cursor ? tr.storedMarks : null;\n  }\n}), new FieldDesc(\"scrollToSelection\", {\n  init: function init() {\n    return 0;\n  },\n  apply: function apply(tr, prev) {\n    return tr.scrolledIntoView ? prev + 1 : prev;\n  }\n})]; // Object wrapping the part of a state object that stays the same\n// across transactions. Stored in the state's `config` property.\n\nvar Configuration = function Configuration(schema, plugins) {\n  var this$1 = this;\n  this.schema = schema;\n  this.fields = baseFields.concat();\n  this.plugins = [];\n  this.pluginsByKey = Object.create(null);\n\n  if (plugins) {\n    plugins.forEach(function (plugin) {\n      if (this$1.pluginsByKey[plugin.key]) {\n        throw new RangeError(\"Adding different instances of a keyed plugin (\" + plugin.key + \")\");\n      }\n\n      this$1.plugins.push(plugin);\n      this$1.pluginsByKey[plugin.key] = plugin;\n\n      if (plugin.spec.state) {\n        this$1.fields.push(new FieldDesc(plugin.key, plugin.spec.state, plugin));\n      }\n    });\n  }\n}; // ::- The state of a ProseMirror editor is represented by an object\n// of this type. A state is a persistent data structure—it isn't\n// updated, but rather a new state value is computed from an old one\n// using the [`apply`](#state.EditorState.apply) method.\n//\n// A state holds a number of built-in fields, and plugins can\n// [define](#state.PluginSpec.state) additional fields.\n\n\nvar EditorState = function EditorState(config) {\n  this.config = config;\n};\n\nvar prototypeAccessors$1 = {\n  schema: {},\n  plugins: {},\n  tr: {}\n}; // doc:: Node\n// The current document.\n// selection:: Selection\n// The selection.\n// storedMarks:: ?[Mark]\n// A set of marks to apply to the next input. Will be null when\n// no explicit marks have been set.\n// :: Schema\n// The schema of the state's document.\n\nprototypeAccessors$1.schema.get = function () {\n  return this.config.schema;\n}; // :: [Plugin]\n// The plugins that are active in this state.\n\n\nprototypeAccessors$1.plugins.get = function () {\n  return this.config.plugins;\n}; // :: (Transaction) → EditorState\n// Apply the given transaction to produce a new state.\n\n\nEditorState.prototype.apply = function apply(tr) {\n  return this.applyTransaction(tr).state;\n}; // : (Transaction) → ?Transaction\n\n\nEditorState.prototype.filterTransaction = function filterTransaction(tr, ignore) {\n  var this$1 = this;\n  if (ignore === void 0) ignore = -1;\n\n  for (var i = 0; i < this.config.plugins.length; i++) {\n    if (i != ignore) {\n      var plugin = this$1.config.plugins[i];\n\n      if (plugin.spec.filterTransaction && !plugin.spec.filterTransaction.call(plugin, tr, this$1)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}; // :: (Transaction) → {state: EditorState, transactions: [Transaction]}\n// Verbose variant of [`apply`](#state.EditorState.apply) that\n// returns the precise transactions that were applied (which might\n// be influenced by the [transaction\n// hooks](#state.PluginSpec.filterTransaction) of\n// plugins) along with the new state.\n\n\nEditorState.prototype.applyTransaction = function applyTransaction(rootTr) {\n  var this$1 = this;\n\n  if (!this.filterTransaction(rootTr)) {\n    return {\n      state: this,\n      transactions: []\n    };\n  }\n\n  var trs = [rootTr],\n      newState = this.applyInner(rootTr),\n      seen = null; // This loop repeatedly gives plugins a chance to respond to\n  // transactions as new transactions are added, making sure to only\n  // pass the transactions the plugin did not see before.\n\n  outer: for (;;) {\n    var haveNew = false;\n\n    for (var i = 0; i < this.config.plugins.length; i++) {\n      var plugin = this$1.config.plugins[i];\n\n      if (plugin.spec.appendTransaction) {\n        var n = seen ? seen[i].n : 0,\n            oldState = seen ? seen[i].state : this$1;\n        var tr = n < trs.length && plugin.spec.appendTransaction.call(plugin, n ? trs.slice(n) : trs, oldState, newState);\n\n        if (tr && newState.filterTransaction(tr, i)) {\n          tr.setMeta(\"appendedTransaction\", rootTr);\n\n          if (!seen) {\n            seen = [];\n\n            for (var j = 0; j < this.config.plugins.length; j++) {\n              seen.push(j < i ? {\n                state: newState,\n                n: trs.length\n              } : {\n                state: this$1,\n                n: 0\n              });\n            }\n          }\n\n          trs.push(tr);\n          newState = newState.applyInner(tr);\n          haveNew = true;\n        }\n\n        if (seen) {\n          seen[i] = {\n            state: newState,\n            n: trs.length\n          };\n        }\n      }\n    }\n\n    if (!haveNew) {\n      return {\n        state: newState,\n        transactions: trs\n      };\n    }\n  }\n}; // : (Transaction) → EditorState\n\n\nEditorState.prototype.applyInner = function applyInner(tr) {\n  var this$1 = this;\n\n  if (!tr.before.eq(this.doc)) {\n    throw new RangeError(\"Applying a mismatched transaction\");\n  }\n\n  var newInstance = new EditorState(this.config),\n      fields = this.config.fields;\n\n  for (var i = 0; i < fields.length; i++) {\n    var field = fields[i];\n    newInstance[field.name] = field.apply(tr, this$1[field.name], this$1, newInstance);\n  }\n\n  for (var i$1 = 0; i$1 < applyListeners.length; i$1++) {\n    applyListeners[i$1](this$1, tr, newInstance);\n  }\n\n  return newInstance;\n}; // :: Transaction\n// Start a [transaction](#state.Transaction) from this state.\n\n\nprototypeAccessors$1.tr.get = function () {\n  return new Transaction(this);\n}; // :: (Object) → EditorState\n// Create a new state.\n//\n// config::- Configuration options. Must contain `schema` or `doc` (or both).\n//\n//    schema:: ?Schema\n//    The schema to use.\n//\n//    doc:: ?Node\n//    The starting document.\n//\n//    selection:: ?Selection\n//    A valid selection in the document.\n//\n//    storedMarks:: ?[Mark]\n//    The initial set of [stored marks](#state.EditorState.storedMarks).\n//\n//    plugins:: ?[Plugin]\n//    The plugins that should be active in this state.\n\n\nEditorState.create = function create(config) {\n  var $config = new Configuration(config.schema || config.doc.type.schema, config.plugins);\n  var instance = new EditorState($config);\n\n  for (var i = 0; i < $config.fields.length; i++) {\n    instance[$config.fields[i].name] = $config.fields[i].init(config, instance);\n  }\n\n  return instance;\n}; // :: (Object) → EditorState\n// Create a new state based on this one, but with an adjusted set of\n// active plugins. State fields that exist in both sets of plugins\n// are kept unchanged. Those that no longer exist are dropped, and\n// those that are new are initialized using their\n// [`init`](#state.StateField.init) method, passing in the new\n// configuration object..\n//\n// config::- configuration options\n//\n//   schema:: ?Schema\n//   New schema to use.\n//\n//   plugins:: ?[Plugin]\n//   New set of active plugins.\n\n\nEditorState.prototype.reconfigure = function reconfigure(config) {\n  var this$1 = this;\n  var $config = new Configuration(config.schema || this.schema, config.plugins);\n  var fields = $config.fields,\n      instance = new EditorState($config);\n\n  for (var i = 0; i < fields.length; i++) {\n    var name = fields[i].name;\n    instance[name] = this$1.hasOwnProperty(name) ? this$1[name] : fields[i].init(config, instance);\n  }\n\n  return instance;\n}; // :: (?union<Object<Plugin>, string, number>) → Object\n// Serialize this state to JSON. If you want to serialize the state\n// of plugins, pass an object mapping property names to use in the\n// resulting JSON object to plugin objects. The argument may also be\n// a string or number, in which case it is ignored, to support the\n// way `JSON.stringify` calls `toString` methods.\n\n\nEditorState.prototype.toJSON = function toJSON(pluginFields) {\n  var this$1 = this;\n  var result = {\n    doc: this.doc.toJSON(),\n    selection: this.selection.toJSON()\n  };\n\n  if (this.storedMarks) {\n    result.storedMarks = this.storedMarks.map(function (m) {\n      return m.toJSON();\n    });\n  }\n\n  if (pluginFields && typeof pluginFields == 'object') {\n    for (var prop in pluginFields) {\n      if (prop == \"doc\" || prop == \"selection\") {\n        throw new RangeError(\"The JSON fields `doc` and `selection` are reserved\");\n      }\n\n      var plugin = pluginFields[prop],\n          state = plugin.spec.state;\n\n      if (state && state.toJSON) {\n        result[prop] = state.toJSON.call(plugin, this$1[plugin.key]);\n      }\n    }\n  }\n\n  return result;\n}; // :: (Object, Object, ?Object<Plugin>) → EditorState\n// Deserialize a JSON representation of a state. `config` should\n// have at least a `schema` field, and should contain array of\n// plugins to initialize the state with. `pluginFields` can be used\n// to deserialize the state of plugins, by associating plugin\n// instances with the property names they use in the JSON object.\n//\n// config::- configuration options\n//\n//   schema:: Schema\n//   The schema to use.\n//\n//   plugins:: ?[Plugin]\n//   The set of active plugins.\n\n\nEditorState.fromJSON = function fromJSON(config, json, pluginFields) {\n  if (!json) {\n    throw new RangeError(\"Invalid input for EditorState.fromJSON\");\n  }\n\n  if (!config.schema) {\n    throw new RangeError(\"Required config field 'schema' missing\");\n  }\n\n  var $config = new Configuration(config.schema, config.plugins);\n  var instance = new EditorState($config);\n  $config.fields.forEach(function (field) {\n    if (field.name == \"doc\") {\n      instance.doc = prosemirrorModel.Node.fromJSON(config.schema, json.doc);\n    } else if (field.name == \"selection\") {\n      instance.selection = Selection.fromJSON(instance.doc, json.selection);\n    } else if (field.name == \"storedMarks\") {\n      if (json.storedMarks) {\n        instance.storedMarks = json.storedMarks.map(config.schema.markFromJSON);\n      }\n    } else {\n      if (pluginFields) {\n        for (var prop in pluginFields) {\n          var plugin = pluginFields[prop],\n              state = plugin.spec.state;\n\n          if (plugin.key == field.name && state && state.fromJSON && Object.prototype.hasOwnProperty.call(json, prop)) {\n            // This field belongs to a plugin mapped to a JSON field, read it from there.\n            instance[field.name] = state.fromJSON.call(plugin, config, json[prop], instance);\n            return;\n          }\n        }\n      }\n\n      instance[field.name] = field.init(config, instance);\n    }\n  });\n  return instance;\n}; // Kludge to allow the view to track mappings between different\n// instances of a state.\n\n\nEditorState.addApplyListener = function addApplyListener(f) {\n  applyListeners.push(f);\n};\n\nEditorState.removeApplyListener = function removeApplyListener(f) {\n  var found = applyListeners.indexOf(f);\n\n  if (found > -1) {\n    applyListeners.splice(found, 1);\n  }\n};\n\nObject.defineProperties(EditorState.prototype, prototypeAccessors$1);\nvar applyListeners = []; // PluginSpec:: interface\n//\n// This is the type passed to the [`Plugin`](#state.Plugin)\n// constructor. It provides a definition for a plugin.\n//\n//   props:: ?EditorProps\n//   The [view props](#view.EditorProps) added by this plugin. Props\n//   that are functions will be bound to have the plugin instance as\n//   their `this` binding.\n//\n//   state:: ?StateField<any>\n//   Allows a plugin to define a [state field](#state.StateField), an\n//   extra slot in the state object in which it can keep its own data.\n//\n//   key:: ?PluginKey\n//   Can be used to make this a keyed plugin. You can have only one\n//   plugin with a given key in a given state, but it is possible to\n//   access the plugin's configuration and state through the key,\n//   without having access to the plugin instance object.\n//\n//   view:: ?(EditorView) → Object\n//   When the plugin needs to interact with the editor view, or\n//   set something up in the DOM, use this field. The function\n//   will be called when the plugin's state is associated with an\n//   editor view.\n//\n//     return::-\n//     Should return an object with the following optional\n//     properties:\n//\n//       update:: ?(view: EditorView, prevState: EditorState)\n//       Called whenever the view's state is updated.\n//\n//       destroy:: ?()\n//       Called when the view is destroyed or receives a state\n//       with different plugins.\n//\n//   filterTransaction:: ?(Transaction, EditorState) → bool\n//   When present, this will be called before a transaction is\n//   applied by the state, allowing the plugin to cancel it (by\n//   returning false).\n//\n//   appendTransaction:: ?(transactions: [Transaction], oldState: EditorState, newState: EditorState) → ?Transaction\n//   Allows the plugin to append another transaction to be applied\n//   after the given array of transactions. When another plugin\n//   appends a transaction after this was called, it is called again\n//   with the new state and new transactions—but only the new\n//   transactions, i.e. it won't be passed transactions that it\n//   already saw.\n\nfunction bindProps(obj, self, target) {\n  for (var prop in obj) {\n    var val = obj[prop];\n\n    if (val instanceof Function) {\n      val = val.bind(self);\n    } else if (prop == \"handleDOMEvents\") {\n      val = bindProps(val, self, {});\n    }\n\n    target[prop] = val;\n  }\n\n  return target;\n} // ::- Plugins bundle functionality that can be added to an editor.\n// They are part of the [editor state](#state.EditorState) and\n// may influence that state and the view that contains it.\n\n\nvar Plugin = function Plugin(spec) {\n  // :: EditorProps\n  // The [props](#view.EditorProps) exported by this plugin.\n  this.props = {};\n\n  if (spec.props) {\n    bindProps(spec.props, this, this.props);\n  } // :: Object\n  // The plugin's [spec object](#state.PluginSpec).\n\n\n  this.spec = spec;\n  this.key = spec.key ? spec.key.key : createKey(\"plugin\");\n}; // :: (EditorState) → any\n// Extract the plugin's state field from an editor state.\n\n\nPlugin.prototype.getState = function getState(state) {\n  return state[this.key];\n}; // StateField:: interface<T>\n// A plugin spec may provide a state field (under its\n// [`state`](#state.PluginSpec.state) property) of this type, which\n// describes the state it wants to keep. Functions provided here are\n// always called with the plugin instance as their `this` binding.\n//\n//   init:: (config: Object, instance: EditorState) → T\n//   Initialize the value of the field. `config` will be the object\n//   passed to [`EditorState.create`](#state.EditorState^create). Note\n//   that `instance` is a half-initialized state instance, and will\n//   not have values for plugin fields initialized after this one.\n//\n//   apply:: (tr: Transaction, value: T, oldState: EditorState, newState: EditorState) → T\n//   Apply the given transaction to this state field, producing a new\n//   field value. Note that the `newState` argument is again a partially\n//   constructed state does not yet contain the state from plugins\n//   coming after this one.\n//\n//   toJSON:: ?(value: T) → *\n//   Convert this field to JSON. Optional, can be left off to disable\n//   JSON serialization for the field.\n//\n//   fromJSON:: ?(config: Object, value: *, state: EditorState) → T\n//   Deserialize the JSON representation of this field. Note that the\n//   `state` argument is again a half-initialized state.\n\n\nvar keys = Object.create(null);\n\nfunction createKey(name) {\n  if (name in keys) {\n    return name + \"$\" + ++keys[name];\n  }\n\n  keys[name] = 0;\n  return name + \"$\";\n} // ::- A key is used to [tag](#state.PluginSpec.key)\n// plugins in a way that makes it possible to find them, given an\n// editor state. Assigning a key does mean only one plugin of that\n// type can be active in a state.\n\n\nvar PluginKey = function PluginKey(name) {\n  if (name === void 0) name = \"key\";\n  this.key = createKey(name);\n}; // :: (EditorState) → ?Plugin\n// Get the active plugin with this key, if any, from an editor\n// state.\n\n\nPluginKey.prototype.get = function get(state) {\n  return state.config.pluginsByKey[this.key];\n}; // :: (EditorState) → ?any\n// Get the plugin's state from an editor state.\n\n\nPluginKey.prototype.getState = function getState(state) {\n  return state[this.key];\n};\n\nexports.Selection = Selection;\nexports.SelectionRange = SelectionRange;\nexports.TextSelection = TextSelection;\nexports.NodeSelection = NodeSelection;\nexports.AllSelection = AllSelection;\nexports.Transaction = Transaction;\nexports.EditorState = EditorState;\nexports.Plugin = Plugin;\nexports.PluginKey = PluginKey;","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar prosemirrorModel = require('prosemirror-model'); // Mappable:: interface\n// There are several things that positions can be mapped through.\n// Such objects conform to this interface.\n//\n//   map:: (pos: number, assoc: ?number) → number\n//   Map a position through this object. When given, `assoc` (should\n//   be -1 or 1, defaults to 1) determines with which side the\n//   position is associated, which determines in which direction to\n//   move when a chunk of content is inserted at the mapped position.\n//\n//   mapResult:: (pos: number, assoc: ?number) → MapResult\n//   Map a position, and return an object containing additional\n//   information about the mapping. The result's `deleted` field tells\n//   you whether the position was deleted (completely enclosed in a\n//   replaced range) during the mapping. When content on only one side\n//   is deleted, the position itself is only considered deleted when\n//   `assoc` points in the direction of the deleted content.\n// Recovery values encode a range index and an offset. They are\n// represented as numbers, because tons of them will be created when\n// mapping, for example, a large number of decorations. The number's\n// lower 16 bits provide the index, the remaining bits the offset.\n//\n// Note: We intentionally don't use bit shift operators to en- and\n// decode these, since those clip to 32 bits, which we might in rare\n// cases want to overflow. A 64-bit float can represent 48-bit\n// integers precisely.\n\n\nvar lower16 = 0xffff;\nvar factor16 = Math.pow(2, 16);\n\nfunction makeRecover(index, offset) {\n  return index + offset * factor16;\n}\n\nfunction recoverIndex(value) {\n  return value & lower16;\n}\n\nfunction recoverOffset(value) {\n  return (value - (value & lower16)) / factor16;\n} // ::- An object representing a mapped position with extra\n// information.\n\n\nvar MapResult = function MapResult(pos, deleted, recover) {\n  if (deleted === void 0) deleted = false;\n  if (recover === void 0) recover = null; // :: number The mapped version of the position.\n\n  this.pos = pos; // :: bool Tells you whether the position was deleted, that is,\n  // whether the step removed its surroundings from the document.\n\n  this.deleted = deleted;\n  this.recover = recover;\n}; // :: class extends Mappable\n// A map describing the deletions and insertions made by a step, which\n// can be used to find the correspondence between positions in the\n// pre-step version of a document and the same position in the\n// post-step version.\n\n\nvar StepMap = function StepMap(ranges, inverted) {\n  if (inverted === void 0) inverted = false;\n  this.ranges = ranges;\n  this.inverted = inverted;\n};\n\nStepMap.prototype.recover = function recover(value) {\n  var this$1 = this;\n  var diff = 0,\n      index = recoverIndex(value);\n\n  if (!this.inverted) {\n    for (var i = 0; i < index; i++) {\n      diff += this$1.ranges[i * 3 + 2] - this$1.ranges[i * 3 + 1];\n    }\n  }\n\n  return this.ranges[index * 3] + diff + recoverOffset(value);\n}; // : (number, ?number) → MapResult\n\n\nStepMap.prototype.mapResult = function mapResult(pos, assoc) {\n  if (assoc === void 0) assoc = 1;\n  return this._map(pos, assoc, false);\n}; // : (number, ?number) → number\n\n\nStepMap.prototype.map = function map(pos, assoc) {\n  if (assoc === void 0) assoc = 1;\n  return this._map(pos, assoc, true);\n};\n\nStepMap.prototype._map = function _map(pos, assoc, simple) {\n  var this$1 = this;\n  var diff = 0,\n      oldIndex = this.inverted ? 2 : 1,\n      newIndex = this.inverted ? 1 : 2;\n\n  for (var i = 0; i < this.ranges.length; i += 3) {\n    var start = this$1.ranges[i] - (this$1.inverted ? diff : 0);\n\n    if (start > pos) {\n      break;\n    }\n\n    var oldSize = this$1.ranges[i + oldIndex],\n        newSize = this$1.ranges[i + newIndex],\n        end = start + oldSize;\n\n    if (pos <= end) {\n      var side = !oldSize ? assoc : pos == start ? -1 : pos == end ? 1 : assoc;\n      var result = start + diff + (side < 0 ? 0 : newSize);\n\n      if (simple) {\n        return result;\n      }\n\n      var recover = makeRecover(i / 3, pos - start);\n      return new MapResult(result, assoc < 0 ? pos != start : pos != end, recover);\n    }\n\n    diff += newSize - oldSize;\n  }\n\n  return simple ? pos + diff : new MapResult(pos + diff);\n};\n\nStepMap.prototype.touches = function touches(pos, recover) {\n  var this$1 = this;\n  var diff = 0,\n      index = recoverIndex(recover);\n  var oldIndex = this.inverted ? 2 : 1,\n      newIndex = this.inverted ? 1 : 2;\n\n  for (var i = 0; i < this.ranges.length; i += 3) {\n    var start = this$1.ranges[i] - (this$1.inverted ? diff : 0);\n\n    if (start > pos) {\n      break;\n    }\n\n    var oldSize = this$1.ranges[i + oldIndex],\n        end = start + oldSize;\n\n    if (pos <= end && i == index * 3) {\n      return true;\n    }\n\n    diff += this$1.ranges[i + newIndex] - oldSize;\n  }\n\n  return false;\n}; // :: ((oldStart: number, oldEnd: number, newStart: number, newEnd: number))\n// Calls the given function on each of the changed ranges included in\n// this map.\n\n\nStepMap.prototype.forEach = function forEach(f) {\n  var this$1 = this;\n  var oldIndex = this.inverted ? 2 : 1,\n      newIndex = this.inverted ? 1 : 2;\n\n  for (var i = 0, diff = 0; i < this.ranges.length; i += 3) {\n    var start = this$1.ranges[i],\n        oldStart = start - (this$1.inverted ? diff : 0),\n        newStart = start + (this$1.inverted ? 0 : diff);\n    var oldSize = this$1.ranges[i + oldIndex],\n        newSize = this$1.ranges[i + newIndex];\n    f(oldStart, oldStart + oldSize, newStart, newStart + newSize);\n    diff += newSize - oldSize;\n  }\n}; // :: () → StepMap\n// Create an inverted version of this map. The result can be used to\n// map positions in the post-step document to the pre-step document.\n\n\nStepMap.prototype.invert = function invert() {\n  return new StepMap(this.ranges, !this.inverted);\n};\n\nStepMap.prototype.toString = function toString() {\n  return (this.inverted ? \"-\" : \"\") + JSON.stringify(this.ranges);\n}; // :: (n: number) → StepMap\n// Create a map that moves all positions by offset `n` (which may be\n// negative). This can be useful when applying steps meant for a\n// sub-document to a larger document, or vice-versa.\n\n\nStepMap.offset = function offset(n) {\n  return n == 0 ? StepMap.empty : new StepMap(n < 0 ? [0, -n, 0] : [0, 0, n]);\n};\n\nStepMap.empty = new StepMap([]); // :: class extends Mappable\n// A mapping represents a pipeline of zero or more [step\n// maps](#transform.StepMap). It has special provisions for losslessly\n// handling mapping positions through a series of steps in which some\n// steps are inverted versions of earlier steps. (This comes up when\n// ‘[rebasing](/docs/guide/#transform.rebasing)’ steps for\n// collaboration or history management.)\n\nvar Mapping = function Mapping(maps, mirror, from, to) {\n  // :: [StepMap]\n  // The step maps in this mapping.\n  this.maps = maps || []; // :: number\n  // The starting position in the `maps` array, used when `map` or\n  // `mapResult` is called.\n\n  this.from = from || 0; // :: number\n  // The end position in the `maps` array.\n\n  this.to = to == null ? this.maps.length : to;\n  this.mirror = mirror;\n}; // :: (?number, ?number) → Mapping\n// Create a mapping that maps only through a part of this one.\n\n\nMapping.prototype.slice = function slice(from, to) {\n  if (from === void 0) from = 0;\n  if (to === void 0) to = this.maps.length;\n  return new Mapping(this.maps, this.mirror, from, to);\n};\n\nMapping.prototype.copy = function copy() {\n  return new Mapping(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to);\n}; // :: (StepMap, ?number)\n// Add a step map to the end of this mapping. If `mirrors` is\n// given, it should be the index of the step map that is the mirror\n// image of this one.\n\n\nMapping.prototype.appendMap = function appendMap(map, mirrors) {\n  this.to = this.maps.push(map);\n\n  if (mirrors != null) {\n    this.setMirror(this.maps.length - 1, mirrors);\n  }\n}; // :: (Mapping)\n// Add all the step maps in a given mapping to this one (preserving\n// mirroring information).\n\n\nMapping.prototype.appendMapping = function appendMapping(mapping) {\n  var this$1 = this;\n\n  for (var i = 0, startSize = this.maps.length; i < mapping.maps.length; i++) {\n    var mirr = mapping.getMirror(i);\n    this$1.appendMap(mapping.maps[i], mirr != null && mirr < i ? startSize + mirr : null);\n  }\n}; // :: (number) → ?number\n// Finds the offset of the step map that mirrors the map at the\n// given offset, in this mapping (as per the second argument to\n// `appendMap`).\n\n\nMapping.prototype.getMirror = function getMirror(n) {\n  var this$1 = this;\n\n  if (this.mirror) {\n    for (var i = 0; i < this.mirror.length; i++) {\n      if (this$1.mirror[i] == n) {\n        return this$1.mirror[i + (i % 2 ? -1 : 1)];\n      }\n    }\n  }\n};\n\nMapping.prototype.setMirror = function setMirror(n, m) {\n  if (!this.mirror) {\n    this.mirror = [];\n  }\n\n  this.mirror.push(n, m);\n}; // :: (Mapping)\n// Append the inverse of the given mapping to this one.\n\n\nMapping.prototype.appendMappingInverted = function appendMappingInverted(mapping) {\n  var this$1 = this;\n\n  for (var i = mapping.maps.length - 1, totalSize = this.maps.length + mapping.maps.length; i >= 0; i--) {\n    var mirr = mapping.getMirror(i);\n    this$1.appendMap(mapping.maps[i].invert(), mirr != null && mirr > i ? totalSize - mirr - 1 : null);\n  }\n}; // () → Mapping\n// Create an inverted version of this mapping.\n\n\nMapping.prototype.invert = function invert() {\n  var inverse = new Mapping();\n  inverse.appendMappingInverted(this);\n  return inverse;\n}; // : (number, ?number) → number\n// Map a position through this mapping.\n\n\nMapping.prototype.map = function map(pos, assoc) {\n  var this$1 = this;\n  if (assoc === void 0) assoc = 1;\n\n  if (this.mirror) {\n    return this._map(pos, assoc, true);\n  }\n\n  for (var i = this.from; i < this.to; i++) {\n    pos = this$1.maps[i].map(pos, assoc);\n  }\n\n  return pos;\n}; // : (number, ?number) → MapResult\n// Map a position through this mapping, returning a mapping\n// result.\n\n\nMapping.prototype.mapResult = function mapResult(pos, assoc) {\n  if (assoc === void 0) assoc = 1;\n  return this._map(pos, assoc, false);\n};\n\nMapping.prototype._map = function _map(pos, assoc, simple) {\n  var this$1 = this;\n  var deleted = false,\n      recoverables = null;\n\n  for (var i = this.from; i < this.to; i++) {\n    var map = this$1.maps[i],\n        rec = recoverables && recoverables[i];\n\n    if (rec != null && map.touches(pos, rec)) {\n      pos = map.recover(rec);\n      continue;\n    }\n\n    var result = map.mapResult(pos, assoc);\n\n    if (result.recover != null) {\n      var corr = this$1.getMirror(i);\n\n      if (corr != null && corr > i && corr < this$1.to) {\n        if (result.deleted) {\n          i = corr;\n          pos = this$1.maps[corr].recover(result.recover);\n          continue;\n        } else {\n          (recoverables || (recoverables = Object.create(null)))[corr] = result.recover;\n        }\n      }\n    }\n\n    if (result.deleted) {\n      deleted = true;\n    }\n\n    pos = result.pos;\n  }\n\n  return simple ? pos : new MapResult(pos, deleted);\n};\n\nfunction TransformError(message) {\n  var err = Error.call(this, message);\n  err.__proto__ = TransformError.prototype;\n  return err;\n}\n\nTransformError.prototype = Object.create(Error.prototype);\nTransformError.prototype.constructor = TransformError;\nTransformError.prototype.name = \"TransformError\"; // ::- Abstraction to build up and track an array of\n// [steps](#transform.Step) representing a document transformation.\n//\n// Most transforming methods return the `Transform` object itself, so\n// that they can be chained.\n\nvar Transform = function Transform(doc) {\n  // :: Node\n  // The current document (the result of applying the steps in the\n  // transform).\n  this.doc = doc; // :: [Step]\n  // The steps in this transform.\n\n  this.steps = []; // :: [Node]\n  // The documents before each of the steps.\n\n  this.docs = []; // :: Mapping\n  // A mapping with the maps for each of the steps in this transform.\n\n  this.mapping = new Mapping();\n};\n\nvar prototypeAccessors = {\n  before: {},\n  docChanged: {}\n}; // :: Node The starting document.\n\nprototypeAccessors.before.get = function () {\n  return this.docs.length ? this.docs[0] : this.doc;\n}; // :: (step: Step) → this\n// Apply a new step in this transform, saving the result. Throws an\n// error when the step fails.\n\n\nTransform.prototype.step = function step(object) {\n  var result = this.maybeStep(object);\n\n  if (result.failed) {\n    throw new TransformError(result.failed);\n  }\n\n  return this;\n}; // :: (Step) → StepResult\n// Try to apply a step in this transformation, ignoring it if it\n// fails. Returns the step result.\n\n\nTransform.prototype.maybeStep = function maybeStep(step) {\n  var result = step.apply(this.doc);\n\n  if (!result.failed) {\n    this.addStep(step, result.doc);\n  }\n\n  return result;\n}; // :: bool\n// True when the document has been changed (when there are any\n// steps).\n\n\nprototypeAccessors.docChanged.get = function () {\n  return this.steps.length > 0;\n};\n\nTransform.prototype.addStep = function addStep(step, doc) {\n  this.docs.push(this.doc);\n  this.steps.push(step);\n  this.mapping.appendMap(step.getMap());\n  this.doc = doc;\n};\n\nObject.defineProperties(Transform.prototype, prototypeAccessors);\n\nfunction mustOverride() {\n  throw new Error(\"Override me\");\n}\n\nvar stepsByID = Object.create(null); // ::- A step object represents an atomic change. It generally applies\n// only to the document it was created for, since the positions\n// stored in it will only make sense for that document.\n//\n// New steps are defined by creating classes that extend `Step`,\n// overriding the `apply`, `invert`, `map`, `getMap` and `fromJSON`\n// methods, and registering your class with a unique\n// JSON-serialization identifier using\n// [`Step.jsonID`](#transform.Step^jsonID).\n\nvar Step = function Step() {};\n\nStep.prototype.apply = function apply(_doc) {\n  return mustOverride();\n}; // :: () → StepMap\n// Get the step map that represents the changes made by this step,\n// and which can be used to transform between positions in the old\n// and the new document.\n\n\nStep.prototype.getMap = function getMap() {\n  return StepMap.empty;\n}; // :: (doc: Node) → Step\n// Create an inverted version of this step. Needs the document as it\n// was before the step as argument.\n\n\nStep.prototype.invert = function invert(_doc) {\n  return mustOverride();\n}; // :: (mapping: Mappable) → ?Step\n// Map this step through a mappable thing, returning either a\n// version of that step with its positions adjusted, or `null` if\n// the step was entirely deleted by the mapping.\n\n\nStep.prototype.map = function map(_mapping) {\n  return mustOverride();\n}; // :: (other: Step) → ?Step\n// Try to merge this step with another one, to be applied directly\n// after it. Returns the merged step when possible, null if the\n// steps can't be merged.\n\n\nStep.prototype.merge = function merge(_other) {\n  return null;\n}; // :: () → Object\n// Create a JSON-serializeable representation of this step. When\n// defining this for a custom subclass, make sure the result object\n// includes the step type's [JSON id](#transform.Step^jsonID) under\n// the `stepType` property.\n\n\nStep.prototype.toJSON = function toJSON() {\n  return mustOverride();\n}; // :: (Schema, Object) → Step\n// Deserialize a step from its JSON representation. Will call\n// through to the step class' own implementation of this method.\n\n\nStep.fromJSON = function fromJSON(schema, json) {\n  if (!json || !json.stepType) {\n    throw new RangeError(\"Invalid input for Step.fromJSON\");\n  }\n\n  var type = stepsByID[json.stepType];\n\n  if (!type) {\n    throw new RangeError(\"No step type \" + json.stepType + \" defined\");\n  }\n\n  return type.fromJSON(schema, json);\n}; // :: (string, constructor<Step>)\n// To be able to serialize steps to JSON, each step needs a string\n// ID to attach to its JSON representation. Use this method to\n// register an ID for your step classes. Try to pick something\n// that's unlikely to clash with steps from other modules.\n\n\nStep.jsonID = function jsonID(id, stepClass) {\n  if (id in stepsByID) {\n    throw new RangeError(\"Duplicate use of step JSON ID \" + id);\n  }\n\n  stepsByID[id] = stepClass;\n  stepClass.prototype.jsonID = id;\n  return stepClass;\n}; // ::- The result of [applying](#transform.Step.apply) a step. Contains either a\n// new document or a failure value.\n\n\nvar StepResult = function StepResult(doc, failed) {\n  // :: ?Node The transformed document.\n  this.doc = doc; // :: ?string Text providing information about a failed step.\n\n  this.failed = failed;\n}; // :: (Node) → StepResult\n// Create a successful step result.\n\n\nStepResult.ok = function ok(doc) {\n  return new StepResult(doc, null);\n}; // :: (string) → StepResult\n// Create a failed step result.\n\n\nStepResult.fail = function fail(message) {\n  return new StepResult(null, message);\n}; // :: (Node, number, number, Slice) → StepResult\n// Call [`Node.replace`](#model.Node.replace) with the given\n// arguments. Create a successful result if it succeeds, and a\n// failed one if it throws a `ReplaceError`.\n\n\nStepResult.fromReplace = function fromReplace(doc, from, to, slice) {\n  try {\n    return StepResult.ok(doc.replace(from, to, slice));\n  } catch (e) {\n    if (e instanceof prosemirrorModel.ReplaceError) {\n      return StepResult.fail(e.message);\n    }\n\n    throw e;\n  }\n}; // ::- Replace a part of the document with a slice of new content.\n\n\nvar ReplaceStep = function (Step$$1) {\n  function ReplaceStep(from, to, slice, structure) {\n    Step$$1.call(this);\n    this.from = from;\n    this.to = to;\n    this.slice = slice;\n    this.structure = !!structure;\n  }\n\n  if (Step$$1) ReplaceStep.__proto__ = Step$$1;\n  ReplaceStep.prototype = Object.create(Step$$1 && Step$$1.prototype);\n  ReplaceStep.prototype.constructor = ReplaceStep;\n\n  ReplaceStep.prototype.apply = function apply(doc) {\n    if (this.structure && contentBetween(doc, this.from, this.to)) {\n      return StepResult.fail(\"Structure replace would overwrite content\");\n    }\n\n    return StepResult.fromReplace(doc, this.from, this.to, this.slice);\n  };\n\n  ReplaceStep.prototype.getMap = function getMap() {\n    return new StepMap([this.from, this.to - this.from, this.slice.size]);\n  };\n\n  ReplaceStep.prototype.invert = function invert(doc) {\n    return new ReplaceStep(this.from, this.from + this.slice.size, doc.slice(this.from, this.to));\n  };\n\n  ReplaceStep.prototype.map = function map(mapping) {\n    var from = mapping.mapResult(this.from, 1),\n        to = mapping.mapResult(this.to, -1);\n\n    if (from.deleted && to.deleted) {\n      return null;\n    }\n\n    return new ReplaceStep(from.pos, Math.max(from.pos, to.pos), this.slice);\n  };\n\n  ReplaceStep.prototype.merge = function merge(other) {\n    if (!(other instanceof ReplaceStep) || other.structure != this.structure) {\n      return null;\n    }\n\n    if (this.from + this.slice.size == other.from && !this.slice.openEnd && !other.slice.openStart) {\n      var slice = this.slice.size + other.slice.size == 0 ? prosemirrorModel.Slice.empty : new prosemirrorModel.Slice(this.slice.content.append(other.slice.content), this.slice.openStart, other.slice.openEnd);\n      return new ReplaceStep(this.from, this.to + (other.to - other.from), slice, this.structure);\n    } else if (other.to == this.from && !this.slice.openStart && !other.slice.openEnd) {\n      var slice$1 = this.slice.size + other.slice.size == 0 ? prosemirrorModel.Slice.empty : new prosemirrorModel.Slice(other.slice.content.append(this.slice.content), other.slice.openStart, this.slice.openEnd);\n      return new ReplaceStep(other.from, this.to, slice$1, this.structure);\n    } else {\n      return null;\n    }\n  };\n\n  ReplaceStep.prototype.toJSON = function toJSON() {\n    var json = {\n      stepType: \"replace\",\n      from: this.from,\n      to: this.to\n    };\n\n    if (this.slice.size) {\n      json.slice = this.slice.toJSON();\n    }\n\n    if (this.structure) {\n      json.structure = true;\n    }\n\n    return json;\n  };\n\n  ReplaceStep.fromJSON = function fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\") {\n      throw new RangeError(\"Invalid input for ReplaceStep.fromJSON\");\n    }\n\n    return new ReplaceStep(json.from, json.to, prosemirrorModel.Slice.fromJSON(schema, json.slice), !!json.structure);\n  };\n\n  return ReplaceStep;\n}(Step);\n\nStep.jsonID(\"replace\", ReplaceStep); // ::- Replace a part of the document with a slice of content, but\n// preserve a range of the replaced content by moving it into the\n// slice.\n\nvar ReplaceAroundStep = function (Step$$1) {\n  function ReplaceAroundStep(from, to, gapFrom, gapTo, slice, insert, structure) {\n    Step$$1.call(this);\n    this.from = from;\n    this.to = to;\n    this.gapFrom = gapFrom;\n    this.gapTo = gapTo;\n    this.slice = slice;\n    this.insert = insert;\n    this.structure = !!structure;\n  }\n\n  if (Step$$1) ReplaceAroundStep.__proto__ = Step$$1;\n  ReplaceAroundStep.prototype = Object.create(Step$$1 && Step$$1.prototype);\n  ReplaceAroundStep.prototype.constructor = ReplaceAroundStep;\n\n  ReplaceAroundStep.prototype.apply = function apply(doc) {\n    if (this.structure && (contentBetween(doc, this.from, this.gapFrom) || contentBetween(doc, this.gapTo, this.to))) {\n      return StepResult.fail(\"Structure gap-replace would overwrite content\");\n    }\n\n    var gap = doc.slice(this.gapFrom, this.gapTo);\n\n    if (gap.openStart || gap.openEnd) {\n      return StepResult.fail(\"Gap is not a flat range\");\n    }\n\n    var inserted = this.slice.insertAt(this.insert, gap.content);\n\n    if (!inserted) {\n      return StepResult.fail(\"Content does not fit in gap\");\n    }\n\n    return StepResult.fromReplace(doc, this.from, this.to, inserted);\n  };\n\n  ReplaceAroundStep.prototype.getMap = function getMap() {\n    return new StepMap([this.from, this.gapFrom - this.from, this.insert, this.gapTo, this.to - this.gapTo, this.slice.size - this.insert]);\n  };\n\n  ReplaceAroundStep.prototype.invert = function invert(doc) {\n    var gap = this.gapTo - this.gapFrom;\n    return new ReplaceAroundStep(this.from, this.from + this.slice.size + gap, this.from + this.insert, this.from + this.insert + gap, doc.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from), this.gapFrom - this.from, this.structure);\n  };\n\n  ReplaceAroundStep.prototype.map = function map(mapping) {\n    var from = mapping.mapResult(this.from, 1),\n        to = mapping.mapResult(this.to, -1);\n    var gapFrom = mapping.map(this.gapFrom, -1),\n        gapTo = mapping.map(this.gapTo, 1);\n\n    if (from.deleted && to.deleted || gapFrom < from.pos || gapTo > to.pos) {\n      return null;\n    }\n\n    return new ReplaceAroundStep(from.pos, to.pos, gapFrom, gapTo, this.slice, this.insert, this.structure);\n  };\n\n  ReplaceAroundStep.prototype.toJSON = function toJSON() {\n    var json = {\n      stepType: \"replaceAround\",\n      from: this.from,\n      to: this.to,\n      gapFrom: this.gapFrom,\n      gapTo: this.gapTo,\n      insert: this.insert\n    };\n\n    if (this.slice.size) {\n      json.slice = this.slice.toJSON();\n    }\n\n    if (this.structure) {\n      json.structure = true;\n    }\n\n    return json;\n  };\n\n  ReplaceAroundStep.fromJSON = function fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\" || typeof json.gapFrom != \"number\" || typeof json.gapTo != \"number\" || typeof json.insert != \"number\") {\n      throw new RangeError(\"Invalid input for ReplaceAroundStep.fromJSON\");\n    }\n\n    return new ReplaceAroundStep(json.from, json.to, json.gapFrom, json.gapTo, prosemirrorModel.Slice.fromJSON(schema, json.slice), json.insert, !!json.structure);\n  };\n\n  return ReplaceAroundStep;\n}(Step);\n\nStep.jsonID(\"replaceAround\", ReplaceAroundStep);\n\nfunction contentBetween(doc, from, to) {\n  var $from = doc.resolve(from),\n      dist = to - from,\n      depth = $from.depth;\n\n  while (dist > 0 && depth > 0 && $from.indexAfter(depth) == $from.node(depth).childCount) {\n    depth--;\n    dist--;\n  }\n\n  if (dist > 0) {\n    var next = $from.node(depth).maybeChild($from.indexAfter(depth));\n\n    while (dist > 0) {\n      if (!next || next.isLeaf) {\n        return true;\n      }\n\n      next = next.firstChild;\n      dist--;\n    }\n  }\n\n  return false;\n}\n\nfunction canCut(node, start, end) {\n  return (start == 0 || node.canReplace(start, node.childCount)) && (end == node.childCount || node.canReplace(0, end));\n} // :: (NodeRange) → ?number\n// Try to find a target depth to which the content in the given range\n// can be lifted. Will not go across\n// [isolating](#model.NodeSpec.isolating) parent nodes.\n\n\nfunction liftTarget(range) {\n  var parent = range.parent;\n  var content = parent.content.cutByIndex(range.startIndex, range.endIndex);\n\n  for (var depth = range.depth;; --depth) {\n    var node = range.$from.node(depth);\n    var index = range.$from.index(depth),\n        endIndex = range.$to.indexAfter(depth);\n\n    if (depth < range.depth && node.canReplace(index, endIndex, content)) {\n      return depth;\n    }\n\n    if (depth == 0 || node.type.spec.isolating || !canCut(node, index, endIndex)) {\n      break;\n    }\n  }\n} // :: (NodeRange, number) → this\n// Split the content in the given range off from its parent, if there\n// is sibling content before or after it, and move it up the tree to\n// the depth specified by `target`. You'll probably want to use\n// [`liftTarget`](#transform.liftTarget) to compute `target`, to make\n// sure the lift is valid.\n\n\nTransform.prototype.lift = function (range, target) {\n  var $from = range.$from;\n  var $to = range.$to;\n  var depth = range.depth;\n  var gapStart = $from.before(depth + 1),\n      gapEnd = $to.after(depth + 1);\n  var start = gapStart,\n      end = gapEnd;\n  var before = prosemirrorModel.Fragment.empty,\n      openStart = 0;\n\n  for (var d = depth, splitting = false; d > target; d--) {\n    if (splitting || $from.index(d) > 0) {\n      splitting = true;\n      before = prosemirrorModel.Fragment.from($from.node(d).copy(before));\n      openStart++;\n    } else {\n      start--;\n    }\n  }\n\n  var after = prosemirrorModel.Fragment.empty,\n      openEnd = 0;\n\n  for (var d$1 = depth, splitting$1 = false; d$1 > target; d$1--) {\n    if (splitting$1 || $to.after(d$1 + 1) < $to.end(d$1)) {\n      splitting$1 = true;\n      after = prosemirrorModel.Fragment.from($to.node(d$1).copy(after));\n      openEnd++;\n    } else {\n      end++;\n    }\n  }\n\n  return this.step(new ReplaceAroundStep(start, end, gapStart, gapEnd, new prosemirrorModel.Slice(before.append(after), openStart, openEnd), before.size - openStart, true));\n}; // :: (NodeRange, NodeType, ?Object, ?NodeRange) → ?[{type: NodeType, attrs: ?Object}]\n// Try to find a valid way to wrap the content in the given range in a\n// node of the given type. May introduce extra nodes around and inside\n// the wrapper node, if necessary. Returns null if no valid wrapping\n// could be found. When `innerRange` is given, that range's content is\n// used as the content to fit into the wrapping, instead of the\n// content of `range`.\n\n\nfunction findWrapping(range, nodeType, attrs, innerRange) {\n  if (innerRange === void 0) innerRange = range;\n  var around = findWrappingOutside(range, nodeType);\n  var inner = around && findWrappingInside(innerRange, nodeType);\n\n  if (!inner) {\n    return null;\n  }\n\n  return around.map(withAttrs).concat({\n    type: nodeType,\n    attrs: attrs\n  }).concat(inner.map(withAttrs));\n}\n\nfunction withAttrs(type) {\n  return {\n    type: type,\n    attrs: null\n  };\n}\n\nfunction findWrappingOutside(range, type) {\n  var parent = range.parent;\n  var startIndex = range.startIndex;\n  var endIndex = range.endIndex;\n  var around = parent.contentMatchAt(startIndex).findWrapping(type);\n\n  if (!around) {\n    return null;\n  }\n\n  var outer = around.length ? around[0] : type;\n  return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null;\n}\n\nfunction findWrappingInside(range, type) {\n  var parent = range.parent;\n  var startIndex = range.startIndex;\n  var endIndex = range.endIndex;\n  var inner = parent.child(startIndex);\n  var inside = type.contentMatch.findWrapping(inner.type);\n\n  if (!inside) {\n    return null;\n  }\n\n  var lastType = inside.length ? inside[inside.length - 1] : type;\n  var innerMatch = lastType.contentMatch;\n\n  for (var i = startIndex; innerMatch && i < endIndex; i++) {\n    innerMatch = innerMatch.matchType(parent.child(i).type);\n  }\n\n  if (!innerMatch || !innerMatch.validEnd) {\n    return null;\n  }\n\n  return inside;\n} // :: (NodeRange, [{type: NodeType, attrs: ?Object}]) → this\n// Wrap the given [range](#model.NodeRange) in the given set of wrappers.\n// The wrappers are assumed to be valid in this position, and should\n// probably be computed with [`findWrapping`](#transform.findWrapping).\n\n\nTransform.prototype.wrap = function (range, wrappers) {\n  var content = prosemirrorModel.Fragment.empty;\n\n  for (var i = wrappers.length - 1; i >= 0; i--) {\n    content = prosemirrorModel.Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content));\n  }\n\n  var start = range.start,\n      end = range.end;\n  return this.step(new ReplaceAroundStep(start, end, start, end, new prosemirrorModel.Slice(content, 0, 0), wrappers.length, true));\n}; // :: (number, ?number, NodeType, ?Object) → this\n// Set the type of all textblocks (partly) between `from` and `to` to\n// the given node type with the given attributes.\n\n\nTransform.prototype.setBlockType = function (from, to, type, attrs) {\n  var this$1 = this;\n  if (to === void 0) to = from;\n\n  if (!type.isTextblock) {\n    throw new RangeError(\"Type given to setBlockType should be a textblock\");\n  }\n\n  var mapFrom = this.steps.length;\n  this.doc.nodesBetween(from, to, function (node, pos) {\n    if (node.isTextblock && !node.hasMarkup(type, attrs) && canChangeType(this$1.doc, this$1.mapping.slice(mapFrom).map(pos), type)) {\n      // Ensure all markup that isn't allowed in the new node type is cleared\n      this$1.clearIncompatible(this$1.mapping.slice(mapFrom).map(pos, 1), type);\n      var mapping = this$1.mapping.slice(mapFrom);\n      var startM = mapping.map(pos, 1),\n          endM = mapping.map(pos + node.nodeSize, 1);\n      this$1.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1, new prosemirrorModel.Slice(prosemirrorModel.Fragment.from(type.create(attrs, null, node.marks)), 0, 0), 1, true));\n      return false;\n    }\n  });\n  return this;\n};\n\nfunction canChangeType(doc, pos, type) {\n  var $pos = doc.resolve(pos),\n      index = $pos.index();\n  return $pos.parent.canReplaceWith(index, index + 1, type);\n} // :: (number, ?NodeType, ?Object, ?[Mark]) → this\n// Change the type, attributes, and/or marks of the node at `pos`.\n// When `type` isn't given, the existing node type is preserved,\n\n\nTransform.prototype.setNodeMarkup = function (pos, type, attrs, marks) {\n  var node = this.doc.nodeAt(pos);\n\n  if (!node) {\n    throw new RangeError(\"No node at given position\");\n  }\n\n  if (!type) {\n    type = node.type;\n  }\n\n  var newNode = type.create(attrs, null, marks || node.marks);\n\n  if (node.isLeaf) {\n    return this.replaceWith(pos, pos + node.nodeSize, newNode);\n  }\n\n  if (!type.validContent(node.content)) {\n    throw new RangeError(\"Invalid content for node type \" + type.name);\n  }\n\n  return this.step(new ReplaceAroundStep(pos, pos + node.nodeSize, pos + 1, pos + node.nodeSize - 1, new prosemirrorModel.Slice(prosemirrorModel.Fragment.from(newNode), 0, 0), 1, true));\n}; // :: (Node, number, number, ?[?{type: NodeType, attrs: ?Object}]) → bool\n// Check whether splitting at the given position is allowed.\n\n\nfunction canSplit(doc, pos, depth, typesAfter) {\n  if (depth === void 0) depth = 1;\n  var $pos = doc.resolve(pos),\n      base = $pos.depth - depth;\n  var innerType = typesAfter && typesAfter[typesAfter.length - 1] || $pos.parent;\n\n  if (base < 0 || $pos.parent.type.spec.isolating || !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) || !innerType.type.validContent($pos.parent.content.cutByIndex($pos.index(), $pos.parent.childCount))) {\n    return false;\n  }\n\n  for (var d = $pos.depth - 1, i = depth - 2; d > base; d--, i--) {\n    var node = $pos.node(d),\n        index$1 = $pos.index(d);\n\n    if (node.type.spec.isolating) {\n      return false;\n    }\n\n    var rest = node.content.cutByIndex(index$1, node.childCount);\n    var after = typesAfter && typesAfter[i] || node;\n\n    if (after != node) {\n      rest = rest.replaceChild(0, after.type.create(after.attrs));\n    }\n\n    if (!node.canReplace(index$1 + 1, node.childCount) || !after.type.validContent(rest)) {\n      return false;\n    }\n  }\n\n  var index = $pos.indexAfter(base);\n  var baseType = typesAfter && typesAfter[0];\n  return $pos.node(base).canReplaceWith(index, index, baseType ? baseType.type : $pos.node(base + 1).type);\n} // :: (number, ?number, ?[?{type: NodeType, attrs: ?Object}]) → this\n// Split the node at the given position, and optionally, if `depth` is\n// greater than one, any number of nodes above that. By default, the\n// parts split off will inherit the node type of the original node.\n// This can be changed by passing an array of types and attributes to\n// use after the split.\n\n\nTransform.prototype.split = function (pos, depth, typesAfter) {\n  if (depth === void 0) depth = 1;\n  var $pos = this.doc.resolve(pos),\n      before = prosemirrorModel.Fragment.empty,\n      after = prosemirrorModel.Fragment.empty;\n\n  for (var d = $pos.depth, e = $pos.depth - depth, i = depth - 1; d > e; d--, i--) {\n    before = prosemirrorModel.Fragment.from($pos.node(d).copy(before));\n    var typeAfter = typesAfter && typesAfter[i];\n    after = prosemirrorModel.Fragment.from(typeAfter ? typeAfter.type.create(typeAfter.attrs, after) : $pos.node(d).copy(after));\n  }\n\n  return this.step(new ReplaceStep(pos, pos, new prosemirrorModel.Slice(before.append(after), depth, depth, true)));\n}; // :: (Node, number) → bool\n// Test whether the blocks before and after a given position can be\n// joined.\n\n\nfunction canJoin(doc, pos) {\n  var $pos = doc.resolve(pos),\n      index = $pos.index();\n  return joinable($pos.nodeBefore, $pos.nodeAfter) && $pos.parent.canReplace(index, index + 1);\n}\n\nfunction joinable(a, b) {\n  return a && b && !a.isLeaf && a.canAppend(b);\n} // :: (Node, number, ?number) → ?number\n// Find an ancestor of the given position that can be joined to the\n// block before (or after if `dir` is positive). Returns the joinable\n// point, if any.\n\n\nfunction joinPoint(doc, pos, dir) {\n  if (dir === void 0) dir = -1;\n  var $pos = doc.resolve(pos);\n\n  for (var d = $pos.depth;; d--) {\n    var before = void 0,\n        after = void 0;\n\n    if (d == $pos.depth) {\n      before = $pos.nodeBefore;\n      after = $pos.nodeAfter;\n    } else if (dir > 0) {\n      before = $pos.node(d + 1);\n      after = $pos.node(d).maybeChild($pos.index(d) + 1);\n    } else {\n      before = $pos.node(d).maybeChild($pos.index(d) - 1);\n      after = $pos.node(d + 1);\n    }\n\n    if (before && !before.isTextblock && joinable(before, after)) {\n      return pos;\n    }\n\n    if (d == 0) {\n      break;\n    }\n\n    pos = dir < 0 ? $pos.before(d) : $pos.after(d);\n  }\n} // :: (number, ?number) → this\n// Join the blocks around the given position. If depth is 2, their\n// last and first siblings are also joined, and so on.\n\n\nTransform.prototype.join = function (pos, depth) {\n  if (depth === void 0) depth = 1;\n  var step = new ReplaceStep(pos - depth, pos + depth, prosemirrorModel.Slice.empty, true);\n  return this.step(step);\n}; // :: (Node, number, NodeType) → ?number\n// Try to find a point where a node of the given type can be inserted\n// near `pos`, by searching up the node hierarchy when `pos` itself\n// isn't a valid place but is at the start or end of a node. Return\n// null if no position was found.\n\n\nfunction insertPoint(doc, pos, nodeType) {\n  var $pos = doc.resolve(pos);\n\n  if ($pos.parent.canReplaceWith($pos.index(), $pos.index(), nodeType)) {\n    return pos;\n  }\n\n  if ($pos.parentOffset == 0) {\n    for (var d = $pos.depth - 1; d >= 0; d--) {\n      var index = $pos.index(d);\n\n      if ($pos.node(d).canReplaceWith(index, index, nodeType)) {\n        return $pos.before(d + 1);\n      }\n\n      if (index > 0) {\n        return null;\n      }\n    }\n  }\n\n  if ($pos.parentOffset == $pos.parent.content.size) {\n    for (var d$1 = $pos.depth - 1; d$1 >= 0; d$1--) {\n      var index$1 = $pos.indexAfter(d$1);\n\n      if ($pos.node(d$1).canReplaceWith(index$1, index$1, nodeType)) {\n        return $pos.after(d$1 + 1);\n      }\n\n      if (index$1 < $pos.node(d$1).childCount) {\n        return null;\n      }\n    }\n  }\n} // :: (Node, number, Slice) → ?number\n// Finds a position at or around the given position where the given\n// slice can be inserted. Will look at parent nodes' nearest boundary\n// and try there, even if the original position wasn't directly at the\n// start or end of that node. Returns null when no position was found.\n\n\nfunction dropPoint(doc, pos, slice) {\n  var $pos = doc.resolve(pos);\n\n  if (!slice.content.size) {\n    return pos;\n  }\n\n  var content = slice.content;\n\n  for (var i = 0; i < slice.openStart; i++) {\n    content = content.firstChild.content;\n  }\n\n  for (var pass = 1; pass <= (slice.openStart == 0 && slice.size ? 2 : 1); pass++) {\n    for (var d = $pos.depth; d >= 0; d--) {\n      var bias = d == $pos.depth ? 0 : $pos.pos <= ($pos.start(d + 1) + $pos.end(d + 1)) / 2 ? -1 : 1;\n      var insertPos = $pos.index(d) + (bias > 0 ? 1 : 0);\n\n      if (pass == 1 ? $pos.node(d).canReplace(insertPos, insertPos, content) : $pos.node(d).contentMatchAt(insertPos).findWrapping(content.firstChild.type)) {\n        return bias == 0 ? $pos.pos : bias < 0 ? $pos.before(d + 1) : $pos.after(d + 1);\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction mapFragment(fragment, f, parent) {\n  var mapped = [];\n\n  for (var i = 0; i < fragment.childCount; i++) {\n    var child = fragment.child(i);\n\n    if (child.content.size) {\n      child = child.copy(mapFragment(child.content, f, child));\n    }\n\n    if (child.isInline) {\n      child = f(child, parent, i);\n    }\n\n    mapped.push(child);\n  }\n\n  return prosemirrorModel.Fragment.fromArray(mapped);\n} // ::- Add a mark to all inline content between two positions.\n\n\nvar AddMarkStep = function (Step$$1) {\n  function AddMarkStep(from, to, mark) {\n    Step$$1.call(this);\n    this.from = from;\n    this.to = to;\n    this.mark = mark;\n  }\n\n  if (Step$$1) AddMarkStep.__proto__ = Step$$1;\n  AddMarkStep.prototype = Object.create(Step$$1 && Step$$1.prototype);\n  AddMarkStep.prototype.constructor = AddMarkStep;\n\n  AddMarkStep.prototype.apply = function apply(doc) {\n    var this$1 = this;\n    var oldSlice = doc.slice(this.from, this.to),\n        $from = doc.resolve(this.from);\n    var parent = $from.node($from.sharedDepth(this.to));\n    var slice = new prosemirrorModel.Slice(mapFragment(oldSlice.content, function (node, parent) {\n      if (!parent.type.allowsMarkType(this$1.mark.type)) {\n        return node;\n      }\n\n      return node.mark(this$1.mark.addToSet(node.marks));\n    }, parent), oldSlice.openStart, oldSlice.openEnd);\n    return StepResult.fromReplace(doc, this.from, this.to, slice);\n  };\n\n  AddMarkStep.prototype.invert = function invert() {\n    return new RemoveMarkStep(this.from, this.to, this.mark);\n  };\n\n  AddMarkStep.prototype.map = function map(mapping) {\n    var from = mapping.mapResult(this.from, 1),\n        to = mapping.mapResult(this.to, -1);\n\n    if (from.deleted && to.deleted || from.pos >= to.pos) {\n      return null;\n    }\n\n    return new AddMarkStep(from.pos, to.pos, this.mark);\n  };\n\n  AddMarkStep.prototype.merge = function merge(other) {\n    if (other instanceof AddMarkStep && other.mark.eq(this.mark) && this.from <= other.to && this.to >= other.from) {\n      return new AddMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);\n    }\n  };\n\n  AddMarkStep.prototype.toJSON = function toJSON() {\n    return {\n      stepType: \"addMark\",\n      mark: this.mark.toJSON(),\n      from: this.from,\n      to: this.to\n    };\n  };\n\n  AddMarkStep.fromJSON = function fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\") {\n      throw new RangeError(\"Invalid input for AddMarkStep.fromJSON\");\n    }\n\n    return new AddMarkStep(json.from, json.to, schema.markFromJSON(json.mark));\n  };\n\n  return AddMarkStep;\n}(Step);\n\nStep.jsonID(\"addMark\", AddMarkStep); // ::- Remove a mark from all inline content between two positions.\n\nvar RemoveMarkStep = function (Step$$1) {\n  function RemoveMarkStep(from, to, mark) {\n    Step$$1.call(this);\n    this.from = from;\n    this.to = to;\n    this.mark = mark;\n  }\n\n  if (Step$$1) RemoveMarkStep.__proto__ = Step$$1;\n  RemoveMarkStep.prototype = Object.create(Step$$1 && Step$$1.prototype);\n  RemoveMarkStep.prototype.constructor = RemoveMarkStep;\n\n  RemoveMarkStep.prototype.apply = function apply(doc) {\n    var this$1 = this;\n    var oldSlice = doc.slice(this.from, this.to);\n    var slice = new prosemirrorModel.Slice(mapFragment(oldSlice.content, function (node) {\n      return node.mark(this$1.mark.removeFromSet(node.marks));\n    }), oldSlice.openStart, oldSlice.openEnd);\n    return StepResult.fromReplace(doc, this.from, this.to, slice);\n  };\n\n  RemoveMarkStep.prototype.invert = function invert() {\n    return new AddMarkStep(this.from, this.to, this.mark);\n  };\n\n  RemoveMarkStep.prototype.map = function map(mapping) {\n    var from = mapping.mapResult(this.from, 1),\n        to = mapping.mapResult(this.to, -1);\n\n    if (from.deleted && to.deleted || from.pos >= to.pos) {\n      return null;\n    }\n\n    return new RemoveMarkStep(from.pos, to.pos, this.mark);\n  };\n\n  RemoveMarkStep.prototype.merge = function merge(other) {\n    if (other instanceof RemoveMarkStep && other.mark.eq(this.mark) && this.from <= other.to && this.to >= other.from) {\n      return new RemoveMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);\n    }\n  };\n\n  RemoveMarkStep.prototype.toJSON = function toJSON() {\n    return {\n      stepType: \"removeMark\",\n      mark: this.mark.toJSON(),\n      from: this.from,\n      to: this.to\n    };\n  };\n\n  RemoveMarkStep.fromJSON = function fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\") {\n      throw new RangeError(\"Invalid input for RemoveMarkStep.fromJSON\");\n    }\n\n    return new RemoveMarkStep(json.from, json.to, schema.markFromJSON(json.mark));\n  };\n\n  return RemoveMarkStep;\n}(Step);\n\nStep.jsonID(\"removeMark\", RemoveMarkStep); // :: (number, number, Mark) → this\n// Add the given mark to the inline content between `from` and `to`.\n\nTransform.prototype.addMark = function (from, to, mark) {\n  var this$1 = this;\n  var removed = [],\n      added = [],\n      removing = null,\n      adding = null;\n  this.doc.nodesBetween(from, to, function (node, pos, parent) {\n    if (!node.isInline) {\n      return;\n    }\n\n    var marks = node.marks;\n\n    if (!mark.isInSet(marks) && parent.type.allowsMarkType(mark.type)) {\n      var start = Math.max(pos, from),\n          end = Math.min(pos + node.nodeSize, to);\n      var newSet = mark.addToSet(marks);\n\n      for (var i = 0; i < marks.length; i++) {\n        if (!marks[i].isInSet(newSet)) {\n          if (removing && removing.to == start && removing.mark.eq(marks[i])) {\n            removing.to = end;\n          } else {\n            removed.push(removing = new RemoveMarkStep(start, end, marks[i]));\n          }\n        }\n      }\n\n      if (adding && adding.to == start) {\n        adding.to = end;\n      } else {\n        added.push(adding = new AddMarkStep(start, end, mark));\n      }\n    }\n  });\n  removed.forEach(function (s) {\n    return this$1.step(s);\n  });\n  added.forEach(function (s) {\n    return this$1.step(s);\n  });\n  return this;\n}; // :: (number, number, ?union<Mark, MarkType>) → this\n// Remove marks from inline nodes between `from` and `to`. When `mark`\n// is a single mark, remove precisely that mark. When it is a mark type,\n// remove all marks of that type. When it is null, remove all marks of\n// any type.\n\n\nTransform.prototype.removeMark = function (from, to, mark) {\n  var this$1 = this;\n  if (mark === void 0) mark = null;\n  var matched = [],\n      step = 0;\n  this.doc.nodesBetween(from, to, function (node, pos) {\n    if (!node.isInline) {\n      return;\n    }\n\n    step++;\n    var toRemove = null;\n\n    if (mark instanceof prosemirrorModel.MarkType) {\n      var found = mark.isInSet(node.marks);\n\n      if (found) {\n        toRemove = [found];\n      }\n    } else if (mark) {\n      if (mark.isInSet(node.marks)) {\n        toRemove = [mark];\n      }\n    } else {\n      toRemove = node.marks;\n    }\n\n    if (toRemove && toRemove.length) {\n      var end = Math.min(pos + node.nodeSize, to);\n\n      for (var i = 0; i < toRemove.length; i++) {\n        var style = toRemove[i],\n            found$1 = void 0;\n\n        for (var j = 0; j < matched.length; j++) {\n          var m = matched[j];\n\n          if (m.step == step - 1 && style.eq(matched[j].style)) {\n            found$1 = m;\n          }\n        }\n\n        if (found$1) {\n          found$1.to = end;\n          found$1.step = step;\n        } else {\n          matched.push({\n            style: style,\n            from: Math.max(pos, from),\n            to: end,\n            step: step\n          });\n        }\n      }\n    }\n  });\n  matched.forEach(function (m) {\n    return this$1.step(new RemoveMarkStep(m.from, m.to, m.style));\n  });\n  return this;\n}; // :: (number, NodeType, ?ContentMatch) → this\n// Removes all marks and nodes from the content of the node at `pos`\n// that don't match the given new parent node type. Accepts an\n// optional starting [content match](#model.ContentMatch) as third\n// argument.\n\n\nTransform.prototype.clearIncompatible = function (pos, parentType, match) {\n  var this$1 = this;\n  if (match === void 0) match = parentType.contentMatch;\n  var node = this.doc.nodeAt(pos);\n  var delSteps = [],\n      cur = pos + 1;\n\n  for (var i = 0; i < node.childCount; i++) {\n    var child = node.child(i),\n        end = cur + child.nodeSize;\n    var allowed = match.matchType(child.type, child.attrs);\n\n    if (!allowed) {\n      delSteps.push(new ReplaceStep(cur, end, prosemirrorModel.Slice.empty));\n    } else {\n      match = allowed;\n\n      for (var j = 0; j < child.marks.length; j++) {\n        if (!parentType.allowsMarkType(child.marks[j].type)) {\n          this$1.step(new RemoveMarkStep(cur, end, child.marks[j]));\n        }\n      }\n    }\n\n    cur = end;\n  }\n\n  if (!match.validEnd) {\n    var fill = match.fillBefore(prosemirrorModel.Fragment.empty, true);\n    this.replace(cur, cur, new prosemirrorModel.Slice(fill, 0, 0));\n  }\n\n  for (var i$1 = delSteps.length - 1; i$1 >= 0; i$1--) {\n    this$1.step(delSteps[i$1]);\n  }\n\n  return this;\n}; // :: (Node, number, ?number, ?Slice) → ?Step\n// ‘Fit’ a slice into a given position in the document, producing a\n// [step](#transform.Step) that inserts it. Will return null if\n// there's no meaningful way to insert the slice here, or inserting it\n// would be a no-op (an empty slice over an empty range).\n\n\nfunction replaceStep(doc, from, to, slice) {\n  if (to === void 0) to = from;\n  if (slice === void 0) slice = prosemirrorModel.Slice.empty;\n\n  if (from == to && !slice.size) {\n    return null;\n  }\n\n  var $from = doc.resolve(from),\n      $to = doc.resolve(to); // Optimization -- avoid work if it's obvious that it's not needed.\n\n  if (fitsTrivially($from, $to, slice)) {\n    return new ReplaceStep(from, to, slice);\n  }\n\n  var placed = placeSlice($from, slice);\n  var fittedLeft = fitLeft($from, placed);\n  var fitted = fitRight($from, $to, fittedLeft);\n\n  if (!fitted) {\n    return null;\n  }\n\n  if (fittedLeft.size != fitted.size && canMoveText($from, $to, fittedLeft)) {\n    var d = $to.depth,\n        after = $to.after(d);\n\n    while (d > 1 && after == $to.end(--d)) {\n      ++after;\n    }\n\n    var fittedAfter = fitRight($from, doc.resolve(after), fittedLeft);\n\n    if (fittedAfter) {\n      return new ReplaceAroundStep(from, after, to, $to.end(), fittedAfter, fittedLeft.size);\n    }\n  }\n\n  return fitted.size || from != to ? new ReplaceStep(from, to, fitted) : null;\n} // :: (number, ?number, ?Slice) → this\n// Replace the part of the document between `from` and `to` with the\n// given `slice`.\n\n\nTransform.prototype.replace = function (from, to, slice) {\n  if (to === void 0) to = from;\n  if (slice === void 0) slice = prosemirrorModel.Slice.empty;\n  var step = replaceStep(this.doc, from, to, slice);\n\n  if (step) {\n    this.step(step);\n  }\n\n  return this;\n}; // :: (number, number, union<Fragment, Node, [Node]>) → this\n// Replace the given range with the given content, which may be a\n// fragment, node, or array of nodes.\n\n\nTransform.prototype.replaceWith = function (from, to, content) {\n  return this.replace(from, to, new prosemirrorModel.Slice(prosemirrorModel.Fragment.from(content), 0, 0));\n}; // :: (number, number) → this\n// Delete the content between the given positions.\n\n\nTransform.prototype.delete = function (from, to) {\n  return this.replace(from, to, prosemirrorModel.Slice.empty);\n}; // :: (number, union<Fragment, Node, [Node]>) → this\n// Insert the given content at the given position.\n\n\nTransform.prototype.insert = function (pos, content) {\n  return this.replaceWith(pos, pos, content);\n};\n\nfunction fitLeftInner($from, depth, placed, placedBelow) {\n  var content = prosemirrorModel.Fragment.empty,\n      openEnd = 0,\n      placedHere = placed[depth];\n\n  if ($from.depth > depth) {\n    var inner = fitLeftInner($from, depth + 1, placed, placedBelow || placedHere);\n    openEnd = inner.openEnd + 1;\n    content = prosemirrorModel.Fragment.from($from.node(depth + 1).copy(inner.content));\n  }\n\n  if (placedHere) {\n    content = content.append(placedHere.content);\n    openEnd = placedHere.openEnd;\n  }\n\n  if (placedBelow) {\n    content = content.append($from.node(depth).contentMatchAt($from.indexAfter(depth)).fillBefore(prosemirrorModel.Fragment.empty, true));\n    openEnd = 0;\n  }\n\n  return {\n    content: content,\n    openEnd: openEnd\n  };\n}\n\nfunction fitLeft($from, placed) {\n  var ref = fitLeftInner($from, 0, placed, false);\n  var content = ref.content;\n  var openEnd = ref.openEnd;\n  return new prosemirrorModel.Slice(content, $from.depth, openEnd || 0);\n}\n\nfunction fitRightJoin(content, parent, $from, $to, depth, openStart, openEnd) {\n  var match,\n      count = content.childCount,\n      matchCount = count - (openEnd > 0 ? 1 : 0);\n  var parentNode = openStart < 0 ? parent : $from.node(depth);\n\n  if (openStart < 0) {\n    match = parentNode.contentMatchAt(matchCount);\n  } else if (count == 1 && openEnd > 0) {\n    match = parentNode.contentMatchAt(openStart ? $from.index(depth) : $from.indexAfter(depth));\n  } else {\n    match = parentNode.contentMatchAt($from.indexAfter(depth)).matchFragment(content, count > 0 && openStart ? 1 : 0, matchCount);\n  }\n\n  var toNode = $to.node(depth);\n\n  if (openEnd > 0 && depth < $to.depth) {\n    var after = toNode.content.cutByIndex($to.indexAfter(depth)).addToStart(content.lastChild);\n    var joinable$1 = match.fillBefore(after, true); // Can't insert content if there's a single node stretched across this gap\n\n    if (joinable$1 && joinable$1.size && openStart > 0 && count == 1) {\n      joinable$1 = null;\n    }\n\n    if (joinable$1) {\n      var inner = fitRightJoin(content.lastChild.content, content.lastChild, $from, $to, depth + 1, count == 1 ? openStart - 1 : -1, openEnd - 1);\n\n      if (inner) {\n        var last = content.lastChild.copy(inner);\n\n        if (joinable$1.size) {\n          return content.cutByIndex(0, count - 1).append(joinable$1).addToEnd(last);\n        } else {\n          return content.replaceChild(count - 1, last);\n        }\n      }\n    }\n  }\n\n  if (openEnd > 0) {\n    match = match.matchType((count == 1 && openStart > 0 ? $from.node(depth + 1) : content.lastChild).type);\n  } // If we're here, the next level can't be joined, so we see what\n  // happens if we leave it open.\n\n\n  var toIndex = $to.index(depth);\n\n  if (toIndex == toNode.childCount && !toNode.type.compatibleContent(parent.type)) {\n    return null;\n  }\n\n  var joinable = match.fillBefore(toNode.content, true, toIndex);\n\n  for (var i = toIndex; joinable && i < toNode.content.childCount; i++) {\n    if (!parentNode.type.allowsMarks(toNode.content.child(i).marks)) {\n      joinable = null;\n    }\n  }\n\n  if (!joinable) {\n    return null;\n  }\n\n  if (openEnd > 0) {\n    var closed = fitRightClosed(content.lastChild, openEnd - 1, $from, depth + 1, count == 1 ? openStart - 1 : -1);\n    content = content.replaceChild(count - 1, closed);\n  }\n\n  content = content.append(joinable);\n\n  if ($to.depth > depth) {\n    content = content.addToEnd(fitRightSeparate($to, depth + 1));\n  }\n\n  return content;\n}\n\nfunction fitRightClosed(node, openEnd, $from, depth, openStart) {\n  var match,\n      content = node.content,\n      count = content.childCount;\n\n  if (openStart >= 0) {\n    match = $from.node(depth).contentMatchAt($from.indexAfter(depth)).matchFragment(content, openStart > 0 ? 1 : 0, count);\n  } else {\n    match = node.contentMatchAt(count);\n  }\n\n  if (openEnd > 0) {\n    var closed = fitRightClosed(content.lastChild, openEnd - 1, $from, depth + 1, count == 1 ? openStart - 1 : -1);\n    content = content.replaceChild(count - 1, closed);\n  }\n\n  return node.copy(content.append(match.fillBefore(prosemirrorModel.Fragment.empty, true)));\n}\n\nfunction fitRightSeparate($to, depth) {\n  var node = $to.node(depth);\n  var fill = node.contentMatchAt(0).fillBefore(node.content, true, $to.index(depth));\n\n  if ($to.depth > depth) {\n    fill = fill.addToEnd(fitRightSeparate($to, depth + 1));\n  }\n\n  return node.copy(fill);\n}\n\nfunction normalizeSlice(content, openStart, openEnd) {\n  while (openStart > 0 && openEnd > 0 && content.childCount == 1) {\n    content = content.firstChild.content;\n    openStart--;\n    openEnd--;\n  }\n\n  return new prosemirrorModel.Slice(content, openStart, openEnd);\n} // : (ResolvedPos, ResolvedPos, number, Slice) → Slice\n\n\nfunction fitRight($from, $to, slice) {\n  var fitted = fitRightJoin(slice.content, $from.node(0), $from, $to, 0, slice.openStart, slice.openEnd);\n\n  if (!fitted) {\n    return null;\n  }\n\n  return normalizeSlice(fitted, slice.openStart, $to.depth);\n}\n\nfunction fitsTrivially($from, $to, slice) {\n  return !slice.openStart && !slice.openEnd && $from.start() == $to.start() && $from.parent.canReplace($from.index(), $to.index(), slice.content);\n}\n\nfunction canMoveText($from, $to, slice) {\n  if (!$to.parent.isTextblock) {\n    return false;\n  }\n\n  var parent = slice.openEnd ? nodeRight(slice.content, slice.openEnd) : $from.node($from.depth - (slice.openStart - slice.openEnd));\n\n  if (!parent.isTextblock) {\n    return false;\n  }\n\n  for (var i = $to.index(); i < $to.parent.childCount; i++) {\n    if (!parent.type.allowsMarks($to.parent.child(i).marks)) {\n      return false;\n    }\n  }\n\n  var match;\n\n  if (slice.openEnd) {\n    match = parent.contentMatchAt(parent.childCount);\n  } else {\n    match = parent.contentMatchAt(parent.childCount);\n\n    if (slice.size) {\n      match = match.matchFragment(slice.content, slice.openStart ? 1 : 0);\n    }\n  }\n\n  match = match.matchFragment($to.parent.content, $to.index());\n  return match && match.validEnd;\n}\n\nfunction nodeRight(content, depth) {\n  for (var i = 1; i < depth; i++) {\n    content = content.lastChild.content;\n  }\n\n  return content.lastChild;\n} // Algorithm for 'placing' the elements of a slice into a gap:\n//\n// We consider the content of each node that is open to the left to be\n// independently placeable. I.e. in <p(\"foo\"), p(\"bar\")>, when the\n// paragraph on the left is open, \"foo\" can be placed (somewhere on\n// the left side of the replacement gap) independently from p(\"bar\").\n//\n// So placeSlice splits up a slice into a number of sub-slices,\n// along with information on where they can be placed on the given\n// left-side edge. It works by walking the open side of the slice,\n// from the inside out, and trying to find a landing spot for each\n// element, by simultaneously scanning over the gap side. When no\n// place is found for an open node's content, it is left in that node.\n// : (ResolvedPos, Slice) → [{content: Fragment, openEnd: number, depth: number}]\n\n\nfunction placeSlice($from, slice) {\n  var frontier = new Frontier($from);\n\n  for (var pass = 1; slice.size && pass <= 3; pass++) {\n    slice = frontier.placeSlice(slice.content, slice.openStart, slice.openEnd, pass);\n  }\n\n  while (frontier.open.length) {\n    frontier.closeNode();\n  }\n\n  return frontier.placed;\n} // Helper class that models the open side of the insert position,\n// keeping track of the content match and already inserted content\n// at each depth.\n\n\nvar Frontier = function Frontier($pos) {\n  var this$1 = this; // : [{parent: Node, match: ContentMatch, content: Fragment, wrapper: bool, openEnd: number, depth: number}]\n\n  this.open = [];\n\n  for (var d = 0; d <= $pos.depth; d++) {\n    var parent = $pos.node(d),\n        match = parent.contentMatchAt($pos.indexAfter(d));\n    this$1.open.push({\n      parent: parent,\n      match: match,\n      content: prosemirrorModel.Fragment.empty,\n      wrapper: false,\n      openEnd: 0,\n      depth: d\n    });\n  }\n\n  this.placed = [];\n}; // : (Fragment, number, number, number, ?Node) → Slice\n// Tries to place the content of the given slice, and returns a\n// slice containing unplaced content.\n//\n// pass 1: try to fit directly\n// pass 2: allow wrapper nodes to be introduced\n// pass 3: allow unwrapping of nodes that aren't open\n\n\nFrontier.prototype.placeSlice = function placeSlice(fragment, openStart, openEnd, pass, parent) {\n  var this$1 = this;\n\n  if (openStart > 0) {\n    var first = fragment.firstChild;\n    var inner = this.placeSlice(first.content, Math.max(0, openStart - 1), openEnd && fragment.childCount == 1 ? openEnd - 1 : 0, pass, first);\n\n    if (inner.content != first.content) {\n      if (inner.content.size) {\n        fragment = fragment.replaceChild(0, first.copy(inner.content));\n        openStart = inner.openStart + 1;\n      } else {\n        if (fragment.childCount == 1) {\n          openEnd = 0;\n        }\n\n        fragment = fragment.cutByIndex(1);\n        openStart = 0;\n      }\n    }\n  }\n\n  var result = this.placeContent(fragment, openStart, openEnd, pass, parent);\n\n  if (pass > 2 && result.size && openStart == 0) {\n    for (var i = 0; i < result.content.childCount; i++) {\n      var child = result.content.child(i);\n      this$1.placeContent(child.content, 0, openEnd && i == result.content.childCount.length - 1 ? openEnd - 1 : 0, pass, child);\n    }\n\n    result = prosemirrorModel.Fragment.empty;\n  }\n\n  return result;\n};\n\nFrontier.prototype.placeContent = function placeContent(fragment, openStart, openEnd, pass, parent) {\n  var this$1 = this;\n  var i = 0; // Go over the fragment's children\n\n  for (; i < fragment.childCount; i++) {\n    var child = fragment.child(i),\n        placed = false,\n        last = i == fragment.childCount - 1; // Try each open node in turn, starting from the innermost\n\n    for (var d = this.open.length - 1; d >= 0; d--) {\n      var open = this$1.open[d],\n          wrap = void 0; // If pass > 1, it is allowed to wrap the node to help find a\n      // fit, so if findWrappeing returns something, we add open\n      // nodes to the frontier for that wrapping.\n\n      if (pass > 1 && (wrap = open.match.findWrapping(child.type)) && !(parent && wrap.length && wrap[wrap.length - 1] == parent.type)) {\n        while (this.open.length - 1 > d) {\n          this$1.closeNode();\n        }\n\n        for (var w = 0; w < wrap.length; w++) {\n          open.match = open.match.matchType(wrap[w]);\n          d++;\n          open = {\n            parent: wrap[w].create(),\n            match: wrap[w].contentMatch,\n            content: prosemirrorModel.Fragment.empty,\n            wrapper: true,\n            openEnd: 0,\n            depth: d + w\n          };\n          this$1.open.push(open);\n        }\n      } // See if the child fits here\n\n\n      var match = open.match.matchType(child.type);\n\n      if (!match) {\n        var fill = open.match.fillBefore(prosemirrorModel.Fragment.from(child));\n\n        if (fill) {\n          for (var j = 0; j < fill.childCount; j++) {\n            var ch = fill.child(j);\n            this$1.addNode(open, ch, 0);\n            match = open.match.matchFragment(ch);\n          }\n        } else if (parent && open.match.matchType(parent.type)) {\n          // Don't continue looking further up if the parent node\n          // would fit here.\n          break;\n        } else {\n          continue;\n        }\n      } // Close open nodes above this one, since we're starting to\n      // add to this.\n\n\n      while (this.open.length - 1 > d) {\n        this$1.closeNode();\n      } // Strip marks from the child or close its start when necessary\n\n\n      child = child.mark(open.parent.type.allowedMarks(child.marks));\n\n      if (openStart) {\n        child = closeNodeStart(child, openStart, last ? openEnd : 0);\n        openStart = 0;\n      } // Add the child to this open node and adjust its metadata\n\n\n      this$1.addNode(open, child, last ? openEnd : 0);\n      open.match = match;\n\n      if (last) {\n        openEnd = 0;\n      }\n\n      placed = true;\n      break;\n    } // As soon as we've failed to place a node we stop looking at\n    // later nodes\n\n\n    if (!placed) {\n      break;\n    }\n  } // Close the current open node if it's not the the root and we\n  // either placed up to the end of the node or the the current\n  // slice depth's node type matches the open node's type\n\n\n  if (this.open.length > 1 && (i > 0 && i == fragment.childCount || parent && this.open[this.open.length - 1].parent.type == parent.type)) {\n    this.closeNode();\n  }\n\n  return new prosemirrorModel.Slice(fragment.cutByIndex(i), openStart, openEnd);\n};\n\nFrontier.prototype.addNode = function addNode(open, node, openEnd) {\n  open.content = closeFragmentEnd(open.content, open.openEnd).addToEnd(node);\n  open.openEnd = openEnd;\n};\n\nFrontier.prototype.closeNode = function closeNode() {\n  var open = this.open.pop();\n\n  if (open.content.size == 0) {// Nothing here\n  } else if (open.wrapper) {\n    this.addNode(this.open[this.open.length - 1], open.parent.copy(open.content), open.openEnd + 1);\n  } else {\n    this.placed[open.depth] = {\n      depth: open.depth,\n      content: open.content,\n      openEnd: open.openEnd\n    };\n  }\n};\n\nfunction closeNodeStart(node, openStart, openEnd) {\n  var content = node.content;\n\n  if (openStart > 1) {\n    var first = closeNodeStart(node.firstChild, openStart - 1, node.childCount == 1 ? openEnd - 1 : 0);\n    content = node.content.replaceChild(0, first);\n  }\n\n  var fill = node.type.contentMatch.fillBefore(content, openEnd == 0);\n  return node.copy(fill.append(content));\n}\n\nfunction closeNodeEnd(node, depth) {\n  var content = node.content;\n\n  if (depth > 1) {\n    var last = closeNodeEnd(node.lastChild, depth - 1);\n    content = node.content.replaceChild(node.childCount - 1, last);\n  }\n\n  var fill = node.contentMatchAt(node.childCount).fillBefore(prosemirrorModel.Fragment.empty, true);\n  return node.copy(content.append(fill));\n}\n\nfunction closeFragmentEnd(fragment, depth) {\n  return depth ? fragment.replaceChild(fragment.childCount - 1, closeNodeEnd(fragment.lastChild, depth)) : fragment;\n} // :: (number, number, Slice) → this\n// Replace a range of the document with a given slice, using `from`,\n// `to`, and the slice's [`openStart`](#model.Slice.openStart) property\n// as hints, rather than fixed start and end points. This method may\n// grow the replaced area or close open nodes in the slice in order to\n// get a fit that is more in line with WYSIWYG expectations, by\n// dropping fully covered parent nodes of the replaced region when\n// they are marked [non-defining](#model.NodeSpec.defining), or\n// including an open parent node from the slice that _is_ marked as\n// [defining](#model.NodeSpec.defining).\n//\n// This is the method, for example, to handle paste. The similar\n// [`replace`](#transform.Transform.replace) method is a more\n// primitive tool which will _not_ move the start and end of its given\n// range, and is useful in situations where you need more precise\n// control over what happens.\n\n\nTransform.prototype.replaceRange = function (from, to, slice) {\n  var this$1 = this;\n\n  if (!slice.size) {\n    return this.deleteRange(from, to);\n  }\n\n  var $from = this.doc.resolve(from),\n      $to = this.doc.resolve(to);\n\n  if (fitsTrivially($from, $to, slice)) {\n    return this.step(new ReplaceStep(from, to, slice));\n  }\n\n  var targetDepths = coveredDepths($from, this.doc.resolve(to)); // Can't replace the whole document, so remove 0 if it's present\n\n  if (targetDepths[targetDepths.length - 1] == 0) {\n    targetDepths.pop();\n  } // Negative numbers represent not expansion over the whole node at\n  // that depth, but replacing from $from.before(-D) to $to.pos.\n\n\n  var preferredTarget = -($from.depth + 1);\n  targetDepths.unshift(preferredTarget); // This loop picks a preferred target depth, if one of the covering\n  // depths is not outside of a defining node, and adds negative\n  // depths for any depth that has $from at its start and does not\n  // cross a defining node.\n\n  for (var d = $from.depth, pos = $from.pos - 1; d > 0; d--, pos--) {\n    var spec = $from.node(d).type.spec;\n\n    if (spec.defining || spec.isolating) {\n      break;\n    }\n\n    if (targetDepths.indexOf(d) > -1) {\n      preferredTarget = d;\n    } else if ($from.before(d) == pos) {\n      targetDepths.splice(1, 0, -d);\n    }\n  } // Try to fit each possible depth of the slice into each possible\n  // target depth, starting with the preferred depths.\n\n\n  var preferredTargetIndex = targetDepths.indexOf(preferredTarget);\n  var leftNodes = [],\n      preferredDepth = slice.openStart;\n\n  for (var content = slice.content, i = 0;; i++) {\n    var node = content.firstChild;\n    leftNodes.push(node);\n\n    if (i == slice.openStart) {\n      break;\n    }\n\n    content = node.content;\n  } // Back up if the node directly above openStart, or the node above\n  // that separated only by a non-defining textblock node, is defining.\n\n\n  if (preferredDepth > 0 && leftNodes[preferredDepth - 1].type.spec.defining && $from.node(preferredTargetIndex).type != leftNodes[preferredDepth - 1].type) {\n    preferredDepth -= 1;\n  } else if (preferredDepth >= 2 && leftNodes[preferredDepth - 1].isTextblock && leftNodes[preferredDepth - 2].type.spec.defining && $from.node(preferredTargetIndex).type != leftNodes[preferredDepth - 2].type) {\n    preferredDepth -= 2;\n  }\n\n  for (var j = slice.openStart; j >= 0; j--) {\n    var openDepth = (j + preferredDepth + 1) % (slice.openStart + 1);\n    var insert = leftNodes[openDepth];\n\n    if (!insert) {\n      continue;\n    }\n\n    for (var i$1 = 0; i$1 < targetDepths.length; i$1++) {\n      // Loop over possible expansion levels, starting with the\n      // preferred one\n      var targetDepth = targetDepths[(i$1 + preferredTargetIndex) % targetDepths.length],\n          expand = true;\n\n      if (targetDepth < 0) {\n        expand = false;\n        targetDepth = -targetDepth;\n      }\n\n      var parent = $from.node(targetDepth - 1),\n          index = $from.index(targetDepth - 1);\n\n      if (parent.canReplaceWith(index, index, insert.type, insert.marks)) {\n        return this$1.replace($from.before(targetDepth), expand ? $to.after(targetDepth) : to, new prosemirrorModel.Slice(closeFragment(slice.content, 0, slice.openStart, openDepth), openDepth, slice.openEnd));\n      }\n    }\n  }\n\n  return this.replace(from, to, slice);\n};\n\nfunction closeFragment(fragment, depth, oldOpen, newOpen, parent) {\n  if (depth < oldOpen) {\n    var first = fragment.firstChild;\n    fragment = fragment.replaceChild(0, first.copy(closeFragment(first.content, depth + 1, oldOpen, newOpen, first)));\n  }\n\n  if (depth > newOpen) {\n    fragment = parent.contentMatchAt(0).fillBefore(fragment, true).append(fragment);\n  }\n\n  return fragment;\n} // :: (number, number, Node) → this\n// Replace the given range with a node, but use `from` and `to` as\n// hints, rather than precise positions. When from and to are the same\n// and are at the start or end of a parent node in which the given\n// node doesn't fit, this method may _move_ them out towards a parent\n// that does allow the given node to be placed. When the given range\n// completely covers a parent node, this method may completely replace\n// that parent node.\n\n\nTransform.prototype.replaceRangeWith = function (from, to, node) {\n  if (!node.isInline && from == to && this.doc.resolve(from).parent.content.size) {\n    var point = insertPoint(this.doc, from, node.type);\n\n    if (point != null) {\n      from = to = point;\n    }\n  }\n\n  return this.replaceRange(from, to, new prosemirrorModel.Slice(prosemirrorModel.Fragment.from(node), 0, 0));\n}; // :: (number, number) → this\n// Delete the given range, expanding it to cover fully covered\n// parent nodes until a valid replace is found.\n\n\nTransform.prototype.deleteRange = function (from, to) {\n  var this$1 = this;\n  var $from = this.doc.resolve(from),\n      $to = this.doc.resolve(to);\n  var covered = coveredDepths($from, $to);\n\n  for (var i = 0; i < covered.length; i++) {\n    var depth = covered[i],\n        last = i == covered.length - 1;\n\n    if (last && depth == 0 || $from.node(depth).type.contentMatch.validEnd) {\n      return this$1.delete($from.start(depth), $to.end(depth));\n    }\n\n    if (depth > 0 && (last || $from.node(depth - 1).canReplace($from.index(depth - 1), $to.indexAfter(depth - 1)))) {\n      return this$1.delete($from.before(depth), $to.after(depth));\n    }\n  }\n\n  for (var d = 1; d <= $from.depth; d++) {\n    if (from - $from.start(d) == $from.depth - d && to > $from.end(d)) {\n      return this$1.delete($from.before(d), to);\n    }\n  }\n\n  return this.delete(from, to);\n}; // : (ResolvedPos, ResolvedPos) → [number]\n// Returns an array of all depths for which $from - $to spans the\n// whole content of the nodes at that depth.\n\n\nfunction coveredDepths($from, $to) {\n  var result = [],\n      minDepth = Math.min($from.depth, $to.depth);\n\n  for (var d = minDepth; d >= 0; d--) {\n    var start = $from.start(d);\n\n    if (start < $from.pos - ($from.depth - d) || $to.end(d) > $to.pos + ($to.depth - d) || $from.node(d).type.spec.isolating || $to.node(d).type.spec.isolating) {\n      break;\n    }\n\n    if (start == $to.start(d)) {\n      result.push(d);\n    }\n  }\n\n  return result;\n}\n\nexports.Transform = Transform;\nexports.TransformError = TransformError;\nexports.Step = Step;\nexports.StepResult = StepResult;\nexports.joinPoint = joinPoint;\nexports.canJoin = canJoin;\nexports.canSplit = canSplit;\nexports.insertPoint = insertPoint;\nexports.dropPoint = dropPoint;\nexports.liftTarget = liftTarget;\nexports.findWrapping = findWrapping;\nexports.StepMap = StepMap;\nexports.MapResult = MapResult;\nexports.Mapping = Mapping;\nexports.AddMarkStep = AddMarkStep;\nexports.RemoveMarkStep = RemoveMarkStep;\nexports.ReplaceStep = ReplaceStep;\nexports.ReplaceAroundStep = ReplaceAroundStep;\nexports.replaceStep = replaceStep;","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar prosemirrorModel = require('prosemirror-model'); // :: Object\n// [Specs](#model.NodeSpec) for the nodes defined in this schema.\n\n\nvar nodes = {\n  // :: NodeSpec The top level document node.\n  doc: {\n    content: \"block+\"\n  },\n  // :: NodeSpec A plain paragraph textblock. Represented in the DOM\n  // as a `<p>` element.\n  paragraph: {\n    content: \"inline*\",\n    group: \"block\",\n    parseDOM: [{\n      tag: \"p\"\n    }],\n    toDOM: function toDOM() {\n      return [\"p\", 0];\n    }\n  },\n  // :: NodeSpec A blockquote (`<blockquote>`) wrapping one or more blocks.\n  blockquote: {\n    content: \"block+\",\n    group: \"block\",\n    defining: true,\n    parseDOM: [{\n      tag: \"blockquote\"\n    }],\n    toDOM: function toDOM() {\n      return [\"blockquote\", 0];\n    }\n  },\n  // :: NodeSpec A horizontal rule (`<hr>`).\n  horizontal_rule: {\n    group: \"block\",\n    parseDOM: [{\n      tag: \"hr\"\n    }],\n    toDOM: function toDOM() {\n      return [\"hr\"];\n    }\n  },\n  // :: NodeSpec A heading textblock, with a `level` attribute that\n  // should hold the number 1 to 6. Parsed and serialized as `<h1>` to\n  // `<h6>` elements.\n  heading: {\n    attrs: {\n      level: {\n        default: 1\n      }\n    },\n    content: \"inline*\",\n    group: \"block\",\n    defining: true,\n    parseDOM: [{\n      tag: \"h1\",\n      attrs: {\n        level: 1\n      }\n    }, {\n      tag: \"h2\",\n      attrs: {\n        level: 2\n      }\n    }, {\n      tag: \"h3\",\n      attrs: {\n        level: 3\n      }\n    }, {\n      tag: \"h4\",\n      attrs: {\n        level: 4\n      }\n    }, {\n      tag: \"h5\",\n      attrs: {\n        level: 5\n      }\n    }, {\n      tag: \"h6\",\n      attrs: {\n        level: 6\n      }\n    }],\n    toDOM: function toDOM(node) {\n      return [\"h\" + node.attrs.level, 0];\n    }\n  },\n  // :: NodeSpec A code listing. Disallows marks or non-text inline\n  // nodes by default. Represented as a `<pre>` element with a\n  // `<code>` element inside of it.\n  code_block: {\n    content: \"text*\",\n    marks: \"\",\n    group: \"block\",\n    code: true,\n    defining: true,\n    parseDOM: [{\n      tag: \"pre\",\n      preserveWhitespace: \"full\"\n    }],\n    toDOM: function toDOM() {\n      return [\"pre\", [\"code\", 0]];\n    }\n  },\n  // :: NodeSpec The text node.\n  text: {\n    group: \"inline\"\n  },\n  // :: NodeSpec An inline image (`<img>`) node. Supports `src`,\n  // `alt`, and `href` attributes. The latter two default to the empty\n  // string.\n  image: {\n    inline: true,\n    attrs: {\n      src: {},\n      alt: {\n        default: null\n      },\n      title: {\n        default: null\n      }\n    },\n    group: \"inline\",\n    draggable: true,\n    parseDOM: [{\n      tag: \"img[src]\",\n      getAttrs: function getAttrs(dom) {\n        return {\n          src: dom.getAttribute(\"src\"),\n          title: dom.getAttribute(\"title\"),\n          alt: dom.getAttribute(\"alt\")\n        };\n      }\n    }],\n    toDOM: function toDOM(node) {\n      return [\"img\", node.attrs];\n    }\n  },\n  // :: NodeSpec A hard line break, represented in the DOM as `<br>`.\n  hard_break: {\n    inline: true,\n    group: \"inline\",\n    selectable: false,\n    parseDOM: [{\n      tag: \"br\"\n    }],\n    toDOM: function toDOM() {\n      return [\"br\"];\n    }\n  }\n}; // :: Object [Specs](#model.MarkSpec) for the marks in the schema.\n\nvar marks = {\n  // :: MarkSpec A link. Has `href` and `title` attributes. `title`\n  // defaults to the empty string. Rendered and parsed as an `<a>`\n  // element.\n  link: {\n    attrs: {\n      href: {},\n      title: {\n        default: null\n      }\n    },\n    inclusive: false,\n    parseDOM: [{\n      tag: \"a[href]\",\n      getAttrs: function getAttrs(dom) {\n        return {\n          href: dom.getAttribute(\"href\"),\n          title: dom.getAttribute(\"title\")\n        };\n      }\n    }],\n    toDOM: function toDOM(node) {\n      return [\"a\", node.attrs];\n    }\n  },\n  // :: MarkSpec An emphasis mark. Rendered as an `<em>` element.\n  // Has parse rules that also match `<i>` and `font-style: italic`.\n  em: {\n    parseDOM: [{\n      tag: \"i\"\n    }, {\n      tag: \"em\"\n    }, {\n      style: \"font-style=italic\"\n    }],\n    toDOM: function toDOM() {\n      return [\"em\"];\n    }\n  },\n  // :: MarkSpec A strong mark. Rendered as `<strong>`, parse rules\n  // also match `<b>` and `font-weight: bold`.\n  strong: {\n    parseDOM: [{\n      tag: \"strong\"\n    }, // This works around a Google Docs misbehavior where\n    // pasted content will be inexplicably wrapped in `<b>`\n    // tags with a font-weight normal.\n    {\n      tag: \"b\",\n      getAttrs: function (node) {\n        return node.style.fontWeight != \"normal\" && null;\n      }\n    }, {\n      style: \"font-weight\",\n      getAttrs: function (value) {\n        return /^(bold(er)?|[5-9]\\d{2,})$/.test(value) && null;\n      }\n    }],\n    toDOM: function toDOM() {\n      return [\"strong\"];\n    }\n  },\n  // :: MarkSpec Code font mark. Represented as a `<code>` element.\n  code: {\n    parseDOM: [{\n      tag: \"code\"\n    }],\n    toDOM: function toDOM() {\n      return [\"code\"];\n    }\n  }\n}; // :: Schema\n// This schema rougly corresponds to the document schema used by\n// [CommonMark](http://commonmark.org/), minus the list elements,\n// which are defined in the [`prosemirror-schema-list`](#schema-list)\n// module.\n//\n// To reuse elements from this schema, extend or read from its\n// `spec.nodes` and `spec.marks` [properties](#model.Schema.spec).\n\nvar schema = new prosemirrorModel.Schema({\n  nodes: nodes,\n  marks: marks\n});\nexports.nodes = nodes;\nexports.marks = marks;\nexports.schema = schema;","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar prosemirrorModel = require('prosemirror-model');\n\nvar prosemirrorState = require('prosemirror-state');\n\nvar prosemirrorTransform = require('prosemirror-transform');\n\nvar result = {};\n\nif (typeof navigator != \"undefined\" && typeof document != \"undefined\") {\n  var ie_edge = /Edge\\/(\\d+)/.exec(navigator.userAgent);\n  var ie_upto10 = /MSIE \\d/.test(navigator.userAgent);\n  var ie_11up = /Trident\\/(?:[7-9]|\\d{2,})\\..*rv:(\\d+)/.exec(navigator.userAgent);\n  result.mac = /Mac/.test(navigator.platform);\n  var ie = result.ie = !!(ie_upto10 || ie_11up || ie_edge);\n  result.ie_version = ie_upto10 ? document.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : null;\n  result.gecko = !ie && /gecko\\/(\\d+)/i.test(navigator.userAgent);\n  result.gecko_version = result.gecko && +(/Firefox\\/(\\d+)/.exec(navigator.userAgent) || [0, 0])[1];\n  var chrome = !ie && /Chrome\\/(\\d+)/.exec(navigator.userAgent);\n  result.chrome = !!chrome;\n  result.chrome_version = chrome && +chrome[1];\n  result.ios = !ie && /AppleWebKit/.test(navigator.userAgent) && /Mobile\\/\\w+/.test(navigator.userAgent);\n  result.android = /Android \\d/.test(navigator.userAgent);\n  result.webkit = !ie && 'WebkitAppearance' in document.documentElement.style;\n  result.safari = /Apple Computer/.test(navigator.vendor);\n  result.webkit_version = result.webkit && +(/\\bAppleWebKit\\/(\\d+)/.exec(navigator.userAgent) || [0, 0])[1];\n}\n\nvar domIndex = function (node) {\n  for (var index = 0;; index++) {\n    node = node.previousSibling;\n\n    if (!node) {\n      return index;\n    }\n  }\n};\n\nvar parentNode = function (node) {\n  var parent = node.parentNode;\n  return parent && parent.nodeType == 11 ? parent.host : parent;\n};\n\nvar textRange = function (node, from, to) {\n  var range = document.createRange();\n  range.setEnd(node, to == null ? node.nodeValue.length : to);\n  range.setStart(node, from || 0);\n  return range;\n}; // Scans forward and backward through DOM positions equivalent to the\n// given one to see if the two are in the same place (i.e. after a\n// text node vs at the end of that text node)\n\n\nvar isEquivalentPosition = function (node, off, targetNode, targetOff) {\n  return targetNode && (scanFor(node, off, targetNode, targetOff, -1) || scanFor(node, off, targetNode, targetOff, 1));\n};\n\nvar atomElements = /^(img|br|input|textarea|hr)$/i;\n\nfunction scanFor(node, off, targetNode, targetOff, dir) {\n  for (;;) {\n    if (node == targetNode && off == targetOff) {\n      return true;\n    }\n\n    if (off == (dir < 0 ? 0 : nodeSize(node)) || node.nodeType == 3 && node.nodeValue == \"\\ufeff\") {\n      var parent = node.parentNode;\n\n      if (parent.nodeType != 1 || hasBlockDesc(node) || atomElements.test(node.nodeName) || node.contentEditable == \"false\") {\n        return false;\n      }\n\n      off = domIndex(node) + (dir < 0 ? 0 : 1);\n      node = parent;\n    } else if (node.nodeType == 1) {\n      node = node.childNodes[off + (dir < 0 ? -1 : 0)];\n      off = dir < 0 ? nodeSize(node) : 0;\n    } else {\n      return false;\n    }\n  }\n}\n\nfunction nodeSize(node) {\n  return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;\n}\n\nfunction hasBlockDesc(dom) {\n  var desc = dom.pmViewDesc;\n  return desc && desc.node && desc.node.isBlock;\n} // Work around Chrome issue https://bugs.chromium.org/p/chromium/issues/detail?id=447523\n// (isCollapsed inappropriately returns true in shadow dom)\n\n\nvar selectionCollapsed = function (domSel) {\n  var collapsed = domSel.isCollapsed;\n\n  if (collapsed && result.chrome && domSel.rangeCount && !domSel.getRangeAt(0).collapsed) {\n    collapsed = false;\n  }\n\n  return collapsed;\n};\n\nfunction keyEvent(keyCode, key) {\n  var event = document.createEvent(\"Event\");\n  event.initEvent(\"keydown\", true, true);\n  event.keyCode = keyCode;\n  event.key = event.code = key;\n  return event;\n}\n\nfunction windowRect(win) {\n  return {\n    left: 0,\n    right: win.innerWidth,\n    top: 0,\n    bottom: win.innerHeight\n  };\n}\n\nfunction getSide(value, side) {\n  return typeof value == \"number\" ? value : value[side];\n}\n\nfunction scrollRectIntoView(view, rect, startDOM) {\n  var scrollThreshold = view.someProp(\"scrollThreshold\") || 0,\n      scrollMargin = view.someProp(\"scrollMargin\") || 5;\n  var doc = view.dom.ownerDocument,\n      win = doc.defaultView;\n\n  for (var parent = startDOM || view.dom;; parent = parentNode(parent)) {\n    if (!parent) {\n      break;\n    }\n\n    if (parent.nodeType != 1) {\n      continue;\n    }\n\n    var atTop = parent == doc.body || parent.nodeType != 1;\n    var bounding = atTop ? windowRect(win) : parent.getBoundingClientRect();\n    var moveX = 0,\n        moveY = 0;\n\n    if (rect.top < bounding.top + getSide(scrollThreshold, \"top\")) {\n      moveY = -(bounding.top - rect.top + getSide(scrollMargin, \"top\"));\n    } else if (rect.bottom > bounding.bottom - getSide(scrollThreshold, \"bottom\")) {\n      moveY = rect.bottom - bounding.bottom + getSide(scrollMargin, \"bottom\");\n    }\n\n    if (rect.left < bounding.left + getSide(scrollThreshold, \"left\")) {\n      moveX = -(bounding.left - rect.left + getSide(scrollMargin, \"left\"));\n    } else if (rect.right > bounding.right - getSide(scrollThreshold, \"right\")) {\n      moveX = rect.right - bounding.right + getSide(scrollMargin, \"right\");\n    }\n\n    if (moveX || moveY) {\n      if (atTop) {\n        win.scrollBy(moveX, moveY);\n      } else {\n        if (moveY) {\n          parent.scrollTop += moveY;\n        }\n\n        if (moveX) {\n          parent.scrollLeft += moveX;\n        }\n      }\n    }\n\n    if (atTop) {\n      break;\n    }\n  }\n} // Store the scroll position of the editor's parent nodes, along with\n// the top position of an element near the top of the editor, which\n// will be used to make sure the visible viewport remains stable even\n// when the size of the content above changes.\n\n\nfunction storeScrollPos(view) {\n  var rect = view.dom.getBoundingClientRect(),\n      startY = Math.max(0, rect.top);\n  var doc = view.dom.ownerDocument;\n  var refDOM, refTop;\n\n  for (var x = (rect.left + rect.right) / 2, y = startY + 1; y < Math.min(innerHeight, rect.bottom); y += 5) {\n    var dom = view.root.elementFromPoint(x, y);\n\n    if (dom == view.dom || !view.dom.contains(dom)) {\n      continue;\n    }\n\n    var localRect = dom.getBoundingClientRect();\n\n    if (localRect.top >= startY - 20) {\n      refDOM = dom;\n      refTop = localRect.top;\n      break;\n    }\n  }\n\n  var stack = [];\n\n  for (var dom$1 = view.dom; dom$1; dom$1 = parentNode(dom$1)) {\n    stack.push({\n      dom: dom$1,\n      top: dom$1.scrollTop,\n      left: dom$1.scrollLeft\n    });\n\n    if (dom$1 == doc.body) {\n      break;\n    }\n  }\n\n  return {\n    refDOM: refDOM,\n    refTop: refTop,\n    stack: stack\n  };\n} // Reset the scroll position of the editor's parent nodes to that what\n// it was before, when storeScrollPos was called.\n\n\nfunction resetScrollPos(ref) {\n  var refDOM = ref.refDOM;\n  var refTop = ref.refTop;\n  var stack = ref.stack;\n  var newRefTop = refDOM ? refDOM.getBoundingClientRect().top : 0;\n  var dTop = newRefTop == 0 ? 0 : newRefTop - refTop;\n\n  for (var i = 0; i < stack.length; i++) {\n    var ref$1 = stack[i];\n    var dom = ref$1.dom;\n    var top = ref$1.top;\n    var left = ref$1.left;\n\n    if (dom.scrollTop != top + dTop) {\n      dom.scrollTop = top + dTop;\n    }\n\n    if (dom.scrollLeft != left) {\n      dom.scrollLeft = left;\n    }\n  }\n}\n\nfunction findOffsetInNode(node, coords) {\n  var closest,\n      dxClosest = 2e8,\n      coordsClosest,\n      offset = 0;\n  var rowBot = coords.top,\n      rowTop = coords.top;\n\n  for (var child = node.firstChild, childIndex = 0; child; child = child.nextSibling, childIndex++) {\n    var rects = void 0;\n\n    if (child.nodeType == 1) {\n      rects = child.getClientRects();\n    } else if (child.nodeType == 3) {\n      rects = textRange(child).getClientRects();\n    } else {\n      continue;\n    }\n\n    for (var i = 0; i < rects.length; i++) {\n      var rect = rects[i];\n\n      if (rect.top <= rowBot && rect.bottom >= rowTop) {\n        rowBot = Math.max(rect.bottom, rowBot);\n        rowTop = Math.min(rect.top, rowTop);\n        var dx = rect.left > coords.left ? rect.left - coords.left : rect.right < coords.left ? coords.left - rect.right : 0;\n\n        if (dx < dxClosest) {\n          closest = child;\n          dxClosest = dx;\n          coordsClosest = dx && closest.nodeType == 3 ? {\n            left: rect.right < coords.left ? rect.right : rect.left,\n            top: coords.top\n          } : coords;\n\n          if (child.nodeType == 1 && dx) {\n            offset = childIndex + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0);\n          }\n\n          continue;\n        }\n      }\n\n      if (!closest && (coords.left >= rect.right && coords.top >= rect.top || coords.left >= rect.left && coords.top >= rect.bottom)) {\n        offset = childIndex + 1;\n      }\n    }\n  }\n\n  if (closest && closest.nodeType == 3) {\n    return findOffsetInText(closest, coordsClosest);\n  }\n\n  if (!closest || dxClosest && closest.nodeType == 1) {\n    return {\n      node: node,\n      offset: offset\n    };\n  }\n\n  return findOffsetInNode(closest, coordsClosest);\n}\n\nfunction findOffsetInText(node, coords) {\n  var len = node.nodeValue.length;\n  var range = document.createRange();\n\n  for (var i = 0; i < len; i++) {\n    range.setEnd(node, i + 1);\n    range.setStart(node, i);\n    var rect = singleRect(range, 1);\n\n    if (rect.top == rect.bottom) {\n      continue;\n    }\n\n    if (inRect(coords, rect)) {\n      return {\n        node: node,\n        offset: i + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0)\n      };\n    }\n  }\n\n  return {\n    node: node,\n    offset: 0\n  };\n}\n\nfunction inRect(coords, rect) {\n  return coords.left >= rect.left - 1 && coords.left <= rect.right + 1 && coords.top >= rect.top - 1 && coords.top <= rect.bottom + 1;\n}\n\nfunction targetKludge(dom, coords) {\n  var parent = dom.parentNode;\n\n  if (parent && /^li$/i.test(parent.nodeName) && coords.left < dom.getBoundingClientRect().left) {\n    return parent;\n  }\n\n  return dom;\n}\n\nfunction posFromElement(view, elt, coords) {\n  var ref = findOffsetInNode(elt, coords);\n  var node = ref.node;\n  var offset = ref.offset;\n  var bias = -1;\n\n  if (node.nodeType == 1 && !node.firstChild) {\n    var rect = node.getBoundingClientRect();\n    bias = rect.left != rect.right && coords.left > (rect.left + rect.right) / 2 ? 1 : -1;\n  }\n\n  return view.docView.posFromDOM(node, offset, bias);\n}\n\nfunction posFromCaret(view, node, offset, coords) {\n  // Browser (in caretPosition/RangeFromPoint) will agressively\n  // normalize towards nearby inline nodes. Since we are interested in\n  // positions between block nodes too, we first walk up the hierarchy\n  // of nodes to see if there are block nodes that the coordinates\n  // fall outside of. If so, we take the position before/after that\n  // block. If not, we call `posFromDOM` on the raw node/offset.\n  var outside = -1;\n\n  for (var cur = node;;) {\n    if (cur == view.dom) {\n      break;\n    }\n\n    var desc = view.docView.nearestDesc(cur, true);\n\n    if (!desc) {\n      return null;\n    }\n\n    if (desc.node.isBlock && desc.parent) {\n      var rect = desc.dom.getBoundingClientRect();\n\n      if (rect.left > coords.left || rect.top > coords.top) {\n        outside = desc.posBefore;\n      } else if (rect.right < coords.left || rect.bottom < coords.top) {\n        outside = desc.posAfter;\n      } else {\n        break;\n      }\n    }\n\n    cur = desc.dom.parentNode;\n  }\n\n  return outside > -1 ? outside : view.docView.posFromDOM(node, offset);\n}\n\nfunction elementFromPoint(element, coords, box) {\n  var len = element.childNodes.length;\n\n  if (len && box.top < box.bottom) {\n    for (var startI = Math.max(0, Math.floor(len * (coords.top - box.top) / (box.bottom - box.top)) - 2), i = startI;;) {\n      var child = element.childNodes[i];\n\n      if (child.nodeType == 1) {\n        var rects = child.getClientRects();\n\n        for (var j = 0; j < rects.length; j++) {\n          var rect = rects[j];\n\n          if (inRect(coords, rect)) {\n            return elementFromPoint(child, coords, rect);\n          }\n        }\n      }\n\n      if ((i = (i + 1) % len) == startI) {\n        break;\n      }\n    }\n  }\n\n  return element;\n} // Given an x,y position on the editor, get the position in the document.\n\n\nfunction posAtCoords(view, coords) {\n  var root = view.root,\n      node,\n      offset;\n\n  if (root.caretPositionFromPoint) {\n    var pos$1 = root.caretPositionFromPoint(coords.left, coords.top);\n\n    if (pos$1) {\n      var assign;\n      assign = pos$1, node = assign.offsetNode, offset = assign.offset;\n    }\n  }\n\n  if (!node && root.caretRangeFromPoint) {\n    var range = root.caretRangeFromPoint(coords.left, coords.top);\n\n    if (range) {\n      var assign$1;\n      assign$1 = range, node = assign$1.startContainer, offset = assign$1.startOffset;\n    }\n  }\n\n  var elt = root.elementFromPoint(coords.left, coords.top + 1),\n      pos;\n\n  if (!elt || !view.dom.contains(elt.nodeType != 1 ? elt.parentNode : elt)) {\n    var box = view.dom.getBoundingClientRect();\n\n    if (!inRect(coords, box)) {\n      return null;\n    }\n\n    elt = elementFromPoint(view.dom, coords, box);\n\n    if (!elt) {\n      return null;\n    }\n  }\n\n  elt = targetKludge(elt, coords);\n\n  if (node) {\n    // Suspiciously specific kludge to work around caret*FromPoint\n    // never returning a position at the end of the document\n    if (node == view.dom && offset == node.childNodes.length - 1 && node.lastChild.nodeType == 1 && coords.top > node.lastChild.getBoundingClientRect().bottom) {\n      pos = view.state.doc.content.size;\n    } // Ignore positions directly after a BR, since caret*FromPoint\n    // 'round up' positions that would be more accurately placed\n    // before the BR node.\n    else if (offset == 0 || node.nodeType != 1 || node.childNodes[offset - 1].nodeName != \"BR\") {\n        pos = posFromCaret(view, node, offset, coords);\n      }\n  }\n\n  if (pos == null) {\n    pos = posFromElement(view, elt, coords);\n  }\n\n  var desc = view.docView.nearestDesc(elt, true);\n  return {\n    pos: pos,\n    inside: desc ? desc.posAtStart - desc.border : -1\n  };\n}\n\nfunction singleRect(object, bias) {\n  var rects = object.getClientRects();\n  return !rects.length ? object.getBoundingClientRect() : rects[bias < 0 ? 0 : rects.length - 1];\n} // : (EditorView, number) → {left: number, top: number, right: number, bottom: number}\n// Given a position in the document model, get a bounding box of the\n// character at that position, relative to the window.\n\n\nfunction coordsAtPos(view, pos) {\n  var ref = view.docView.domFromPos(pos);\n  var node = ref.node;\n  var offset = ref.offset; // These browsers support querying empty text ranges\n\n  if (node.nodeType == 3 && (result.chrome || result.gecko)) {\n    var rect = singleRect(textRange(node, offset, offset), 0); // Firefox returns bad results (the position before the space)\n    // when querying a position directly after line-broken\n    // whitespace. Detect this situation and and kludge around it\n\n    if (result.gecko && offset && /\\s/.test(node.nodeValue[offset - 1]) && offset < node.nodeValue.length) {\n      var rectBefore = singleRect(textRange(node, offset - 1, offset - 1), -1);\n\n      if (Math.abs(rectBefore.left - rect.left) < 1 && rectBefore.top == rect.top) {\n        var rectAfter = singleRect(textRange(node, offset, offset + 1), -1);\n        return flatten(rectAfter, rectAfter.left < rectBefore.left);\n      }\n    }\n\n    return rect;\n  } // Not Firefox/Chrome, or not in a text node, so we have to use\n  // actual element/character rectangles to get a solution (this part\n  // is not very bidi-safe)\n  //\n  // Try the left side first, fall back to the right one if that\n  // doesn't work.\n\n\n  for (var dir = -1; dir < 2; dir += 2) {\n    if (dir < 0 && offset) {\n      var prev = void 0,\n          target = node.nodeType == 3 ? textRange(node, offset - 1, offset) : (prev = node.childNodes[offset - 1]).nodeType == 3 ? textRange(prev) : prev.nodeType == 1 && prev.nodeName != \"BR\" ? prev : null; // BR nodes tend to only return the rectangle before them\n\n      if (target) {\n        var rect$1 = singleRect(target, 1);\n\n        if (rect$1.top < rect$1.bottom) {\n          return flatten(rect$1, false);\n        }\n      }\n    } else if (dir > 0 && offset < nodeSize(node)) {\n      var next = void 0,\n          target$1 = node.nodeType == 3 ? textRange(node, offset, offset + 1) : (next = node.childNodes[offset]).nodeType == 3 ? textRange(next) : next.nodeType == 1 ? next : null;\n\n      if (target$1) {\n        var rect$2 = singleRect(target$1, -1);\n\n        if (rect$2.top < rect$2.bottom) {\n          return flatten(rect$2, true);\n        }\n      }\n    }\n  } // All else failed, just try to get a rectangle for the target node\n\n\n  return flatten(singleRect(node.nodeType == 3 ? textRange(node) : node, 0), false);\n}\n\nfunction flatten(rect, left) {\n  if (rect.width == 0) {\n    return rect;\n  }\n\n  var x = left ? rect.left : rect.right;\n  return {\n    top: rect.top,\n    bottom: rect.bottom,\n    left: x,\n    right: x\n  };\n}\n\nfunction withFlushedState(view, state, f) {\n  var viewState = view.state,\n      active = view.root.activeElement;\n\n  if (viewState != state || !view.inDOMChange) {\n    view.updateState(state);\n  }\n\n  if (active != view.dom) {\n    view.focus();\n  }\n\n  try {\n    return f();\n  } finally {\n    if (viewState != state) {\n      view.updateState(viewState);\n    }\n\n    if (active != view.dom) {\n      active.focus();\n    }\n  }\n} // : (EditorView, number, number)\n// Whether vertical position motion in a given direction\n// from a position would leave a text block.\n\n\nfunction endOfTextblockVertical(view, state, dir) {\n  var sel = state.selection;\n  var $pos = dir == \"up\" ? sel.$anchor.min(sel.$head) : sel.$anchor.max(sel.$head);\n  return withFlushedState(view, state, function () {\n    var ref = view.docView.domFromPos($pos.pos);\n    var dom = ref.node;\n\n    for (;;) {\n      var nearest = view.docView.nearestDesc(dom, true);\n\n      if (!nearest) {\n        break;\n      }\n\n      if (nearest.node.isBlock) {\n        dom = nearest.dom;\n        break;\n      }\n\n      dom = nearest.dom.parentNode;\n    }\n\n    var coords = coordsAtPos(view, $pos.pos);\n\n    for (var child = dom.firstChild; child; child = child.nextSibling) {\n      var boxes = void 0;\n\n      if (child.nodeType == 1) {\n        boxes = child.getClientRects();\n      } else if (child.nodeType == 3) {\n        boxes = textRange(child, 0, child.nodeValue.length).getClientRects();\n      } else {\n        continue;\n      }\n\n      for (var i = 0; i < boxes.length; i++) {\n        var box = boxes[i];\n\n        if (box.bottom > box.top && (dir == \"up\" ? box.bottom < coords.top + 1 : box.top > coords.bottom - 1)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  });\n}\n\nvar maybeRTL = /[\\u0590-\\u08ac]/;\n\nfunction endOfTextblockHorizontal(view, state, dir) {\n  var ref = state.selection;\n  var $head = ref.$head;\n\n  if (!$head.parent.isTextblock) {\n    return false;\n  }\n\n  var offset = $head.parentOffset,\n      atStart = !offset,\n      atEnd = offset == $head.parent.content.size;\n  var sel = getSelection(); // If the textblock is all LTR, or the browser doesn't support\n  // Selection.modify (Edge), fall back to a primitive approach\n\n  if (!maybeRTL.test($head.parent.textContent) || !sel.modify) {\n    return dir == \"left\" || dir == \"backward\" ? atStart : atEnd;\n  }\n\n  return withFlushedState(view, state, function () {\n    // This is a huge hack, but appears to be the best we can\n    // currently do: use `Selection.modify` to move the selection by\n    // one character, and see if that moves the cursor out of the\n    // textblock (or doesn't move it at all, when at the start/end of\n    // the document).\n    var oldRange = sel.getRangeAt(0),\n        oldNode = sel.focusNode,\n        oldOff = sel.focusOffset;\n    sel.modify(\"move\", dir, \"character\");\n    var parentDOM = $head.depth ? view.docView.domAfterPos($head.before()) : view.dom;\n    var result$$1 = !parentDOM.contains(sel.focusNode.nodeType == 1 ? sel.focusNode : sel.focusNode.parentNode) || oldNode == sel.focusNode && oldOff == sel.focusOffset; // Restore the previous selection\n\n    sel.removeAllRanges();\n    sel.addRange(oldRange);\n    return result$$1;\n  });\n}\n\nvar cachedState = null;\nvar cachedDir = null;\nvar cachedResult = false;\n\nfunction endOfTextblock(view, state, dir) {\n  if (cachedState == state && cachedDir == dir) {\n    return cachedResult;\n  }\n\n  cachedState = state;\n  cachedDir = dir;\n  return cachedResult = dir == \"up\" || dir == \"down\" ? endOfTextblockVertical(view, state, dir) : endOfTextblockHorizontal(view, state, dir);\n} // NodeView:: interface\n//\n// By default, document nodes are rendered using the result of the\n// [`toDOM`](#model.NodeSpec.toDOM) method of their spec, and managed\n// entirely by the editor. For some use cases, such as embedded\n// node-specific editing interfaces, you want more control over\n// the behavior of a node's in-editor representation, and need to\n// [define](#view.EditorProps.nodeViews) a custom node view.\n//\n// Objects returned as node views must conform to this interface.\n//\n//   dom:: ?dom.Node\n//   The outer DOM node that represents the document node. When not\n//   given, the default strategy is used to create a DOM node.\n//\n//   contentDOM:: ?dom.Node\n//   The DOM node that should hold the node's content. Only meaningful\n//   if the node view also defines a `dom` property and if its node\n//   type is not a leaf node type. When this is present, ProseMirror\n//   will take care of rendering the node's children into it. When it\n//   is not present, the node view itself is responsible for rendering\n//   (or deciding not to render) its child nodes.\n//\n//   update:: ?(node: Node, decorations: [Decoration]) → bool\n//   When given, this will be called when the view is updating itself.\n//   It will be given a node (possibly of a different type), and an\n//   array of active decorations (which are automatically drawn, and\n//   the node view may ignore if it isn't interested in them), and\n//   should return true if it was able to update to that node, and\n//   false otherwise. If the node view has a `contentDOM` property (or\n//   no `dom` property), updating its child nodes will be handled by\n//   ProseMirror.\n//\n//   selectNode:: ?()\n//   Can be used to override the way the node's selected status (as a\n//   node selection) is displayed.\n//\n//   deselectNode:: ?()\n//   When defining a `selectNode` method, you should also provide a\n//   `deselectNode` method to remove the effect again.\n//\n//   setSelection:: ?(anchor: number, head: number, root: dom.Document)\n//   This will be called to handle setting the selection inside the\n//   node. The `anchor` and `head` positions are relative to the start\n//   of the node. By default, a DOM selection will be created between\n//   the DOM positions corresponding to those positions, but if you\n//   override it you can do something else.\n//\n//   stopEvent:: ?(event: dom.Event) → bool\n//   Can be used to prevent the editor view from trying to handle some\n//   or all DOM events that bubble up from the node view. Events for\n//   which this returns true are not handled by the editor.\n//\n//   ignoreMutation:: ?(dom.MutationRecord) → bool\n//   Called when a DOM\n//   [mutation](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver)\n//   happens within the view. Return false if the editor should\n//   re-parse the range around the mutation, true if it can safely be\n//   ignored.\n//\n//   destroy:: ?()\n//   Called when the node view is removed from the editor or the whole\n//   editor is destroyed.\n// View descriptions are data structures that describe the DOM that is\n// used to represent the editor's content. They are used for:\n//\n// - Incremental redrawing when the document changes\n//\n// - Figuring out what part of the document a given DOM position\n//   corresponds to\n//\n// - Wiring in custom implementations of the editing interface for a\n//   given node\n//\n// They form a doubly-linked mutable tree, starting at `view.docView`.\n\n\nvar NOT_DIRTY = 0;\nvar CHILD_DIRTY = 1;\nvar CONTENT_DIRTY = 2;\nvar NODE_DIRTY = 3; // Superclass for the various kinds of descriptions. Defines their\n// basic structure and shared methods.\n\nvar ViewDesc = function ViewDesc(parent, children, dom, contentDOM) {\n  this.parent = parent;\n  this.children = children;\n  this.dom = dom; // An expando property on the DOM node provides a link back to its\n  // description.\n\n  dom.pmViewDesc = this; // This is the node that holds the child views. It may be null for\n  // descs that don't have children.\n\n  this.contentDOM = contentDOM;\n  this.dirty = NOT_DIRTY;\n};\n\nvar prototypeAccessors$1 = {\n  beforePosition: {},\n  size: {},\n  border: {},\n  posBefore: {},\n  posAtStart: {},\n  posAfter: {},\n  posAtEnd: {},\n  contentLost: {}\n}; // Used to check whether a given description corresponds to a\n// widget/mark/node.\n\nViewDesc.prototype.matchesWidget = function matchesWidget() {\n  return false;\n};\n\nViewDesc.prototype.matchesMark = function matchesMark() {\n  return false;\n};\n\nViewDesc.prototype.matchesNode = function matchesNode() {\n  return false;\n};\n\nViewDesc.prototype.matchesHack = function matchesHack() {\n  return false;\n};\n\nprototypeAccessors$1.beforePosition.get = function () {\n  return false;\n}; // : () → ?ParseRule\n// When parsing in-editor content (in domchange.js), we allow\n// descriptions to determine the parse rules that should be used to\n// parse them.\n\n\nViewDesc.prototype.parseRule = function parseRule() {\n  return null;\n}; // : (dom.Event) → bool\n// Used by the editor's event handler to ignore events that come\n// from certain descs.\n\n\nViewDesc.prototype.stopEvent = function stopEvent() {\n  return false;\n}; // The size of the content represented by this desc.\n\n\nprototypeAccessors$1.size.get = function () {\n  var this$1 = this;\n  var size = 0;\n\n  for (var i = 0; i < this.children.length; i++) {\n    size += this$1.children[i].size;\n  }\n\n  return size;\n}; // For block nodes, this represents the space taken up by their\n// start/end tokens.\n\n\nprototypeAccessors$1.border.get = function () {\n  return 0;\n};\n\nViewDesc.prototype.destroy = function destroy() {\n  var this$1 = this;\n  this.parent = null;\n\n  if (this.dom.pmViewDesc == this) {\n    this.dom.pmViewDesc = null;\n  }\n\n  for (var i = 0; i < this.children.length; i++) {\n    this$1.children[i].destroy();\n  }\n};\n\nViewDesc.prototype.posBeforeChild = function posBeforeChild(child) {\n  var this$1 = this;\n\n  for (var i = 0, pos = this.posAtStart; i < this.children.length; i++) {\n    var cur = this$1.children[i];\n\n    if (cur == child) {\n      return pos;\n    }\n\n    pos += cur.size;\n  }\n};\n\nprototypeAccessors$1.posBefore.get = function () {\n  return this.parent.posBeforeChild(this);\n};\n\nprototypeAccessors$1.posAtStart.get = function () {\n  return this.parent ? this.parent.posBeforeChild(this) + this.border : 0;\n};\n\nprototypeAccessors$1.posAfter.get = function () {\n  return this.posBefore + this.size;\n};\n\nprototypeAccessors$1.posAtEnd.get = function () {\n  return this.posAtStart + this.size - 2 * this.border;\n}; // : (dom.Node, number, ?number) → number\n\n\nViewDesc.prototype.localPosFromDOM = function localPosFromDOM(dom, offset, bias) {\n  var this$1 = this; // If the DOM position is in the content, use the child desc after\n  // it to figure out a position.\n\n  if (this.contentDOM && this.contentDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode)) {\n    if (bias < 0) {\n      var domBefore, desc;\n\n      if (dom == this.contentDOM) {\n        domBefore = dom.childNodes[offset - 1];\n      } else {\n        while (dom.parentNode != this.contentDOM) {\n          dom = dom.parentNode;\n        }\n\n        domBefore = dom.previousSibling;\n      }\n\n      while (domBefore && !((desc = domBefore.pmViewDesc) && desc.parent == this)) {\n        domBefore = domBefore.previousSibling;\n      }\n\n      return domBefore ? this.posBeforeChild(desc) + desc.size : this.posAtStart;\n    } else {\n      var domAfter, desc$1;\n\n      if (dom == this.contentDOM) {\n        domAfter = dom.childNodes[offset];\n      } else {\n        while (dom.parentNode != this.contentDOM) {\n          dom = dom.parentNode;\n        }\n\n        domAfter = dom.nextSibling;\n      }\n\n      while (domAfter && !((desc$1 = domAfter.pmViewDesc) && desc$1.parent == this)) {\n        domAfter = domAfter.nextSibling;\n      }\n\n      return domAfter ? this.posBeforeChild(desc$1) : this.posAtEnd;\n    }\n  } // Otherwise, use various heuristics, falling back on the bias\n  // parameter, to determine whether to return the position at the\n  // start or at the end of this view desc.\n\n\n  var atEnd;\n\n  if (this.contentDOM && this.contentDOM != this.dom && this.dom.contains(this.contentDOM)) {\n    atEnd = dom.compareDocumentPosition(this.contentDOM) & 2;\n  } else if (this.dom.firstChild) {\n    if (offset == 0) {\n      for (var search = dom;; search = search.parentNode) {\n        if (search == this$1.dom) {\n          atEnd = false;\n          break;\n        }\n\n        if (search.parentNode.firstChild != search) {\n          break;\n        }\n      }\n    }\n\n    if (atEnd == null && offset == dom.childNodes.length) {\n      for (var search$1 = dom;; search$1 = search$1.parentNode) {\n        if (search$1 == this$1.dom) {\n          atEnd = true;\n          break;\n        }\n\n        if (search$1.parentNode.lastChild != search$1) {\n          break;\n        }\n      }\n    }\n  }\n\n  return (atEnd == null ? bias > 0 : atEnd) ? this.posAtEnd : this.posAtStart;\n}; // Scan up the dom finding the first desc that is a descendant of\n// this one.\n\n\nViewDesc.prototype.nearestDesc = function nearestDesc(dom, onlyNodes) {\n  var this$1 = this;\n\n  for (var first = true, cur = dom; cur; cur = cur.parentNode) {\n    var desc = this$1.getDesc(cur);\n\n    if (desc && (!onlyNodes || desc.node)) {\n      // If dom is outside of this desc's nodeDOM, don't count it.\n      if (first && desc.nodeDOM && !(desc.nodeDOM.nodeType == 1 ? desc.nodeDOM.contains(dom) : desc.nodeDOM == dom)) {\n        first = false;\n      } else {\n        return desc;\n      }\n    }\n  }\n};\n\nViewDesc.prototype.getDesc = function getDesc(dom) {\n  var this$1 = this;\n  var desc = dom.pmViewDesc;\n\n  for (var cur = desc; cur; cur = cur.parent) {\n    if (cur == this$1) {\n      return desc;\n    }\n  }\n};\n\nViewDesc.prototype.posFromDOM = function posFromDOM(dom, offset, bias) {\n  var this$1 = this;\n\n  for (var scan = dom;; scan = scan.parentNode) {\n    var desc = this$1.getDesc(scan);\n\n    if (desc) {\n      return desc.localPosFromDOM(dom, offset, bias);\n    }\n  }\n}; // : (number) → ?NodeViewDesc\n// Find the desc for the node after the given pos, if any. (When a\n// parent node overrode rendering, there might not be one.)\n\n\nViewDesc.prototype.descAt = function descAt(pos) {\n  var this$1 = this;\n\n  for (var i = 0, offset = 0; i < this.children.length; i++) {\n    var child = this$1.children[i],\n        end = offset + child.size;\n\n    if (offset == pos && end != offset) {\n      while (!child.border && child.children.length) {\n        child = child.children[0];\n      }\n\n      return child;\n    }\n\n    if (pos < end) {\n      return child.descAt(pos - offset - child.border);\n    }\n\n    offset = end;\n  }\n}; // : (number) → {node: dom.Node, offset: number}\n\n\nViewDesc.prototype.domFromPos = function domFromPos(pos) {\n  var this$1 = this;\n\n  if (!this.contentDOM) {\n    return {\n      node: this.dom,\n      offset: 0\n    };\n  }\n\n  for (var offset = 0, i = 0;; i++) {\n    if (offset == pos) {\n      while (i < this.children.length && this.children[i].beforePosition) {\n        i++;\n      }\n\n      return {\n        node: this$1.contentDOM,\n        offset: i\n      };\n    }\n\n    if (i == this$1.children.length) {\n      throw new Error(\"Invalid position \" + pos);\n    }\n\n    var child = this$1.children[i],\n        end = offset + child.size;\n\n    if (pos < end) {\n      return child.domFromPos(pos - offset - child.border);\n    }\n\n    offset = end;\n  }\n}; // Used to find a DOM range in a single parent for a given changed\n// range.\n\n\nViewDesc.prototype.parseRange = function parseRange(from, to, base) {\n  var this$1 = this;\n  if (base === void 0) base = 0;\n\n  if (this.children.length == 0) {\n    return {\n      node: this.contentDOM,\n      from: from,\n      to: to,\n      fromOffset: 0,\n      toOffset: this.contentDOM.childNodes.length\n    };\n  }\n\n  var fromOffset = -1,\n      toOffset = -1;\n\n  for (var offset = 0, i = 0;; i++) {\n    var child = this$1.children[i],\n        end = offset + child.size;\n\n    if (fromOffset == -1 && from <= end) {\n      var childBase = offset + child.border; // FIXME maybe descend mark views to parse a narrower range?\n\n      if (from >= childBase && to <= end - child.border && child.node && child.contentDOM && this$1.contentDOM.contains(child.contentDOM)) {\n        return child.parseRange(from - childBase, to - childBase, base + childBase);\n      }\n\n      from = base + offset;\n\n      for (var j = i; j > 0; j--) {\n        var prev = this$1.children[j - 1];\n\n        if (prev.size && prev.dom.parentNode == this$1.contentDOM && !prev.emptyChildAt(1)) {\n          fromOffset = domIndex(prev.dom) + 1;\n          break;\n        }\n\n        from -= prev.size;\n      }\n\n      if (fromOffset == -1) {\n        fromOffset = 0;\n      }\n    }\n\n    if (fromOffset > -1 && to <= end) {\n      to = base + end;\n\n      for (var j$1 = i + 1; j$1 < this.children.length; j$1++) {\n        var next = this$1.children[j$1];\n\n        if (next.size && next.dom.parentNode == this$1.contentDOM && !next.emptyChildAt(-1)) {\n          toOffset = domIndex(next.dom);\n          break;\n        }\n\n        to += next.size;\n      }\n\n      if (toOffset == -1) {\n        toOffset = this$1.contentDOM.childNodes.length;\n      }\n\n      break;\n    }\n\n    offset = end;\n  }\n\n  return {\n    node: this.contentDOM,\n    from: from,\n    to: to,\n    fromOffset: fromOffset,\n    toOffset: toOffset\n  };\n};\n\nViewDesc.prototype.emptyChildAt = function emptyChildAt(side) {\n  if (this.border || !this.contentDOM || !this.children.length) {\n    return false;\n  }\n\n  var child = this.children[side < 0 ? 0 : this.children.length - 1];\n  return child.size == 0 || child.emptyChildAt(side);\n}; // : (number) → dom.Node\n\n\nViewDesc.prototype.domAfterPos = function domAfterPos(pos) {\n  var ref = this.domFromPos(pos);\n  var node = ref.node;\n  var offset = ref.offset;\n\n  if (node.nodeType != 1 || offset == node.childNodes.length) {\n    throw new RangeError(\"No node after pos \" + pos);\n  }\n\n  return node.childNodes[offset];\n}; // : (number, number, dom.Document)\n// View descs are responsible for setting any selection that falls\n// entirely inside of them, so that custom implementations can do\n// custom things with the selection. Note that this falls apart when\n// a selection starts in such a node and ends in another, in which\n// case we just use whatever domFromPos produces as a best effort.\n\n\nViewDesc.prototype.setSelection = function setSelection(anchor, head, root, force) {\n  var this$1 = this; // If the selection falls entirely in a child, give it to that child\n\n  var from = Math.min(anchor, head),\n      to = Math.max(anchor, head);\n\n  for (var i = 0, offset = 0; i < this.children.length; i++) {\n    var child = this$1.children[i],\n        end = offset + child.size;\n\n    if (from > offset && to < end) {\n      return child.setSelection(anchor - offset - child.border, head - offset - child.border, root, force);\n    }\n\n    offset = end;\n  }\n\n  var anchorDOM = this.domFromPos(anchor),\n      headDOM = this.domFromPos(head);\n  var domSel = root.getSelection(),\n      range = document.createRange();\n\n  if (!force && isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset) && isEquivalentPosition(headDOM.node, headDOM.offset, domSel.focusNode, domSel.focusOffset)) {\n    return;\n  } // Selection.extend can be used to create an 'inverted' selection\n  // (one where the focus is before the anchor), but not all\n  // browsers support it yet.\n\n\n  if (domSel.extend) {\n    range.setEnd(anchorDOM.node, anchorDOM.offset);\n    range.collapse(false);\n  } else {\n    if (anchor > head) {\n      var tmp = anchorDOM;\n      anchorDOM = headDOM;\n      headDOM = tmp;\n    }\n\n    range.setEnd(headDOM.node, headDOM.offset);\n    range.setStart(anchorDOM.node, anchorDOM.offset);\n  }\n\n  domSel.removeAllRanges();\n  domSel.addRange(range);\n\n  if (domSel.extend) {\n    domSel.extend(headDOM.node, headDOM.offset);\n  }\n}; // : (dom.MutationRecord) → bool\n\n\nViewDesc.prototype.ignoreMutation = function ignoreMutation(_mutation) {\n  return !this.contentDOM;\n};\n\nprototypeAccessors$1.contentLost.get = function () {\n  return this.contentDOM && this.contentDOM != this.dom && !this.dom.contains(this.contentDOM);\n}; // Remove a subtree of the element tree that has been touched\n// by a DOM change, so that the next update will redraw it.\n\n\nViewDesc.prototype.markDirty = function markDirty(from, to) {\n  var this$1 = this;\n\n  for (var offset = 0, i = 0; i < this.children.length; i++) {\n    var child = this$1.children[i],\n        end = offset + child.size;\n\n    if (offset == end ? from <= end && to >= offset : from < end && to > offset) {\n      var startInside = offset + child.border,\n          endInside = end - child.border;\n\n      if (from >= startInside && to <= endInside) {\n        this$1.dirty = from == offset || to == end ? CONTENT_DIRTY : CHILD_DIRTY;\n\n        if (from == startInside && to == endInside && child.contentLost) {\n          child.dirty = NODE_DIRTY;\n        } else {\n          child.markDirty(from - startInside, to - startInside);\n        }\n\n        return;\n      } else {\n        child.dirty = NODE_DIRTY;\n      }\n    }\n\n    offset = end;\n  }\n\n  this.dirty = CONTENT_DIRTY;\n};\n\nObject.defineProperties(ViewDesc.prototype, prototypeAccessors$1); // Reused array to avoid allocating fresh arrays for things that will\n// stay empty anyway.\n\nvar nothing = []; // A widget desc represents a widget decoration, which is a DOM node\n// drawn between the document nodes.\n\nvar WidgetViewDesc = function (ViewDesc) {\n  function WidgetViewDesc(parent, widget, view, pos) {\n    var self,\n        dom = widget.type.toDOM;\n\n    if (typeof dom == \"function\") {\n      dom = dom(view, function () {\n        if (!self) {\n          return pos;\n        }\n\n        if (self.parent) {\n          return self.parent.posBeforeChild(self);\n        }\n      });\n    }\n\n    if (!widget.type.spec.raw) {\n      if (dom.nodeType != 1) {\n        var wrap = document.createElement(\"span\");\n        wrap.appendChild(dom);\n        dom = wrap;\n      }\n\n      dom.contentEditable = false;\n      dom.classList.add(\"ProseMirror-widget\");\n    }\n\n    ViewDesc.call(this, parent, nothing, dom, null);\n    this.widget = widget;\n    self = this;\n  }\n\n  if (ViewDesc) WidgetViewDesc.__proto__ = ViewDesc;\n  WidgetViewDesc.prototype = Object.create(ViewDesc && ViewDesc.prototype);\n  WidgetViewDesc.prototype.constructor = WidgetViewDesc;\n  var prototypeAccessors$1 = {\n    beforePosition: {}\n  };\n\n  prototypeAccessors$1.beforePosition.get = function () {\n    return this.widget.type.side < 0;\n  };\n\n  WidgetViewDesc.prototype.matchesWidget = function matchesWidget(widget) {\n    return this.dirty == NOT_DIRTY && widget.type.eq(this.widget.type);\n  };\n\n  WidgetViewDesc.prototype.parseRule = function parseRule() {\n    return {\n      ignore: true\n    };\n  };\n\n  WidgetViewDesc.prototype.stopEvent = function stopEvent(event) {\n    var stop = this.widget.spec.stopEvent;\n    return stop ? stop(event) : false;\n  };\n\n  Object.defineProperties(WidgetViewDesc.prototype, prototypeAccessors$1);\n  return WidgetViewDesc;\n}(ViewDesc); // A cursor wrapper is used to put the cursor in when newly typed text\n// needs to be styled differently from its surrounding text (for\n// example through storedMarks), so that the style of the text doesn't\n// visually 'pop' between typing it and actually updating the view.\n\n\nvar CursorWrapperDesc = function (WidgetViewDesc) {\n  function CursorWrapperDesc() {\n    WidgetViewDesc.apply(this, arguments);\n  }\n\n  if (WidgetViewDesc) CursorWrapperDesc.__proto__ = WidgetViewDesc;\n  CursorWrapperDesc.prototype = Object.create(WidgetViewDesc && WidgetViewDesc.prototype);\n  CursorWrapperDesc.prototype.constructor = CursorWrapperDesc;\n\n  CursorWrapperDesc.prototype.parseRule = function parseRule() {\n    var content;\n\n    for (var child = this.dom.firstChild; child; child = child.nextSibling) {\n      var add = void 0;\n\n      if (child.nodeType == 3) {\n        var text = child.nodeValue.replace(/\\ufeff/g, \"\");\n\n        if (!text) {\n          continue;\n        }\n\n        add = document.createTextNode(text);\n      } else if (child.textContent == \"\\ufeff\") {\n        continue;\n      } else {\n        add = child.cloneNode(true);\n      }\n\n      if (!content) {\n        content = document.createDocumentFragment();\n      }\n\n      content.appendChild(add);\n    }\n\n    if (content) {\n      return {\n        skip: content\n      };\n    } else {\n      return WidgetViewDesc.prototype.parseRule.call(this);\n    }\n  };\n\n  CursorWrapperDesc.prototype.ignoreMutation = function ignoreMutation() {\n    return false;\n  };\n\n  return CursorWrapperDesc;\n}(WidgetViewDesc); // A mark desc represents a mark. May have multiple children,\n// depending on how the mark is split. Note that marks are drawn using\n// a fixed nesting order, for simplicity and predictability, so in\n// some cases they will be split more often than would appear\n// necessary.\n\n\nvar MarkViewDesc = function (ViewDesc) {\n  function MarkViewDesc(parent, mark, dom, contentDOM) {\n    ViewDesc.call(this, parent, [], dom, contentDOM);\n    this.mark = mark;\n  }\n\n  if (ViewDesc) MarkViewDesc.__proto__ = ViewDesc;\n  MarkViewDesc.prototype = Object.create(ViewDesc && ViewDesc.prototype);\n  MarkViewDesc.prototype.constructor = MarkViewDesc;\n\n  MarkViewDesc.create = function create(parent, mark, inline, view) {\n    var custom = view.nodeViews[mark.type.name];\n    var spec = custom && custom(mark, view, inline);\n\n    if (!spec || !spec.dom) {\n      spec = prosemirrorModel.DOMSerializer.renderSpec(document, mark.type.spec.toDOM(mark, inline));\n    }\n\n    return new MarkViewDesc(parent, mark, spec.dom, spec.contentDOM || spec.dom);\n  };\n\n  MarkViewDesc.prototype.parseRule = function parseRule() {\n    return {\n      mark: this.mark.type.name,\n      attrs: this.mark.attrs,\n      contentElement: this.contentDOM\n    };\n  };\n\n  MarkViewDesc.prototype.matchesMark = function matchesMark(mark) {\n    return this.dirty != NODE_DIRTY && this.mark.eq(mark);\n  };\n\n  MarkViewDesc.prototype.markDirty = function markDirty(from, to) {\n    ViewDesc.prototype.markDirty.call(this, from, to); // Move dirty info to nearest node view\n\n    if (this.dirty != NOT_DIRTY) {\n      var parent = this.parent;\n\n      while (!parent.node) {\n        parent = parent.parent;\n      }\n\n      if (parent.dirty < this.dirty) {\n        parent.dirty = this.dirty;\n      }\n\n      this.dirty = NOT_DIRTY;\n    }\n  };\n\n  return MarkViewDesc;\n}(ViewDesc); // Node view descs are the main, most common type of view desc, and\n// correspond to an actual node in the document. Unlike mark descs,\n// they populate their child array themselves.\n\n\nvar NodeViewDesc = function (ViewDesc) {\n  function NodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos) {\n    ViewDesc.call(this, parent, node.isLeaf ? nothing : [], dom, contentDOM);\n    this.nodeDOM = nodeDOM;\n    this.node = node;\n    this.outerDeco = outerDeco;\n    this.innerDeco = innerDeco;\n\n    if (contentDOM) {\n      this.updateChildren(view, pos);\n    }\n  }\n\n  if (ViewDesc) NodeViewDesc.__proto__ = ViewDesc;\n  NodeViewDesc.prototype = Object.create(ViewDesc && ViewDesc.prototype);\n  NodeViewDesc.prototype.constructor = NodeViewDesc;\n  var prototypeAccessors$2 = {\n    size: {},\n    border: {}\n  }; // By default, a node is rendered using the `toDOM` method from the\n  // node type spec. But client code can use the `nodeViews` spec to\n  // supply a custom node view, which can influence various aspects of\n  // the way the node works.\n  //\n  // (Using subclassing for this was intentionally decided against,\n  // since it'd require exposing a whole slew of finnicky\n  // implementation details to the user code that they probably will\n  // never need.)\n\n  NodeViewDesc.create = function create(parent, node, outerDeco, innerDeco, view, pos) {\n    var custom = view.nodeViews[node.type.name],\n        descObj;\n    var spec = custom && custom(node, view, function () {\n      // (This is a function that allows the custom view to find its\n      // own position)\n      if (!descObj) {\n        return pos;\n      }\n\n      if (descObj.parent) {\n        return descObj.parent.posBeforeChild(descObj);\n      }\n    }, outerDeco);\n    var dom = spec && spec.dom,\n        contentDOM = spec && spec.contentDOM;\n\n    if (node.isText) {\n      if (!dom) {\n        dom = document.createTextNode(node.text);\n      } else if (dom.nodeType != 3) {\n        throw new RangeError(\"Text must be rendered as a DOM text node\");\n      }\n    } else if (!dom) {\n      var assign;\n      assign = prosemirrorModel.DOMSerializer.renderSpec(document, node.type.spec.toDOM(node)), dom = assign.dom, contentDOM = assign.contentDOM;\n    }\n\n    if (!contentDOM && !node.isText && dom.nodeName != \"BR\") {\n      // Chrome gets confused by <br contenteditable=false>\n      if (!dom.hasAttribute(\"contenteditable\")) {\n        dom.contentEditable = false;\n      }\n\n      if (node.type.spec.draggable) {\n        dom.draggable = true;\n      }\n    }\n\n    var nodeDOM = dom;\n    dom = applyOuterDeco(dom, outerDeco, node);\n\n    if (spec) {\n      return descObj = new CustomNodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, spec, view, pos + 1);\n    } else if (node.isText) {\n      return new TextViewDesc(parent, node, outerDeco, innerDeco, dom, nodeDOM, view);\n    } else {\n      return new NodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos + 1);\n    }\n  };\n\n  NodeViewDesc.prototype.parseRule = function parseRule() {\n    var this$1 = this; // Experimental kludge to allow opt-in re-parsing of nodes\n\n    if (this.node.type.spec.reparseInView) {\n      return null;\n    } // FIXME the assumption that this can always return the current\n    // attrs means that if the user somehow manages to change the\n    // attrs in the dom, that won't be picked up. Not entirely sure\n    // whether this is a problem\n\n\n    var rule = {\n      node: this.node.type.name,\n      attrs: this.node.attrs\n    };\n\n    if (this.node.type.spec.code) {\n      rule.preserveWhitespace = \"full\";\n    }\n\n    if (this.contentDOM && !this.contentLost) {\n      rule.contentElement = this.contentDOM;\n    } else {\n      rule.getContent = function () {\n        return this$1.contentDOM ? prosemirrorModel.Fragment.empty : this$1.node.content;\n      };\n    }\n\n    return rule;\n  };\n\n  NodeViewDesc.prototype.matchesNode = function matchesNode(node, outerDeco, innerDeco) {\n    return this.dirty == NOT_DIRTY && node.eq(this.node) && sameOuterDeco(outerDeco, this.outerDeco) && innerDeco.eq(this.innerDeco);\n  };\n\n  prototypeAccessors$2.size.get = function () {\n    return this.node.nodeSize;\n  };\n\n  prototypeAccessors$2.border.get = function () {\n    return this.node.isLeaf ? 0 : 1;\n  }; // Syncs `this.children` to match `this.node.content` and the local\n  // decorations, possibly introducing nesting for marks. Then, in a\n  // separate step, syncs the DOM inside `this.contentDOM` to\n  // `this.children`.\n\n\n  NodeViewDesc.prototype.updateChildren = function updateChildren(view, pos) {\n    var this$1 = this;\n    var updater = new ViewTreeUpdater(this),\n        inline = this.node.inlineContent;\n    iterDeco(this.node, this.innerDeco, function (widget, i) {\n      if (widget.spec.marks) {\n        updater.syncToMarks(widget.spec.marks, inline, view);\n      } else if (widget.type.side >= 0) {\n        updater.syncToMarks(i == this$1.node.childCount ? prosemirrorModel.Mark.none : this$1.node.child(i).marks, inline, view);\n      } // If the next node is a desc matching this widget, reuse it,\n      // otherwise insert the widget as a new view desc.\n\n\n      updater.placeWidget(widget, view, pos);\n    }, function (child, outerDeco, innerDeco, i) {\n      // Make sure the wrapping mark descs match the node's marks.\n      updater.syncToMarks(child.marks, inline, view); // Either find an existing desc that exactly matches this node,\n      // and drop the descs before it.\n\n      updater.findNodeMatch(child, outerDeco, innerDeco, i) || // Or try updating the next desc to reflect this node.\n      updater.updateNextNode(child, outerDeco, innerDeco, view, i) || // Or just add it as a new desc.\n      updater.addNode(child, outerDeco, innerDeco, view, pos);\n      pos += child.nodeSize;\n    }); // Drop all remaining descs after the current position.\n\n    updater.syncToMarks(nothing, inline, view);\n\n    if (this.node.isTextblock) {\n      updater.addTextblockHacks();\n    }\n\n    updater.destroyRest(); // Sync the DOM if anything changed\n\n    if (updater.changed || this.dirty == CONTENT_DIRTY) {\n      this.renderChildren();\n    }\n  };\n\n  NodeViewDesc.prototype.renderChildren = function renderChildren() {\n    renderDescs(this.contentDOM, this.children, NodeViewDesc.is);\n\n    if (result.ios) {\n      iosHacks(this.dom);\n    }\n  }; // : (Node, [Decoration], DecorationSet, EditorView) → bool\n  // If this desc be updated to match the given node decoration,\n  // do so and return true.\n\n\n  NodeViewDesc.prototype.update = function update(node, outerDeco, innerDeco, view) {\n    if (this.dirty == NODE_DIRTY || !node.sameMarkup(this.node)) {\n      return false;\n    }\n\n    this.updateInner(node, outerDeco, innerDeco, view);\n    return true;\n  };\n\n  NodeViewDesc.prototype.updateInner = function updateInner(node, outerDeco, innerDeco, view) {\n    this.updateOuterDeco(outerDeco);\n    this.node = node;\n    this.innerDeco = innerDeco;\n\n    if (this.contentDOM) {\n      this.updateChildren(view, this.posAtStart);\n    }\n\n    this.dirty = NOT_DIRTY;\n  };\n\n  NodeViewDesc.prototype.updateOuterDeco = function updateOuterDeco(outerDeco) {\n    if (sameOuterDeco(outerDeco, this.outerDeco)) {\n      return;\n    }\n\n    var needsWrap = this.nodeDOM.nodeType != 1;\n    var oldDOM = this.dom;\n    this.dom = patchOuterDeco(this.dom, this.nodeDOM, computeOuterDeco(this.outerDeco, this.node, needsWrap), computeOuterDeco(outerDeco, this.node, needsWrap));\n\n    if (this.dom != oldDOM) {\n      oldDOM.pmViewDesc = null;\n      this.dom.pmViewDesc = this;\n    }\n\n    this.outerDeco = outerDeco;\n  }; // Mark this node as being the selected node.\n\n\n  NodeViewDesc.prototype.selectNode = function selectNode() {\n    this.nodeDOM.classList.add(\"ProseMirror-selectednode\");\n\n    if (this.contentDOM || !this.node.type.spec.draggable) {\n      this.dom.draggable = true;\n    }\n  }; // Remove selected node marking from this node.\n\n\n  NodeViewDesc.prototype.deselectNode = function deselectNode() {\n    this.nodeDOM.classList.remove(\"ProseMirror-selectednode\");\n\n    if (this.contentDOM || !this.node.type.spec.draggable) {\n      this.dom.draggable = false;\n    }\n  };\n\n  Object.defineProperties(NodeViewDesc.prototype, prototypeAccessors$2);\n  return NodeViewDesc;\n}(ViewDesc); // Create a view desc for the top-level document node, to be exported\n// and used by the view class.\n\n\nfunction docViewDesc(doc, outerDeco, innerDeco, dom, view) {\n  applyOuterDeco(dom, outerDeco, doc);\n  return new NodeViewDesc(null, doc, outerDeco, innerDeco, dom, dom, dom, view, 0);\n}\n\nvar TextViewDesc = function (NodeViewDesc) {\n  function TextViewDesc(parent, node, outerDeco, innerDeco, dom, nodeDOM, view) {\n    NodeViewDesc.call(this, parent, node, outerDeco, innerDeco, dom, null, nodeDOM, view);\n  }\n\n  if (NodeViewDesc) TextViewDesc.__proto__ = NodeViewDesc;\n  TextViewDesc.prototype = Object.create(NodeViewDesc && NodeViewDesc.prototype);\n  TextViewDesc.prototype.constructor = TextViewDesc;\n\n  TextViewDesc.prototype.parseRule = function parseRule() {\n    var parent = this.nodeDOM.parentNode;\n    return parent ? {\n      skip: parent\n    } : {\n      ignore: true\n    };\n  };\n\n  TextViewDesc.prototype.update = function update(node, outerDeco) {\n    if (this.dirty == NODE_DIRTY || this.dirty != NOT_DIRTY && !this.inParent() || !node.sameMarkup(this.node)) {\n      return false;\n    }\n\n    this.updateOuterDeco(outerDeco);\n\n    if ((this.dirty != NOT_DIRTY || node.text != this.node.text) && node.text != this.nodeDOM.nodeValue) {\n      this.nodeDOM.nodeValue = node.text;\n    }\n\n    this.node = node;\n    this.dirty = NOT_DIRTY;\n    return true;\n  };\n\n  TextViewDesc.prototype.inParent = function inParent() {\n    var parentDOM = this.parent.contentDOM;\n\n    for (var n = this.nodeDOM; n; n = n.parentNode) {\n      if (n == parentDOM) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  TextViewDesc.prototype.domFromPos = function domFromPos(pos) {\n    return {\n      node: this.nodeDOM,\n      offset: pos\n    };\n  };\n\n  TextViewDesc.prototype.localPosFromDOM = function localPosFromDOM(dom, offset, bias) {\n    if (dom == this.nodeDOM) {\n      return this.posAtStart + Math.min(offset, this.node.text.length);\n    }\n\n    return NodeViewDesc.prototype.localPosFromDOM.call(this, dom, offset, bias);\n  };\n\n  TextViewDesc.prototype.ignoreMutation = function ignoreMutation(mutation) {\n    return mutation.type != \"characterData\";\n  };\n\n  return TextViewDesc;\n}(NodeViewDesc); // A dummy desc used to tag trailing BR or span nodes created to work\n// around contentEditable terribleness.\n\n\nvar BRHackViewDesc = function (ViewDesc) {\n  function BRHackViewDesc() {\n    ViewDesc.apply(this, arguments);\n  }\n\n  if (ViewDesc) BRHackViewDesc.__proto__ = ViewDesc;\n  BRHackViewDesc.prototype = Object.create(ViewDesc && ViewDesc.prototype);\n  BRHackViewDesc.prototype.constructor = BRHackViewDesc;\n\n  BRHackViewDesc.prototype.parseRule = function parseRule() {\n    return {\n      ignore: true\n    };\n  };\n\n  BRHackViewDesc.prototype.matchesHack = function matchesHack() {\n    return this.dirty == NOT_DIRTY;\n  };\n\n  return BRHackViewDesc;\n}(ViewDesc); // A separate subclass is used for customized node views, so that the\n// extra checks only have to be made for nodes that are actually\n// customized.\n\n\nvar CustomNodeViewDesc = function (NodeViewDesc) {\n  function CustomNodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, spec, view, pos) {\n    NodeViewDesc.call(this, parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos);\n    this.spec = spec;\n  }\n\n  if (NodeViewDesc) CustomNodeViewDesc.__proto__ = NodeViewDesc;\n  CustomNodeViewDesc.prototype = Object.create(NodeViewDesc && NodeViewDesc.prototype);\n  CustomNodeViewDesc.prototype.constructor = CustomNodeViewDesc; // A custom `update` method gets to decide whether the update goes\n  // through. If it does, and there's a `contentDOM` node, our logic\n  // updates the children.\n\n  CustomNodeViewDesc.prototype.update = function update(node, outerDeco, innerDeco, view) {\n    if (this.dirty == NODE_DIRTY) {\n      return false;\n    }\n\n    if (this.spec.update) {\n      var result$$1 = this.spec.update(node, outerDeco);\n\n      if (result$$1) {\n        this.updateInner(node, outerDeco, innerDeco, view);\n      }\n\n      return result$$1;\n    } else if (!this.contentDOM && !node.isLeaf) {\n      return false;\n    } else {\n      return NodeViewDesc.prototype.update.call(this, node, outerDeco, innerDeco, view);\n    }\n  };\n\n  CustomNodeViewDesc.prototype.selectNode = function selectNode() {\n    this.spec.selectNode ? this.spec.selectNode() : NodeViewDesc.prototype.selectNode.call(this);\n  };\n\n  CustomNodeViewDesc.prototype.deselectNode = function deselectNode() {\n    this.spec.deselectNode ? this.spec.deselectNode() : NodeViewDesc.prototype.deselectNode.call(this);\n  };\n\n  CustomNodeViewDesc.prototype.setSelection = function setSelection(anchor, head, root, force) {\n    this.spec.setSelection ? this.spec.setSelection(anchor, head, root) : NodeViewDesc.prototype.setSelection.call(this, anchor, head, root, force);\n  };\n\n  CustomNodeViewDesc.prototype.destroy = function destroy() {\n    if (this.spec.destroy) {\n      this.spec.destroy();\n    }\n\n    NodeViewDesc.prototype.destroy.call(this);\n  };\n\n  CustomNodeViewDesc.prototype.stopEvent = function stopEvent(event) {\n    return this.spec.stopEvent ? this.spec.stopEvent(event) : false;\n  };\n\n  CustomNodeViewDesc.prototype.ignoreMutation = function ignoreMutation(mutation) {\n    return this.spec.ignoreMutation ? this.spec.ignoreMutation(mutation) : NodeViewDesc.prototype.ignoreMutation.call(this, mutation);\n  };\n\n  return CustomNodeViewDesc;\n}(NodeViewDesc); // : (dom.Node, [ViewDesc])\n// Sync the content of the given DOM node with the nodes associated\n// with the given array of view descs, recursing into mark descs\n// because this should sync the subtree for a whole node at a time.\n\n\nfunction renderDescs(parentDOM, descs) {\n  var dom = parentDOM.firstChild;\n\n  for (var i = 0; i < descs.length; i++) {\n    var desc = descs[i],\n        childDOM = desc.dom;\n\n    if (childDOM.parentNode == parentDOM) {\n      while (childDOM != dom) {\n        dom = rm(dom);\n      }\n\n      dom = dom.nextSibling;\n    } else {\n      parentDOM.insertBefore(childDOM, dom);\n    }\n\n    if (desc instanceof MarkViewDesc) {\n      var pos = dom ? dom.previousSibling : parentDOM.lastChild;\n      renderDescs(desc.contentDOM, desc.children);\n      dom = pos ? pos.nextSibling : parentDOM.firstChild;\n    }\n  }\n\n  while (dom) {\n    dom = rm(dom);\n  }\n}\n\nfunction OuterDecoLevel(nodeName) {\n  if (nodeName) {\n    this.nodeName = nodeName;\n  }\n}\n\nOuterDecoLevel.prototype = Object.create(null);\nvar noDeco = [new OuterDecoLevel()];\n\nfunction computeOuterDeco(outerDeco, node, needsWrap) {\n  if (outerDeco.length == 0) {\n    return noDeco;\n  }\n\n  var top = needsWrap ? noDeco[0] : new OuterDecoLevel(),\n      result$$1 = [top];\n\n  for (var i = 0; i < outerDeco.length; i++) {\n    var attrs = outerDeco[i].type.attrs,\n        cur = top;\n\n    if (!attrs) {\n      continue;\n    }\n\n    if (attrs.nodeName) {\n      result$$1.push(cur = new OuterDecoLevel(attrs.nodeName));\n    }\n\n    for (var name in attrs) {\n      var val = attrs[name];\n\n      if (val == null) {\n        continue;\n      }\n\n      if (needsWrap && result$$1.length == 1) {\n        result$$1.push(cur = top = new OuterDecoLevel(node.isInline ? \"span\" : \"div\"));\n      }\n\n      if (name == \"class\") {\n        cur.class = (cur.class ? cur.class + \" \" : \"\") + val;\n      } else if (name == \"style\") {\n        cur.style = (cur.style ? cur.style + \";\" : \"\") + val;\n      } else if (name != \"nodeName\") {\n        cur[name] = val;\n      }\n    }\n  }\n\n  return result$$1;\n}\n\nfunction patchOuterDeco(outerDOM, nodeDOM, prevComputed, curComputed) {\n  // Shortcut for trivial case\n  if (prevComputed == noDeco && curComputed == noDeco) {\n    return nodeDOM;\n  }\n\n  var curDOM = nodeDOM;\n\n  for (var i = 0; i < curComputed.length; i++) {\n    var deco = curComputed[i],\n        prev = prevComputed[i];\n\n    if (i) {\n      var parent = void 0;\n\n      if (prev && prev.nodeName == deco.nodeName && curDOM != outerDOM && (parent = nodeDOM.parentNode) && parent.tagName.toLowerCase() == deco.nodeName) {\n        curDOM = parent;\n      } else {\n        parent = document.createElement(deco.nodeName);\n        parent.appendChild(curDOM);\n        curDOM = parent;\n      }\n    }\n\n    patchAttributes(curDOM, prev || noDeco[0], deco);\n  }\n\n  return curDOM;\n}\n\nfunction patchAttributes(dom, prev, cur) {\n  for (var name in prev) {\n    if (name != \"class\" && name != \"style\" && name != \"nodeName\" && !(name in cur)) {\n      dom.removeAttribute(name);\n    }\n  }\n\n  for (var name$1 in cur) {\n    if (name$1 != \"class\" && name$1 != \"style\" && name$1 != \"nodeName\" && cur[name$1] != prev[name$1]) {\n      dom.setAttribute(name$1, cur[name$1]);\n    }\n  }\n\n  if (prev.class != cur.class) {\n    var prevList = prev.class ? prev.class.split(\" \") : nothing;\n    var curList = cur.class ? cur.class.split(\" \") : nothing;\n\n    for (var i = 0; i < prevList.length; i++) {\n      if (curList.indexOf(prevList[i]) == -1) {\n        dom.classList.remove(prevList[i]);\n      }\n    }\n\n    for (var i$1 = 0; i$1 < curList.length; i$1++) {\n      if (prevList.indexOf(curList[i$1]) == -1) {\n        dom.classList.add(curList[i$1]);\n      }\n    }\n  }\n\n  if (prev.style != cur.style) {\n    if (prev.style) {\n      var prop = /\\s*([\\w\\-\\xa1-\\uffff]+)\\s*:(?:\"(?:\\\\.|[^\"])*\"|'(?:\\\\.|[^'])*'|\\(.*?\\)|[^;])*/g,\n          m;\n\n      while (m = prop.exec(prev.style)) {\n        dom.style[m[1].toLowerCase()] = \"\";\n      }\n    }\n\n    if (cur.style) {\n      dom.style.cssText += cur.style;\n    }\n  }\n}\n\nfunction applyOuterDeco(dom, deco, node) {\n  return patchOuterDeco(dom, dom, noDeco, computeOuterDeco(deco, node, dom.nodeType != 1));\n} // : ([Decoration], [Decoration]) → bool\n\n\nfunction sameOuterDeco(a, b) {\n  if (a.length != b.length) {\n    return false;\n  }\n\n  for (var i = 0; i < a.length; i++) {\n    if (!a[i].type.eq(b[i].type)) {\n      return false;\n    }\n  }\n\n  return true;\n} // Remove a DOM node and return its next sibling.\n\n\nfunction rm(dom) {\n  var next = dom.nextSibling;\n  dom.parentNode.removeChild(dom);\n  return next;\n} // Helper class for incrementally updating a tree of mark descs and\n// the widget and node descs inside of them.\n\n\nvar ViewTreeUpdater = function ViewTreeUpdater(top) {\n  this.top = top; // Index into `this.top`'s child array, represents the current\n  // update position.\n\n  this.index = 0; // When entering a mark, the current top and index are pushed\n  // onto this.\n\n  this.stack = []; // Tracks whether anything was changed\n\n  this.changed = false;\n  this.preMatched = preMatch(top.node.content, top.children);\n}; // Destroy and remove the children between the given indices in\n// `this.top`.\n\n\nViewTreeUpdater.prototype.destroyBetween = function destroyBetween(start, end) {\n  var this$1 = this;\n\n  if (start == end) {\n    return;\n  }\n\n  for (var i = start; i < end; i++) {\n    this$1.top.children[i].destroy();\n  }\n\n  this.top.children.splice(start, end - start);\n  this.changed = true;\n}; // Destroy all remaining children in `this.top`.\n\n\nViewTreeUpdater.prototype.destroyRest = function destroyRest() {\n  this.destroyBetween(this.index, this.top.children.length);\n}; // : ([Mark], EditorView)\n// Sync the current stack of mark descs with the given array of\n// marks, reusing existing mark descs when possible.\n\n\nViewTreeUpdater.prototype.syncToMarks = function syncToMarks(marks, inline, view) {\n  var this$1 = this;\n  var keep = 0,\n      depth = this.stack.length >> 1;\n  var maxKeep = Math.min(depth, marks.length);\n\n  while (keep < maxKeep && (keep == depth - 1 ? this.top : this.stack[keep + 1 << 1]).matchesMark(marks[keep]) && marks[keep].type.spec.spanning !== false) {\n    keep++;\n  }\n\n  while (keep < depth) {\n    this$1.destroyRest();\n    this$1.top.dirty = NOT_DIRTY;\n    this$1.index = this$1.stack.pop();\n    this$1.top = this$1.stack.pop();\n    depth--;\n  }\n\n  while (depth < marks.length) {\n    this$1.stack.push(this$1.top, this$1.index + 1);\n    var found = -1;\n\n    for (var i = this.index; i < Math.min(this.index + 3, this.top.children.length); i++) {\n      if (this$1.top.children[i].matchesMark(marks[depth])) {\n        found = i;\n        break;\n      }\n    }\n\n    if (found > -1) {\n      if (found > this$1.index) {\n        this$1.changed = true;\n        this$1.top.children.splice(this$1.index, found - this$1.index);\n      }\n\n      this$1.top = this$1.top.children[this$1.index];\n    } else {\n      var markDesc = MarkViewDesc.create(this$1.top, marks[depth], inline, view);\n      this$1.top.children.splice(this$1.index, 0, markDesc);\n      this$1.top = markDesc;\n      this$1.changed = true;\n    }\n\n    this$1.index = 0;\n    depth++;\n  }\n}; // : (Node, [Decoration], DecorationSet) → bool\n// Try to find a node desc matching the given data. Skip over it and\n// return true when successful.\n\n\nViewTreeUpdater.prototype.findNodeMatch = function findNodeMatch(node, outerDeco, innerDeco, index) {\n  var this$1 = this;\n  var found = -1,\n      preMatch = index < 0 ? undefined : this.preMatched[index],\n      children = this.top.children;\n\n  if (preMatch && preMatch.matchesNode(node, outerDeco, innerDeco)) {\n    found = children.indexOf(preMatch);\n  } else {\n    for (var i = this.index, e = Math.min(children.length, i + 5); i < e; i++) {\n      var child = children[i];\n\n      if (child.matchesNode(node, outerDeco, innerDeco) && this$1.preMatched.indexOf(child) < 0) {\n        found = i;\n        break;\n      }\n    }\n  }\n\n  if (found < 0) {\n    return false;\n  }\n\n  this.destroyBetween(this.index, found);\n  this.index++;\n  return true;\n}; // : (Node, [Decoration], DecorationSet, EditorView, Fragment, number) → bool\n// Try to update the next node, if any, to the given data. Checks\n// pre-matches to avoid overwriting nodes that could still be used.\n\n\nViewTreeUpdater.prototype.updateNextNode = function updateNextNode(node, outerDeco, innerDeco, view, index) {\n  if (this.index == this.top.children.length) {\n    return false;\n  }\n\n  var next = this.top.children[this.index];\n\n  if (next instanceof NodeViewDesc) {\n    var preMatch = this.preMatched.indexOf(next);\n\n    if (preMatch > -1 && preMatch != index) {\n      return false;\n    }\n\n    var nextDOM = next.dom;\n\n    if (next.update(node, outerDeco, innerDeco, view)) {\n      if (next.dom != nextDOM) {\n        this.changed = true;\n      }\n\n      this.index++;\n      return true;\n    }\n  }\n\n  return false;\n}; // : (Node, [Decoration], DecorationSet, EditorView)\n// Insert the node as a newly created node desc.\n\n\nViewTreeUpdater.prototype.addNode = function addNode(node, outerDeco, innerDeco, view, pos) {\n  this.top.children.splice(this.index++, 0, NodeViewDesc.create(this.top, node, outerDeco, innerDeco, view, pos));\n  this.changed = true;\n};\n\nViewTreeUpdater.prototype.placeWidget = function placeWidget(widget, view, pos) {\n  if (this.index < this.top.children.length && this.top.children[this.index].matchesWidget(widget)) {\n    this.index++;\n  } else {\n    var desc = new (widget.spec.isCursorWrapper ? CursorWrapperDesc : WidgetViewDesc)(this.top, widget, view, pos);\n    this.top.children.splice(this.index++, 0, desc);\n    this.changed = true;\n  }\n}; // Make sure a textblock looks and behaves correctly in\n// contentEditable.\n\n\nViewTreeUpdater.prototype.addTextblockHacks = function addTextblockHacks() {\n  var lastChild = this.top.children[this.index - 1];\n\n  while (lastChild instanceof MarkViewDesc) {\n    lastChild = lastChild.children[lastChild.children.length - 1];\n  }\n\n  if (!lastChild || // Empty textblock\n  !(lastChild instanceof TextViewDesc) || /\\n$/.test(lastChild.node.text)) {\n    if (this.index < this.top.children.length && this.top.children[this.index].matchesHack()) {\n      this.index++;\n    } else {\n      var dom = document.createElement(\"br\");\n      this.top.children.splice(this.index++, 0, new BRHackViewDesc(this.top, nothing, dom, null));\n      this.changed = true;\n    }\n  }\n}; // : (Fragment, [ViewDesc]) → [ViewDesc]\n// Iterate from the end of the fragment and array of descs to find\n// directly matching ones, in order to avoid overeagerly reusing\n// those for other nodes. Returns an array whose positions correspond\n// to node positions in the fragment, and whose elements are either\n// descs matched to the child at that index, or empty.\n\n\nfunction preMatch(frag, descs) {\n  var result$$1 = [],\n      end = frag.childCount;\n\n  for (var i = descs.length - 1; end > 0 && i >= 0; i--) {\n    var desc = descs[i],\n        node = desc.node;\n\n    if (!node) {\n      continue;\n    }\n\n    if (node != frag.child(end - 1)) {\n      break;\n    }\n\n    result$$1[--end] = desc;\n  }\n\n  return result$$1;\n}\n\nfunction compareSide(a, b) {\n  return a.type.side - b.type.side;\n} // : (ViewDesc, DecorationSet, (Decoration), (Node, [Decoration], DecorationSet, number))\n// This function abstracts iterating over the nodes and decorations in\n// a fragment. Calls `onNode` for each node, with its local and child\n// decorations. Splits text nodes when there is a decoration starting\n// or ending inside of them. Calls `onWidget` for each widget.\n\n\nfunction iterDeco(parent, deco, onWidget, onNode) {\n  var locals = deco.locals(parent),\n      offset = 0; // Simple, cheap variant for when there are no local decorations\n\n  if (locals.length == 0) {\n    for (var i = 0; i < parent.childCount; i++) {\n      var child = parent.child(i);\n      onNode(child, locals, deco.forChild(offset, child), i);\n      offset += child.nodeSize;\n    }\n\n    return;\n  }\n\n  var decoIndex = 0,\n      active = [],\n      restNode = null;\n\n  for (var parentIndex = 0;;) {\n    if (decoIndex < locals.length && locals[decoIndex].to == offset) {\n      var widget = locals[decoIndex++],\n          widgets = void 0;\n\n      while (decoIndex < locals.length && locals[decoIndex].to == offset) {\n        (widgets || (widgets = [widget])).push(locals[decoIndex++]);\n      }\n\n      if (widgets) {\n        widgets.sort(compareSide);\n\n        for (var i$1 = 0; i$1 < widgets.length; i$1++) {\n          onWidget(widgets[i$1], parentIndex);\n        }\n      } else {\n        onWidget(widget, parentIndex);\n      }\n    }\n\n    var child$1 = void 0,\n        index = void 0;\n\n    if (restNode) {\n      index = -1;\n      child$1 = restNode;\n      restNode = null;\n    } else if (parentIndex < parent.childCount) {\n      index = parentIndex;\n      child$1 = parent.child(parentIndex++);\n    } else {\n      break;\n    }\n\n    for (var i$2 = 0; i$2 < active.length; i$2++) {\n      if (active[i$2].to <= offset) {\n        active.splice(i$2--, 1);\n      }\n    }\n\n    while (decoIndex < locals.length && locals[decoIndex].from == offset) {\n      active.push(locals[decoIndex++]);\n    }\n\n    var end = offset + child$1.nodeSize;\n\n    if (child$1.isText) {\n      var cutAt = end;\n\n      if (decoIndex < locals.length && locals[decoIndex].from < cutAt) {\n        cutAt = locals[decoIndex].from;\n      }\n\n      for (var i$3 = 0; i$3 < active.length; i$3++) {\n        if (active[i$3].to < cutAt) {\n          cutAt = active[i$3].to;\n        }\n      }\n\n      if (cutAt < end) {\n        restNode = child$1.cut(cutAt - offset);\n        child$1 = child$1.cut(0, cutAt - offset);\n        end = cutAt;\n        index = -1;\n      }\n    }\n\n    onNode(child$1, active.length ? active.slice() : nothing, deco.forChild(offset, child$1), index);\n    offset = end;\n  }\n} // List markers in Mobile Safari will mysteriously disappear\n// sometimes. This works around that.\n\n\nfunction iosHacks(dom) {\n  if (dom.nodeName == \"UL\" || dom.nodeName == \"OL\") {\n    var oldCSS = dom.style.cssText;\n    dom.style.cssText = oldCSS + \"; list-style: square !important\";\n    window.getComputedStyle(dom).listStyle;\n    dom.style.cssText = oldCSS;\n  }\n}\n\nfunction moveSelectionBlock(state, dir) {\n  var ref = state.selection;\n  var $anchor = ref.$anchor;\n  var $head = ref.$head;\n  var $side = dir > 0 ? $anchor.max($head) : $anchor.min($head);\n  var $start = !$side.parent.inlineContent ? $side : $side.depth ? state.doc.resolve(dir > 0 ? $side.after() : $side.before()) : null;\n  return $start && prosemirrorState.Selection.findFrom($start, dir);\n}\n\nfunction apply(view, sel) {\n  view.dispatch(view.state.tr.setSelection(sel).scrollIntoView());\n  return true;\n}\n\nfunction selectHorizontally(view, dir, mods) {\n  var sel = view.state.selection;\n\n  if (sel instanceof prosemirrorState.TextSelection) {\n    if (!sel.empty || mods.indexOf(\"s\") > -1) {\n      return false;\n    } else if (view.endOfTextblock(dir > 0 ? \"right\" : \"left\")) {\n      var next = moveSelectionBlock(view.state, dir);\n\n      if (next && next instanceof prosemirrorState.NodeSelection) {\n        return apply(view, next);\n      }\n\n      return false;\n    } else {\n      var $head = sel.$head,\n          node = $head.textOffset ? null : dir < 0 ? $head.nodeBefore : $head.nodeAfter,\n          desc;\n\n      if (node && prosemirrorState.NodeSelection.isSelectable(node)) {\n        var nodePos = dir < 0 ? $head.pos - node.nodeSize : $head.pos;\n\n        if (node.isAtom || (desc = view.docView.descAt(nodePos)) && !desc.contentDOM) {\n          return apply(view, new prosemirrorState.NodeSelection(dir < 0 ? view.state.doc.resolve($head.pos - node.nodeSize) : $head));\n        }\n      }\n\n      return false;\n    }\n  } else if (sel instanceof prosemirrorState.NodeSelection && sel.node.isInline) {\n    return apply(view, new prosemirrorState.TextSelection(dir > 0 ? sel.$to : sel.$from));\n  } else {\n    var next$1 = moveSelectionBlock(view.state, dir);\n\n    if (next$1) {\n      return apply(view, next$1);\n    }\n\n    return false;\n  }\n}\n\nfunction nodeLen(node) {\n  return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;\n}\n\nfunction isIgnorable(dom) {\n  var desc = dom.pmViewDesc;\n  return desc && desc.size == 0 && (dom.nextSibling || dom.nodeName != \"BR\");\n} // Make sure the cursor isn't directly after one or more ignored\n// nodes, which will confuse the browser's cursor motion logic.\n\n\nfunction skipIgnoredNodesLeft(view) {\n  var sel = view.root.getSelection();\n  var node = sel.focusNode,\n      offset = sel.focusOffset;\n\n  if (!node) {\n    return;\n  }\n\n  var moveNode,\n      moveOffset,\n      force = false; // Gecko will do odd things when the selection is directly in front\n  // of a non-editable node, so in that case, move it into the next\n  // node if possible. Issue prosemirror/prosemirror#832.\n\n  if (result.gecko && node.nodeType == 1 && offset < nodeLen(node) && isIgnorable(node.childNodes[offset])) {\n    force = true;\n  }\n\n  for (;;) {\n    if (offset > 0) {\n      if (node.nodeType != 1) {\n        if (node.nodeType == 3 && node.nodeValue.charAt(offset - 1) == \"\\ufeff\") {\n          // IE11's cursor will still be stuck when placed at the\n          // beginning of the cursor wrapper text node (#807)\n          if (result.ie && result.ie_version <= 11) {\n            force = true;\n          }\n\n          moveNode = node;\n          moveOffset = --offset;\n        } else {\n          break;\n        }\n      } else {\n        var before = node.childNodes[offset - 1];\n\n        if (isIgnorable(before)) {\n          moveNode = node;\n          moveOffset = --offset;\n        } else if (before.nodeType == 3) {\n          node = before;\n          offset = node.nodeValue.length;\n        } else {\n          break;\n        }\n      }\n    } else if (isBlockNode(node)) {\n      break;\n    } else {\n      var prev = node.previousSibling;\n\n      while (prev && isIgnorable(prev)) {\n        moveNode = node.parentNode;\n        moveOffset = domIndex(prev);\n        prev = prev.previousSibling;\n      }\n\n      if (!prev) {\n        node = node.parentNode;\n\n        if (node == view.dom) {\n          break;\n        }\n\n        offset = 0;\n      } else {\n        node = prev;\n        offset = nodeLen(node);\n      }\n    }\n  }\n\n  if (force) {\n    setSelFocus(view, sel, node, offset);\n  } else if (moveNode) {\n    setSelFocus(view, sel, moveNode, moveOffset);\n  }\n} // Make sure the cursor isn't directly before one or more ignored\n// nodes.\n\n\nfunction skipIgnoredNodesRight(view) {\n  var sel = view.root.getSelection();\n  var node = sel.focusNode,\n      offset = sel.focusOffset;\n\n  if (!node) {\n    return;\n  }\n\n  var len = nodeLen(node);\n  var moveNode, moveOffset;\n\n  for (;;) {\n    if (offset < len) {\n      if (node.nodeType != 1) {\n        break;\n      }\n\n      var after = node.childNodes[offset];\n\n      if (isIgnorable(after)) {\n        moveNode = node;\n        moveOffset = ++offset;\n      } else {\n        break;\n      }\n    } else if (isBlockNode(node)) {\n      break;\n    } else {\n      var next = node.nextSibling;\n\n      while (next && isIgnorable(next)) {\n        moveNode = next.parentNode;\n        moveOffset = domIndex(next) + 1;\n        next = next.nextSibling;\n      }\n\n      if (!next) {\n        node = node.parentNode;\n\n        if (node == view.dom) {\n          break;\n        }\n\n        offset = len = 0;\n      } else {\n        node = next;\n        offset = 0;\n        len = nodeLen(node);\n      }\n    }\n  }\n\n  if (moveNode) {\n    setSelFocus(view, sel, moveNode, moveOffset);\n  }\n}\n\nfunction isBlockNode(dom) {\n  var desc = dom.pmViewDesc;\n  return desc && desc.node && desc.node.isBlock;\n}\n\nfunction setSelFocus(view, sel, node, offset) {\n  if (selectionCollapsed(sel)) {\n    var range = document.createRange();\n    range.setEnd(node, offset);\n    range.setStart(node, offset);\n    sel.removeAllRanges();\n    sel.addRange(range);\n  } else if (sel.extend) {\n    sel.extend(node, offset);\n  }\n\n  view.selectionReader.storeDOMState(view.selection);\n} // : (EditorState, number)\n// Check whether vertical selection motion would involve node\n// selections. If so, apply it (if not, the result is left to the\n// browser)\n\n\nfunction selectVertically(view, dir, mods) {\n  var sel = view.state.selection;\n\n  if (sel instanceof prosemirrorState.TextSelection && !sel.empty || mods.indexOf(\"s\") > -1) {\n    return false;\n  }\n\n  var $from = sel.$from;\n  var $to = sel.$to;\n\n  if (!$from.parent.inlineContent || view.endOfTextblock(dir < 0 ? \"up\" : \"down\")) {\n    var next = moveSelectionBlock(view.state, dir);\n\n    if (next && next instanceof prosemirrorState.NodeSelection) {\n      return apply(view, next);\n    }\n  }\n\n  if (!$from.parent.inlineContent) {\n    var beyond = prosemirrorState.Selection.findFrom(dir < 0 ? $from : $to, dir);\n    return beyond ? apply(view, beyond) : true;\n  }\n\n  return false;\n}\n\nfunction stopNativeHorizontalDelete(view, dir) {\n  if (!(view.state.selection instanceof prosemirrorState.TextSelection)) {\n    return true;\n  }\n\n  var ref = view.state.selection;\n  var $head = ref.$head;\n  var $anchor = ref.$anchor;\n  var empty = ref.empty;\n\n  if (!$head.sameParent($anchor)) {\n    return true;\n  }\n\n  if (!empty) {\n    return false;\n  }\n\n  if (view.endOfTextblock(dir > 0 ? \"forward\" : \"backward\")) {\n    return true;\n  }\n\n  var nextNode = !$head.textOffset && (dir < 0 ? $head.nodeBefore : $head.nodeAfter);\n\n  if (nextNode && !nextNode.isText) {\n    var tr = view.state.tr;\n\n    if (dir < 0) {\n      tr.delete($head.pos - nextNode.nodeSize, $head.pos);\n    } else {\n      tr.delete($head.pos, $head.pos + nextNode.nodeSize);\n    }\n\n    view.dispatch(tr);\n    return true;\n  }\n\n  return false;\n}\n\nfunction switchEditable(view, node, state) {\n  view.domObserver.stop();\n  node.contentEditable = state;\n  view.domObserver.start();\n} // Issue #867 / https://bugs.chromium.org/p/chromium/issues/detail?id=903821\n// In which Chrome does really wrong things when the down arrow is\n// pressed when the cursor is directly at the start of a textblock and\n// has an uneditable node after it\n\n\nfunction chromeDownArrowBug(view) {\n  if (!result.chrome || view.state.selection.$head.parentOffset > 0) {\n    return;\n  }\n\n  var ref = view.root.getSelection();\n  var focusNode = ref.focusNode;\n  var focusOffset = ref.focusOffset;\n\n  if (focusNode && focusNode.nodeType == 1 && focusOffset == 0 && focusNode.firstChild && focusNode.firstChild.contentEditable == \"false\") {\n    var child = focusNode.firstChild;\n    switchEditable(view, child, true);\n    setTimeout(function () {\n      return switchEditable(view, child, false);\n    }, 20);\n  }\n} // A backdrop key mapping used to make sure we always suppress keys\n// that have a dangerous default effect, even if the commands they are\n// bound to return false, and to make sure that cursor-motion keys\n// find a cursor (as opposed to a node selection) when pressed. For\n// cursor-motion keys, the code in the handlers also takes care of\n// block selections.\n\n\nfunction getMods(event) {\n  var result$$1 = \"\";\n\n  if (event.ctrlKey) {\n    result$$1 += \"c\";\n  }\n\n  if (event.metaKey) {\n    result$$1 += \"m\";\n  }\n\n  if (event.altKey) {\n    result$$1 += \"a\";\n  }\n\n  if (event.shiftKey) {\n    result$$1 += \"s\";\n  }\n\n  return result$$1;\n}\n\nfunction captureKeyDown(view, event) {\n  var code = event.keyCode,\n      mods = getMods(event);\n\n  if (code == 8 || result.mac && code == 72 && mods == \"c\") {\n    // Backspace, Ctrl-h on Mac\n    return stopNativeHorizontalDelete(view, -1) || skipIgnoredNodesLeft(view);\n  } else if (code == 46 || result.mac && code == 68 && mods == \"c\") {\n    // Delete, Ctrl-d on Mac\n    return stopNativeHorizontalDelete(view, 1) || skipIgnoredNodesRight(view);\n  } else if (code == 13 || code == 27) {\n    // Enter, Esc\n    return true;\n  } else if (code == 37) {\n    // Left arrow\n    return selectHorizontally(view, -1, mods) || skipIgnoredNodesLeft(view);\n  } else if (code == 39) {\n    // Right arrow\n    return selectHorizontally(view, 1, mods) || skipIgnoredNodesRight(view);\n  } else if (code == 38) {\n    // Up arrow\n    return selectVertically(view, -1, mods) || skipIgnoredNodesLeft(view);\n  } else if (code == 40) {\n    // Down arrow\n    return chromeDownArrowBug(view) || selectVertically(view, 1, mods) || skipIgnoredNodesRight(view);\n  } else if (mods == (result.mac ? \"m\" : \"c\") && (code == 66 || code == 73 || code == 89 || code == 90)) {\n    // Mod-[biyz]\n    return true;\n  }\n\n  return false;\n}\n\nvar TrackedRecord = function TrackedRecord(prev, mapping, state) {\n  this.prev = prev;\n  this.mapping = mapping;\n  this.state = state;\n};\n\nvar TrackMappings = function TrackMappings(state) {\n  this.seen = [new TrackedRecord(null, null, state)]; // Kludge to listen to state changes globally in order to be able\n  // to find mappings from a given state to another.\n\n  prosemirrorState.EditorState.addApplyListener(this.track = this.track.bind(this));\n};\n\nTrackMappings.prototype.destroy = function destroy() {\n  prosemirrorState.EditorState.removeApplyListener(this.track);\n};\n\nTrackMappings.prototype.find = function find(state) {\n  var this$1 = this;\n\n  for (var i = this.seen.length - 1; i >= 0; i--) {\n    var record = this$1.seen[i];\n\n    if (record.state == state) {\n      return record;\n    }\n  }\n};\n\nTrackMappings.prototype.track = function track(old, tr, state) {\n  var found = this.seen.length < 200 ? this.find(old) : null;\n\n  if (found) {\n    this.seen.push(new TrackedRecord(found, tr.docChanged ? tr.mapping : null, state));\n  }\n};\n\nTrackMappings.prototype.getMapping = function getMapping(state, appendTo) {\n  var found = this.find(state);\n\n  if (!found) {\n    return null;\n  }\n\n  var mappings = [];\n\n  for (var rec = found; rec; rec = rec.prev) {\n    if (rec.mapping) {\n      mappings.push(rec.mapping);\n    }\n  }\n\n  var result = appendTo || new prosemirrorTransform.Mapping();\n\n  for (var i = mappings.length - 1; i >= 0; i--) {\n    result.appendMapping(mappings[i]);\n  }\n\n  return result;\n}; // Track the state of the DOM selection, creating transactions to\n// update the selection state when necessary.\n\n\nvar SelectionReader = function SelectionReader(view) {\n  var this$1 = this;\n  this.view = view; // Track the state of the DOM selection.\n\n  this.lastAnchorNode = this.lastHeadNode = this.lastAnchorOffset = this.lastHeadOffset = null;\n  this.lastSelection = view.state.selection;\n  this.ignoreUpdates = false;\n  this.suppressUpdates = false;\n  this.poller = poller(this);\n\n  this.focusFunc = function () {\n    return this$1.poller.start(hasFocusAndSelection(this$1.view));\n  }.bind(this);\n\n  this.blurFunc = this.poller.stop;\n  view.dom.addEventListener(\"focus\", this.focusFunc);\n  view.dom.addEventListener(\"blur\", this.blurFunc);\n\n  if (!view.editable) {\n    this.poller.start(false);\n  }\n};\n\nSelectionReader.prototype.destroy = function destroy() {\n  this.view.dom.removeEventListener(\"focus\", this.focusFunc);\n  this.view.dom.removeEventListener(\"blur\", this.blurFunc);\n  this.poller.stop();\n};\n\nSelectionReader.prototype.poll = function poll(origin) {\n  this.poller.poll(origin);\n};\n\nSelectionReader.prototype.editableChanged = function editableChanged() {\n  if (!this.view.editable) {\n    this.poller.start();\n  } else if (!hasFocusAndSelection(this.view)) {\n    this.poller.stop();\n  }\n}; // : () → bool\n// Whether the DOM selection has changed from the last known state.\n\n\nSelectionReader.prototype.domChanged = function domChanged() {\n  var sel = this.view.root.getSelection();\n  return sel.anchorNode != this.lastAnchorNode || sel.anchorOffset != this.lastAnchorOffset || sel.focusNode != this.lastHeadNode || sel.focusOffset != this.lastHeadOffset;\n}; // Store the current state of the DOM selection.\n\n\nSelectionReader.prototype.storeDOMState = function storeDOMState(selection) {\n  var sel = this.view.root.getSelection();\n  this.lastAnchorNode = sel.anchorNode;\n  this.lastAnchorOffset = sel.anchorOffset;\n  this.lastHeadNode = sel.focusNode;\n  this.lastHeadOffset = sel.focusOffset;\n  this.lastSelection = selection;\n};\n\nSelectionReader.prototype.clearDOMState = function clearDOMState() {\n  this.lastAnchorNode = this.lastSelection = null;\n}; // : (?string)\n// When the DOM selection changes in a notable manner, modify the\n// current selection state to match.\n\n\nSelectionReader.prototype.readFromDOM = function readFromDOM(origin) {\n  if (this.ignoreUpdates || !this.domChanged() || !hasFocusAndSelection(this.view)) {\n    return;\n  }\n\n  if (this.suppressUpdates) {\n    return selectionToDOM(this.view);\n  }\n\n  if (!this.view.inDOMChange) {\n    this.view.domObserver.flush();\n  }\n\n  if (this.view.inDOMChange) {\n    return;\n  }\n\n  var domSel = this.view.root.getSelection(),\n      doc = this.view.state.doc;\n  var nearestDesc = this.view.docView.nearestDesc(domSel.focusNode),\n      inWidget = nearestDesc && nearestDesc.size == 0;\n  var head = this.view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);\n  var $head = doc.resolve(head),\n      $anchor,\n      selection;\n\n  if (selectionCollapsed(domSel)) {\n    $anchor = $head;\n\n    while (nearestDesc && !nearestDesc.node) {\n      nearestDesc = nearestDesc.parent;\n    }\n\n    if (nearestDesc && nearestDesc.node.isAtom && prosemirrorState.NodeSelection.isSelectable(nearestDesc.node) && nearestDesc.parent) {\n      var pos = nearestDesc.posBefore;\n      selection = new prosemirrorState.NodeSelection(head == pos ? $head : doc.resolve(pos));\n    }\n  } else {\n    $anchor = doc.resolve(this.view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset));\n  }\n\n  if (!selection) {\n    var bias = origin == \"pointer\" || this.view.state.selection.head < $head.pos && !inWidget ? 1 : -1;\n    selection = selectionBetween(this.view, $anchor, $head, bias);\n  }\n\n  if (!this.view.state.selection.eq(selection)) {\n    var tr = this.view.state.tr.setSelection(selection);\n\n    if (origin == \"pointer\") {\n      tr.setMeta(\"pointer\", true);\n    } else if (origin == \"key\") {\n      tr.scrollIntoView();\n    }\n\n    this.view.dispatch(tr);\n  } else {\n    selectionToDOM(this.view);\n  }\n}; // There's two polling models. On browsers that support the\n// selectionchange event (everything except Firefox < 52, basically), we\n// register a listener for that whenever the editor is focused.\n\n\nvar SelectionChangePoller = function SelectionChangePoller(reader) {\n  var this$1 = this;\n  this.listening = false;\n  this.curOrigin = null;\n  this.originTime = 0;\n  this.reader = reader;\n\n  this.readFunc = function () {\n    return reader.readFromDOM(this$1.originTime > Date.now() - 50 ? this$1.curOrigin : null);\n  };\n};\n\nSelectionChangePoller.prototype.poll = function poll(origin) {\n  this.curOrigin = origin;\n  this.originTime = Date.now();\n};\n\nSelectionChangePoller.prototype.start = function start(andRead) {\n  if (!this.listening) {\n    var doc = this.reader.view.dom.ownerDocument;\n    doc.addEventListener(\"selectionchange\", this.readFunc);\n    this.listening = true;\n\n    if (andRead) {\n      this.readFunc();\n    }\n  }\n};\n\nSelectionChangePoller.prototype.stop = function stop() {\n  if (this.listening) {\n    var doc = this.reader.view.dom.ownerDocument;\n    doc.removeEventListener(\"selectionchange\", this.readFunc);\n    this.listening = false;\n  }\n}; // On Browsers that don't support the selectionchange event,\n// we use timeout-based polling.\n\n\nvar TimeoutPoller = function TimeoutPoller(reader) {\n  // The timeout ID for the poller when active.\n  this.polling = null;\n  this.reader = reader;\n  this.pollFunc = this.doPoll.bind(this, null);\n};\n\nTimeoutPoller.prototype.doPoll = function doPoll(origin) {\n  var view = this.reader.view;\n\n  if (view.focused || !view.editable) {\n    this.reader.readFromDOM(origin);\n    this.polling = setTimeout(this.pollFunc, 100);\n  } else {\n    this.polling = null;\n  }\n};\n\nTimeoutPoller.prototype.poll = function poll(origin) {\n  clearTimeout(this.polling);\n  this.polling = setTimeout(origin ? this.doPoll.bind(this, origin) : this.pollFunc, 0);\n};\n\nTimeoutPoller.prototype.start = function start() {\n  if (this.polling == null) {\n    this.poll();\n  }\n};\n\nTimeoutPoller.prototype.stop = function stop() {\n  clearTimeout(this.polling);\n  this.polling = null;\n};\n\nfunction poller(reader) {\n  return new (\"onselectionchange\" in document ? SelectionChangePoller : TimeoutPoller)(reader);\n}\n\nfunction selectionToDOM(view, takeFocus, force) {\n  var sel = view.state.selection;\n  syncNodeSelection(view, sel);\n\n  if (view.editable && !view.hasFocus()) {\n    if (!takeFocus) {\n      return;\n    } // See https://bugzilla.mozilla.org/show_bug.cgi?id=921444\n\n\n    if (result.gecko && result.gecko_version <= 55) {\n      view.selectionReader.ignoreUpdates = true;\n      view.dom.focus();\n      view.selectionReader.ignoreUpdates = false;\n    }\n  } else if (!view.editable && !hasSelection(view) && !takeFocus) {\n    return;\n  }\n\n  var reader = view.selectionReader;\n\n  if (reader.lastSelection && reader.lastSelection.eq(sel) && !reader.domChanged()) {\n    return;\n  }\n\n  reader.ignoreUpdates = true;\n\n  if (view.cursorWrapper) {\n    selectCursorWrapper(view);\n  } else {\n    var anchor = sel.anchor;\n    var head = sel.head;\n    var resetEditableFrom, resetEditableTo;\n\n    if (brokenSelectBetweenUneditable && !(sel instanceof prosemirrorState.TextSelection)) {\n      if (!sel.$from.parent.inlineContent) {\n        resetEditableFrom = temporarilyEditableNear(view, sel.from);\n      }\n\n      if (!sel.empty && !sel.$from.parent.inlineContent) {\n        resetEditableTo = temporarilyEditableNear(view, sel.to);\n      }\n    }\n\n    view.docView.setSelection(anchor, head, view.root, force);\n\n    if (brokenSelectBetweenUneditable) {\n      if (resetEditableFrom) {\n        resetEditableFrom.contentEditable = \"false\";\n      }\n\n      if (resetEditableTo) {\n        resetEditableTo.contentEditable = \"false\";\n      }\n    }\n\n    if (sel.visible) {\n      view.dom.classList.remove(\"ProseMirror-hideselection\");\n    } else if (anchor != head) {\n      view.dom.classList.add(\"ProseMirror-hideselection\");\n\n      if (\"onselectionchange\" in document) {\n        removeClassOnSelectionChange(view);\n      }\n    }\n  }\n\n  reader.storeDOMState(sel);\n  reader.ignoreUpdates = false;\n} // Kludge to work around Webkit not allowing a selection to start/end\n// between non-editable block nodes. We briefly make something\n// editable, set the selection, then set it uneditable again.\n\n\nvar brokenSelectBetweenUneditable = result.safari || result.chrome && result.chrome_version < 63;\n\nfunction temporarilyEditableNear(view, pos) {\n  var ref = view.docView.domFromPos(pos);\n  var node = ref.node;\n  var offset = ref.offset;\n  var after = offset < node.childNodes.length ? node.childNodes[offset] : null;\n  var before = offset ? node.childNodes[offset - 1] : null;\n\n  if ((!after || after.contentEditable == \"false\") && (!before || before.contentEditable == \"false\")) {\n    if (after) {\n      after.contentEditable = \"true\";\n      return after;\n    } else if (before) {\n      before.contentEditable = \"true\";\n      return before;\n    }\n  }\n}\n\nfunction removeClassOnSelectionChange(view) {\n  var doc = view.dom.ownerDocument;\n  doc.removeEventListener(\"selectionchange\", view.hideSelectionGuard);\n  var domSel = view.root.getSelection();\n  var node = domSel.anchorNode,\n      offset = domSel.anchorOffset;\n  doc.addEventListener(\"selectionchange\", view.hideSelectionGuard = function () {\n    if (domSel.anchorNode != node || domSel.anchorOffset != offset) {\n      doc.removeEventListener(\"selectionchange\", view.hideSelectionGuard);\n      view.dom.classList.remove(\"ProseMirror-hideselection\");\n    }\n  });\n}\n\nfunction selectCursorWrapper(view) {\n  var domSel = view.root.getSelection(),\n      range = document.createRange();\n  var node = view.cursorWrapper.dom;\n  range.setEnd(node, node.childNodes.length);\n  range.collapse(false);\n  domSel.removeAllRanges();\n  domSel.addRange(range); // Kludge to kill 'control selection' in IE11 when selecting an\n  // invisible cursor wrapper, since that would result in those weird\n  // resize handles and a selection that considers the absolutely\n  // positioned wrapper, rather than the root editable node, the\n  // focused element.\n\n  if (!view.state.selection.visible && result.ie && result.ie_version <= 11) {\n    node.disabled = true;\n    node.disabled = false;\n  }\n}\n\nfunction syncNodeSelection(view, sel) {\n  if (sel instanceof prosemirrorState.NodeSelection) {\n    var desc = view.docView.descAt(sel.from);\n\n    if (desc != view.lastSelectedViewDesc) {\n      clearNodeSelection(view);\n\n      if (desc) {\n        desc.selectNode();\n      }\n\n      view.lastSelectedViewDesc = desc;\n    }\n  } else {\n    clearNodeSelection(view);\n  }\n} // Clear all DOM statefulness of the last node selection.\n\n\nfunction clearNodeSelection(view) {\n  if (view.lastSelectedViewDesc) {\n    view.lastSelectedViewDesc.deselectNode();\n    view.lastSelectedViewDesc = null;\n  }\n}\n\nfunction selectionBetween(view, $anchor, $head, bias) {\n  return view.someProp(\"createSelectionBetween\", function (f) {\n    return f(view, $anchor, $head);\n  }) || prosemirrorState.TextSelection.between($anchor, $head, bias);\n}\n\nfunction hasFocusAndSelection(view) {\n  if (view.editable && view.root.activeElement != view.dom) {\n    return false;\n  }\n\n  return hasSelection(view);\n}\n\nfunction hasSelection(view) {\n  var sel = view.root.getSelection();\n\n  if (!sel.anchorNode) {\n    return false;\n  }\n\n  try {\n    // Firefox will raise 'permission denied' errors when accessing\n    // properties of `sel.anchorNode` when it's in a generated CSS\n    // element.\n    return view.dom.contains(sel.anchorNode.nodeType == 3 ? sel.anchorNode.parentNode : sel.anchorNode) && (view.editable || view.dom.contains(sel.focusNode.nodeType == 3 ? sel.focusNode.parentNode : sel.focusNode));\n  } catch (_) {\n    return false;\n  }\n}\n\nfunction nonInclusiveMark(mark) {\n  return mark.type.spec.inclusive === false;\n}\n\nfunction needsCursorWrapper(state) {\n  var ref = state.selection;\n  var $head = ref.$head;\n  var $anchor = ref.$anchor;\n  var visible = ref.visible;\n  var $pos = $head.pos == $anchor.pos && (!visible || $head.parent.inlineContent) ? $head : null;\n\n  if ($pos && (!visible || state.storedMarks || $pos.parent.content.length == 0 || $pos.parentOffset && !$pos.textOffset && $pos.nodeBefore.marks.some(nonInclusiveMark))) {\n    return $pos;\n  } else {\n    return null;\n  }\n}\n\nfunction anchorInRightPlace(view) {\n  var anchorDOM = view.docView.domFromPos(view.state.selection.anchor);\n  var domSel = view.root.getSelection();\n  return isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset);\n}\n\nvar DOMChange = function DOMChange(view, composing) {\n  var this$1 = this;\n  this.view = view;\n  this.state = view.state;\n  this.composing = composing;\n  this.compositionEndedAt = null;\n  this.from = this.to = null;\n  this.typeOver = false;\n  this.timeout = composing ? null : setTimeout(function () {\n    return this$1.finish();\n  }, DOMChange.commitTimeout);\n  this.trackMappings = new TrackMappings(view.state); // If there have been changes since this DOM update started, we must\n  // map our start and end positions, as well as the new selection\n  // positions, through them. This tracks that mapping.\n\n  this.mapping = new prosemirrorTransform.Mapping();\n  this.mappingTo = view.state;\n};\n\nDOMChange.prototype.addRange = function addRange(from, to) {\n  if (this.from == null) {\n    this.from = from;\n    this.to = to;\n  } else {\n    this.from = Math.min(from, this.from);\n    this.to = Math.max(to, this.to);\n  }\n};\n\nDOMChange.prototype.changedRange = function changedRange() {\n  if (this.from == null) {\n    return rangeAroundSelection(this.state.selection);\n  }\n\n  var $from = this.state.doc.resolve(Math.min(this.from, this.state.selection.from)),\n      $to = this.state.doc.resolve(this.to);\n  var shared = $from.sharedDepth(this.to);\n  return {\n    from: $from.before(shared + 1),\n    to: $to.after(shared + 1)\n  };\n};\n\nDOMChange.prototype.markDirty = function markDirty(range) {\n  if (this.from == null) {\n    this.view.docView.markDirty((range = range || this.changedRange()).from, range.to);\n  } else {\n    this.view.docView.markDirty(this.from, this.to);\n  }\n};\n\nDOMChange.prototype.stateUpdated = function stateUpdated(state) {\n  if (this.trackMappings.getMapping(state, this.mapping)) {\n    this.trackMappings.destroy();\n    this.trackMappings = new TrackMappings(state);\n    this.mappingTo = state;\n    return true;\n  } else {\n    this.markDirty();\n    this.destroy();\n    return false;\n  }\n};\n\nDOMChange.prototype.finish = function finish(force) {\n  clearTimeout(this.timeout);\n\n  if (this.composing && !force) {\n    return;\n  }\n\n  this.view.domObserver.flush();\n  var range = this.changedRange();\n  this.markDirty(range);\n  this.destroy();\n  var sel = this.state.selection,\n      allowTypeOver = this.typeOver && sel instanceof prosemirrorState.TextSelection && !sel.empty && sel.$head.sameParent(sel.$anchor);\n  readDOMChange(this.view, this.mapping, this.state, range, allowTypeOver); // If the reading didn't result in a view update, force one by\n  // resetting the view to its current state.\n\n  if (this.view.docView.dirty) {\n    this.view.updateState(this.view.state);\n  }\n};\n\nDOMChange.prototype.destroy = function destroy() {\n  clearTimeout(this.timeout);\n  this.trackMappings.destroy();\n  this.view.inDOMChange = null;\n};\n\nDOMChange.prototype.compositionEnd = function compositionEnd(event) {\n  var this$1 = this;\n\n  if (this.composing) {\n    this.composing = false;\n\n    if (event) {\n      this.compositionEndedAt = event.timeStamp;\n    }\n\n    this.timeout = setTimeout(function () {\n      return this$1.finish();\n    }, 50);\n  }\n};\n\nDOMChange.prototype.ignoreKeyDownOnCompositionEnd = function ignoreKeyDownOnCompositionEnd(event) {\n  // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.\n  // On Japanese input method editors (IMEs), the Enter key is used to confirm character\n  // selection. On Safari, when Enter is pressed, compositionend and keydown events are\n  // emitted. The keydown event triggers newline insertion, which we don't want.\n  // This method returns true if the keydown event should be ignored.\n  // We only ignore it once, as pressing Enter a second time *should* insert a newline.\n  // Furthermore, the keydown event timestamp must be close to the compositionEndedAt timestamp.\n  // This guards against the case where compositionend is triggered without the keyboard\n  // (e.g. character confirmation may be done with the mouse), and keydown is triggered\n  // afterwards- we wouldn't want to ignore the keydown event in this case.\n  if (result.safari && this.compositionEndedAt !== null && Math.abs(event.timeStamp - this.compositionEndedAt) < 500) {\n    this.compositionEndedAt = null;\n    return true;\n  }\n\n  return false;\n};\n\nDOMChange.start = function start(view, composing) {\n  if (view.inDOMChange) {\n    if (composing) {\n      clearTimeout(view.inDOMChange.timeout);\n      view.inDOMChange.composing = true;\n      view.inDOMChange.compositionEndedAt = null;\n    }\n  } else {\n    view.inDOMChange = new DOMChange(view, composing);\n  }\n\n  return view.inDOMChange;\n};\n\nDOMChange.commitTimeout = 20; // Note that all referencing and parsing is done with the\n// start-of-operation selection and document, since that's the one\n// that the DOM represents. If any changes came in in the meantime,\n// the modification is mapped over those before it is applied, in\n// readDOMChange.\n\nfunction parseBetween(view, oldState, range) {\n  var ref = view.docView.parseRange(range.from, range.to);\n  var parent = ref.node;\n  var fromOffset = ref.fromOffset;\n  var toOffset = ref.toOffset;\n  var from = ref.from;\n  var to = ref.to;\n  var domSel = view.root.getSelection(),\n      find = null,\n      anchor = domSel.anchorNode;\n\n  if (anchor && view.dom.contains(anchor.nodeType == 1 ? anchor : anchor.parentNode)) {\n    find = [{\n      node: anchor,\n      offset: domSel.anchorOffset\n    }];\n\n    if (!selectionCollapsed(domSel)) {\n      find.push({\n        node: domSel.focusNode,\n        offset: domSel.focusOffset\n      });\n    }\n  } // Work around issue in Chrome where backspacing sometimes replaces\n  // the deleted content with a random BR node (issues #799, #831)\n\n\n  if (result.chrome && view.lastKeyCode === 8) {\n    for (var off = toOffset; off > fromOffset; off--) {\n      var node = parent.childNodes[off - 1],\n          desc = node.pmViewDesc;\n\n      if (node.nodeType == \"BR\" && !desc) {\n        toOffset = off;\n        break;\n      }\n\n      if (!desc || desc.size) {\n        break;\n      }\n    }\n  }\n\n  var startDoc = oldState.doc;\n  var parser = view.someProp(\"domParser\") || prosemirrorModel.DOMParser.fromSchema(view.state.schema);\n  var $from = startDoc.resolve(from);\n  var sel = null,\n      doc = parser.parse(parent, {\n    topNode: $from.parent,\n    topMatch: $from.parent.contentMatchAt($from.index()),\n    topOpen: true,\n    from: fromOffset,\n    to: toOffset,\n    preserveWhitespace: $from.parent.type.spec.code ? \"full\" : true,\n    editableContent: true,\n    findPositions: find,\n    ruleFromNode: ruleFromNode(parser, $from),\n    context: $from\n  });\n\n  if (find && find[0].pos != null) {\n    var anchor$1 = find[0].pos,\n        head = find[1] && find[1].pos;\n\n    if (head == null) {\n      head = anchor$1;\n    }\n\n    sel = {\n      anchor: anchor$1 + from,\n      head: head + from\n    };\n  }\n\n  return {\n    doc: doc,\n    sel: sel,\n    from: from,\n    to: to\n  };\n}\n\nfunction ruleFromNode(parser, context) {\n  return function (dom) {\n    var desc = dom.pmViewDesc;\n\n    if (desc) {\n      return desc.parseRule();\n    } else if (dom.nodeName == \"BR\" && dom.parentNode) {\n      // Safari replaces the list item or table cell with a BR\n      // directly in the list node (?!) if you delete the last\n      // character in a list item or table cell (#708, #862)\n      if (result.safari && /^(ul|ol)$/i.test(dom.parentNode.nodeName)) {\n        return parser.matchTag(document.createElement(\"li\"), context);\n      } else if (dom.parentNode.lastChild == dom || result.safari && /^(tr|table)$/i.test(dom.parentNode.nodeName)) {\n        return {\n          ignore: true\n        };\n      }\n    }\n  };\n}\n\nfunction isAtEnd($pos, depth) {\n  for (var i = depth || 0; i < $pos.depth; i++) {\n    if ($pos.index(i) + 1 < $pos.node(i).childCount) {\n      return false;\n    }\n  }\n\n  return $pos.parentOffset == $pos.parent.content.size;\n}\n\nfunction isAtStart($pos, depth) {\n  for (var i = depth || 0; i < $pos.depth; i++) {\n    if ($pos.index(0) > 0) {\n      return false;\n    }\n  }\n\n  return $pos.parentOffset == 0;\n}\n\nfunction rangeAroundSelection(selection) {\n  // Intentionally uses $head/$anchor because those will correspond to the DOM selection\n  var $from = selection.$anchor.min(selection.$head),\n      $to = selection.$anchor.max(selection.$head);\n\n  if ($from.sameParent($to) && $from.parent.inlineContent && $from.parentOffset && $to.parentOffset < $to.parent.content.size) {\n    var startOff = Math.max(0, $from.parentOffset);\n    var size = $from.parent.content.size;\n    var endOff = Math.min(size, $to.parentOffset);\n\n    if (startOff > 0) {\n      startOff = $from.parent.childBefore(startOff).offset;\n    }\n\n    if (endOff < size) {\n      var after = $from.parent.childAfter(endOff);\n      endOff = after.offset + after.node.nodeSize;\n    }\n\n    var nodeStart = $from.start();\n    return {\n      from: nodeStart + startOff,\n      to: nodeStart + endOff\n    };\n  } else {\n    for (var depth = 0;; depth++) {\n      var fromStart = isAtStart($from, depth + 1),\n          toEnd = isAtEnd($to, depth + 1);\n\n      if (fromStart || toEnd || $from.index(depth) != $to.index(depth) || $to.node(depth).isTextblock) {\n        var from = $from.before(depth + 1),\n            to = $to.after(depth + 1);\n\n        if (fromStart && $from.index(depth) > 0) {\n          from -= $from.node(depth).child($from.index(depth) - 1).nodeSize;\n        }\n\n        if (toEnd && $to.index(depth) + 1 < $to.node(depth).childCount) {\n          to += $to.node(depth).child($to.index(depth) + 1).nodeSize;\n        }\n\n        return {\n          from: from,\n          to: to\n        };\n      }\n    }\n  }\n}\n\nfunction readDOMChange(view, mapping, oldState, range, allowTypeOver) {\n  var parse = parseBetween(view, oldState, range);\n  var doc = oldState.doc,\n      compare = doc.slice(parse.from, parse.to);\n  var preferredPos, preferredSide; // Prefer anchoring to end when Backspace is pressed\n\n  if (view.lastKeyCode === 8 && Date.now() - 100 < view.lastKeyCodeTime) {\n    preferredPos = oldState.selection.to;\n    preferredSide = \"end\";\n  } else {\n    preferredPos = oldState.selection.from;\n    preferredSide = \"start\";\n  }\n\n  view.lastKeyCode = null;\n  var change = findDiff(compare.content, parse.doc.content, parse.from, preferredPos, preferredSide);\n\n  if (!change) {\n    if (allowTypeOver) {\n      var state = view.state,\n          sel = state.selection;\n      view.dispatch(state.tr.replaceSelectionWith(state.schema.text(state.doc.textBetween(sel.from, sel.to)), true).scrollIntoView());\n    } else if (parse.sel) {\n      var sel$1 = resolveSelection(view, view.state.doc, mapping, parse.sel);\n\n      if (sel$1 && !sel$1.eq(view.state.selection)) {\n        view.dispatch(view.state.tr.setSelection(sel$1));\n      }\n    }\n\n    return;\n  }\n\n  view.domChangeCount++; // Handle the case where overwriting a selection by typing matches\n  // the start or end of the selected content, creating a change\n  // that's smaller than what was actually overwritten.\n\n  if (oldState.selection.from < oldState.selection.to && change.start == change.endB && oldState.selection instanceof prosemirrorState.TextSelection) {\n    if (change.start > oldState.selection.from && change.start <= oldState.selection.from + 2) {\n      change.start = oldState.selection.from;\n    } else if (change.endA < oldState.selection.to && change.endA >= oldState.selection.to - 2) {\n      change.endB += oldState.selection.to - change.endA;\n      change.endA = oldState.selection.to;\n    }\n  }\n\n  var $from = parse.doc.resolveNoCache(change.start - parse.from);\n  var $to = parse.doc.resolveNoCache(change.endB - parse.from);\n  var nextSel; // If this looks like the effect of pressing Enter, just dispatch an\n  // Enter key instead.\n\n  if (!$from.sameParent($to) && $from.pos < parse.doc.content.size && (nextSel = prosemirrorState.Selection.findFrom(parse.doc.resolve($from.pos + 1), 1, true)) && nextSel.head == $to.pos && view.someProp(\"handleKeyDown\", function (f) {\n    return f(view, keyEvent(13, \"Enter\"));\n  })) {\n    return;\n  } // Same for backspace\n\n\n  if (oldState.selection.anchor > change.start && looksLikeJoin(doc, change.start, change.endA, $from, $to) && view.someProp(\"handleKeyDown\", function (f) {\n    return f(view, keyEvent(8, \"Backspace\"));\n  })) {\n    if (result.android && result.chrome) {\n      // #820\n      view.selectionReader.suppressUpdates = true;\n      setTimeout(function () {\n        return view.selectionReader.suppressUpdates = false;\n      }, 50);\n    }\n\n    return;\n  }\n\n  var from = mapping.map(change.start),\n      to = Math.max(from, mapping.map(change.endA, -1));\n  var tr, storedMarks, markChange, $from1;\n\n  if ($from.sameParent($to) && $from.parent.inlineContent) {\n    if ($from.pos == $to.pos) {\n      // Deletion\n      tr = view.state.tr.delete(from, to);\n      storedMarks = doc.resolve(change.start).marksAcross(doc.resolve(change.endA));\n    } else if ( // Adding or removing a mark\n    change.endA == change.endB && ($from1 = doc.resolve(change.start)) && (markChange = isMarkChange($from.parent.content.cut($from.parentOffset, $to.parentOffset), $from1.parent.content.cut($from1.parentOffset, change.endA - $from1.start())))) {\n      tr = view.state.tr;\n\n      if (markChange.type == \"add\") {\n        tr.addMark(from, to, markChange.mark);\n      } else {\n        tr.removeMark(from, to, markChange.mark);\n      }\n    } else if ($from.parent.child($from.index()).isText && $from.index() == $to.index() - ($to.textOffset ? 0 : 1)) {\n      // Both positions in the same text node -- simply insert text\n      var text = $from.parent.textBetween($from.parentOffset, $to.parentOffset);\n\n      if (view.someProp(\"handleTextInput\", function (f) {\n        return f(view, from, to, text);\n      })) {\n        return;\n      }\n\n      tr = view.state.tr.insertText(text, from, to);\n    }\n  }\n\n  if (!tr) {\n    tr = view.state.tr.replace(from, to, parse.doc.slice(change.start - parse.from, change.endB - parse.from));\n  }\n\n  if (parse.sel) {\n    var sel$2 = resolveSelection(view, tr.doc, mapping, parse.sel);\n\n    if (sel$2) {\n      tr.setSelection(sel$2);\n    }\n  }\n\n  if (storedMarks) {\n    tr.ensureMarks(storedMarks);\n  }\n\n  view.dispatch(tr.scrollIntoView());\n}\n\nfunction resolveSelection(view, doc, mapping, parsedSel) {\n  if (Math.max(parsedSel.anchor, parsedSel.head) > doc.content.size) {\n    return null;\n  }\n\n  return selectionBetween(view, doc.resolve(mapping.map(parsedSel.anchor)), doc.resolve(mapping.map(parsedSel.head)));\n} // : (Fragment, Fragment) → ?{mark: Mark, type: string}\n// Given two same-length, non-empty fragments of inline content,\n// determine whether the first could be created from the second by\n// removing or adding a single mark type.\n\n\nfunction isMarkChange(cur, prev) {\n  var curMarks = cur.firstChild.marks,\n      prevMarks = prev.firstChild.marks;\n  var added = curMarks,\n      removed = prevMarks,\n      type,\n      mark,\n      update;\n\n  for (var i = 0; i < prevMarks.length; i++) {\n    added = prevMarks[i].removeFromSet(added);\n  }\n\n  for (var i$1 = 0; i$1 < curMarks.length; i$1++) {\n    removed = curMarks[i$1].removeFromSet(removed);\n  }\n\n  if (added.length == 1 && removed.length == 0) {\n    mark = added[0];\n    type = \"add\";\n\n    update = function (node) {\n      return node.mark(mark.addToSet(node.marks));\n    };\n  } else if (added.length == 0 && removed.length == 1) {\n    mark = removed[0];\n    type = \"remove\";\n\n    update = function (node) {\n      return node.mark(mark.removeFromSet(node.marks));\n    };\n  } else {\n    return null;\n  }\n\n  var updated = [];\n\n  for (var i$2 = 0; i$2 < prev.childCount; i$2++) {\n    updated.push(update(prev.child(i$2)));\n  }\n\n  if (prosemirrorModel.Fragment.from(updated).eq(cur)) {\n    return {\n      mark: mark,\n      type: type\n    };\n  }\n}\n\nfunction looksLikeJoin(old, start, end, $newStart, $newEnd) {\n  if (!$newStart.parent.isTextblock || // The content must have shrunk\n  end - start <= $newEnd.pos - $newStart.pos || // newEnd must point directly at or after the end of the block that newStart points into\n  skipClosingAndOpening($newStart, true, false) < $newEnd.pos) {\n    return false;\n  }\n\n  var $start = old.resolve(start); // Start must be at the end of a block\n\n  if ($start.parentOffset < $start.parent.content.size || !$start.parent.isTextblock) {\n    return false;\n  }\n\n  var $next = old.resolve(skipClosingAndOpening($start, true, true)); // The next textblock must start before end and end near it\n\n  if (!$next.parent.isTextblock || $next.pos > end || skipClosingAndOpening($next, true, false) < end) {\n    return false;\n  } // The fragments after the join point must match\n\n\n  return $newStart.parent.content.cut($newStart.parentOffset).eq($next.parent.content);\n}\n\nfunction skipClosingAndOpening($pos, fromEnd, mayOpen) {\n  var depth = $pos.depth,\n      end = fromEnd ? $pos.end() : $pos.pos;\n\n  while (depth > 0 && (fromEnd || $pos.indexAfter(depth) == $pos.node(depth).childCount)) {\n    depth--;\n    end++;\n    fromEnd = false;\n  }\n\n  if (mayOpen) {\n    var next = $pos.node(depth).maybeChild($pos.indexAfter(depth));\n\n    while (next && !next.isLeaf) {\n      next = next.firstChild;\n      end++;\n    }\n  }\n\n  return end;\n}\n\nfunction findDiff(a, b, pos, preferredPos, preferredSide) {\n  var start = a.findDiffStart(b, pos);\n\n  if (start == null) {\n    return null;\n  }\n\n  var ref = a.findDiffEnd(b, pos + a.size, pos + b.size);\n  var endA = ref.a;\n  var endB = ref.b;\n\n  if (preferredSide == \"end\") {\n    var adjust = Math.max(0, start - Math.min(endA, endB));\n    preferredPos -= endA + adjust - start;\n  }\n\n  if (endA < start && a.size < b.size) {\n    var move = preferredPos <= start && preferredPos >= endA ? start - preferredPos : 0;\n    start -= move;\n    endB = start + (endB - endA);\n    endA = start;\n  } else if (endB < start) {\n    var move$1 = preferredPos <= start && preferredPos >= endB ? start - preferredPos : 0;\n    start -= move$1;\n    endA = start + (endA - endB);\n    endB = start;\n  }\n\n  return {\n    start: start,\n    endA: endA,\n    endB: endB\n  };\n}\n\nfunction serializeForClipboard(view, slice) {\n  var context = [];\n  var content = slice.content;\n  var openStart = slice.openStart;\n  var openEnd = slice.openEnd;\n\n  while (openStart > 1 && openEnd > 1 && content.childCount == 1 && content.firstChild.childCount == 1) {\n    openStart--;\n    openEnd--;\n    var node = content.firstChild;\n    context.push(node.type.name, node.type.hasRequiredAttrs() ? node.attrs : null);\n    content = node.content;\n  }\n\n  var serializer = view.someProp(\"clipboardSerializer\") || prosemirrorModel.DOMSerializer.fromSchema(view.state.schema);\n  var wrap = document.createElement(\"div\");\n  wrap.appendChild(serializer.serializeFragment(content));\n  var firstChild = wrap.firstChild,\n      needsWrap;\n\n  while (firstChild && firstChild.nodeType == 1 && (needsWrap = wrapMap[firstChild.nodeName.toLowerCase()])) {\n    for (var i = needsWrap.length - 1; i >= 0; i--) {\n      var wrapper = document.createElement(needsWrap[i]);\n\n      while (wrap.firstChild) {\n        wrapper.appendChild(wrap.firstChild);\n      }\n\n      wrap.appendChild(wrapper);\n    }\n\n    firstChild = wrap.firstChild;\n  }\n\n  if (firstChild && firstChild.nodeType == 1) {\n    firstChild.setAttribute(\"data-pm-slice\", openStart + \" \" + openEnd + \" \" + JSON.stringify(context));\n  }\n\n  var text = view.someProp(\"clipboardTextSerializer\", function (f) {\n    return f(slice);\n  }) || slice.content.textBetween(0, slice.content.size, \"\\n\\n\");\n  return {\n    dom: wrap,\n    text: text\n  };\n} // : (EditorView, string, string, ?bool, ResolvedPos) → ?Slice\n// Read a slice of content from the clipboard (or drop data).\n\n\nfunction parseFromClipboard(view, text, html, plainText, $context) {\n  var dom,\n      inCode = $context.parent.type.spec.code,\n      slice;\n\n  if (!html && !text) {\n    return null;\n  }\n\n  var asText = text && (plainText || inCode || !html);\n\n  if (asText) {\n    view.someProp(\"transformPastedText\", function (f) {\n      text = f(text);\n    });\n\n    if (inCode) {\n      return new prosemirrorModel.Slice(prosemirrorModel.Fragment.from(view.state.schema.text(text)), 0, 0);\n    }\n\n    var parsed = view.someProp(\"clipboardTextParser\", function (f) {\n      return f(text, $context);\n    });\n\n    if (parsed) {\n      slice = parsed;\n    } else {\n      dom = document.createElement(\"div\");\n      text.trim().split(/(?:\\r\\n?|\\n)+/).forEach(function (block) {\n        dom.appendChild(document.createElement(\"p\")).textContent = block;\n      });\n    }\n  } else {\n    view.someProp(\"transformPastedHTML\", function (f) {\n      html = f(html);\n    });\n    dom = readHTML(html);\n  }\n\n  var contextNode = dom && dom.querySelector(\"[data-pm-slice]\");\n  var sliceData = contextNode && /^(\\d+) (\\d+) (.*)/.exec(contextNode.getAttribute(\"data-pm-slice\"));\n\n  if (!slice) {\n    var parser = view.someProp(\"clipboardParser\") || view.someProp(\"domParser\") || prosemirrorModel.DOMParser.fromSchema(view.state.schema);\n    slice = parser.parseSlice(dom, {\n      preserveWhitespace: !!(asText || sliceData),\n      context: $context\n    });\n  }\n\n  if (sliceData) {\n    slice = addContext(new prosemirrorModel.Slice(slice.content, Math.min(slice.openStart, +sliceData[1]), Math.min(slice.openEnd, +sliceData[2])), sliceData[3]);\n  } else // HTML wasn't created by ProseMirror. Make sure top-level siblings are coherent\n    {\n      slice = prosemirrorModel.Slice.maxOpen(normalizeSiblings(slice.content, $context), false);\n    }\n\n  view.someProp(\"transformPasted\", function (f) {\n    slice = f(slice);\n  });\n  return slice;\n} // Takes a slice parsed with parseSlice, which means there hasn't been\n// any content-expression checking done on the top nodes, tries to\n// find a parent node in the current context that might fit the nodes,\n// and if successful, rebuilds the slice so that it fits into that parent.\n//\n// This addresses the problem that Transform.replace expects a\n// coherent slice, and will fail to place a set of siblings that don't\n// fit anywhere in the schema.\n\n\nfunction normalizeSiblings(fragment, $context) {\n  if (fragment.childCount < 2) {\n    return fragment;\n  }\n\n  var loop = function (d) {\n    var parent = $context.node(d);\n    var match = parent.contentMatchAt($context.index(d));\n    var lastWrap = void 0,\n        result = [];\n    fragment.forEach(function (node) {\n      if (!result) {\n        return;\n      }\n\n      var wrap = match.findWrapping(node.type),\n          inLast;\n\n      if (!wrap) {\n        return result = null;\n      }\n\n      if (inLast = result.length && lastWrap.length && addToSibling(wrap, lastWrap, node, result[result.length - 1], 0)) {\n        result[result.length - 1] = inLast;\n      } else {\n        if (result.length) {\n          result[result.length - 1] = closeRight(result[result.length - 1], lastWrap.length);\n        }\n\n        var wrapped = withWrappers(node, wrap);\n        result.push(wrapped);\n        match = match.matchType(wrapped.type, wrapped.attrs);\n        lastWrap = wrap;\n      }\n    });\n\n    if (result) {\n      return {\n        v: prosemirrorModel.Fragment.from(result)\n      };\n    }\n  };\n\n  for (var d = $context.depth; d >= 0; d--) {\n    var returned = loop(d);\n    if (returned) return returned.v;\n  }\n\n  return fragment;\n}\n\nfunction withWrappers(node, wrap, from) {\n  if (from === void 0) from = 0;\n\n  for (var i = wrap.length - 1; i >= from; i--) {\n    node = wrap[i].create(null, prosemirrorModel.Fragment.from(node));\n  }\n\n  return node;\n} // Used to group adjacent nodes wrapped in similar parents by\n// normalizeSiblings into the same parent node\n\n\nfunction addToSibling(wrap, lastWrap, node, sibling, depth) {\n  if (depth < wrap.length && depth < lastWrap.length && wrap[depth] == lastWrap[depth]) {\n    var inner = addToSibling(wrap, lastWrap, node, sibling.lastChild, depth + 1);\n\n    if (inner) {\n      return sibling.copy(sibling.content.replaceChild(sibling.childCount - 1, inner));\n    }\n\n    var match = sibling.contentMatchAt(sibling.childCount);\n\n    if (match.matchType(depth == wrap.length - 1 ? node.type : wrap[depth + 1])) {\n      return sibling.copy(sibling.content.append(prosemirrorModel.Fragment.from(withWrappers(node, wrap, depth + 1))));\n    }\n  }\n}\n\nfunction closeRight(node, depth) {\n  if (depth == 0) {\n    return node;\n  }\n\n  var fragment = node.content.replaceChild(node.childCount - 1, closeRight(node.lastChild, depth - 1));\n  var fill = node.contentMatchAt(node.childCount).fillBefore(prosemirrorModel.Fragment.empty, true);\n  return node.copy(fragment.append(fill));\n} // Trick from jQuery -- some elements must be wrapped in other\n// elements for innerHTML to work. I.e. if you do `div.innerHTML =\n// \"<td>..</td>\"` the table cells are ignored.\n\n\nvar wrapMap = {\n  thead: [\"table\"],\n  colgroup: [\"table\"],\n  col: [\"table\", \"colgroup\"],\n  tr: [\"table\", \"tbody\"],\n  td: [\"table\", \"tbody\", \"tr\"],\n  th: [\"table\", \"tbody\", \"tr\"]\n};\nvar detachedDoc = null;\n\nfunction readHTML(html) {\n  var metas = /(\\s*<meta [^>]*>)*/.exec(html);\n\n  if (metas) {\n    html = html.slice(metas[0].length);\n  }\n\n  var doc = detachedDoc || (detachedDoc = document.implementation.createHTMLDocument(\"title\"));\n  var elt = doc.createElement(\"div\");\n  var firstTag = /(?:<meta [^>]*>)*<([a-z][^>\\s]+)/i.exec(html),\n      wrap,\n      depth = 0;\n\n  if (wrap = firstTag && wrapMap[firstTag[1].toLowerCase()]) {\n    html = wrap.map(function (n) {\n      return \"<\" + n + \">\";\n    }).join(\"\") + html + wrap.map(function (n) {\n      return \"</\" + n + \">\";\n    }).reverse().join(\"\");\n    depth = wrap.length;\n  }\n\n  elt.innerHTML = html;\n\n  for (var i = 0; i < depth; i++) {\n    elt = elt.firstChild;\n  }\n\n  return elt;\n}\n\nfunction addContext(slice, context) {\n  if (!slice.size) {\n    return slice;\n  }\n\n  var schema = slice.content.firstChild.type.schema,\n      array;\n\n  try {\n    array = JSON.parse(context);\n  } catch (e) {\n    return slice;\n  }\n\n  var content = slice.content;\n  var openStart = slice.openStart;\n  var openEnd = slice.openEnd;\n\n  for (var i = array.length - 2; i >= 0; i -= 2) {\n    var type = schema.nodes[array[i]];\n\n    if (!type || type.hasRequiredAttrs()) {\n      break;\n    }\n\n    content = prosemirrorModel.Fragment.from(type.create(array[i + 1], content));\n    openStart++;\n    openEnd++;\n  }\n\n  return new prosemirrorModel.Slice(content, openStart, openEnd);\n}\n\nvar observeOptions = {\n  childList: true,\n  characterData: true,\n  attributes: true,\n  subtree: true,\n  characterDataOldValue: true\n}; // IE11 has very broken mutation observers, so we also listen to DOMCharacterDataModified\n\nvar useCharData = result.ie && result.ie_version <= 11;\n\nvar DOMObserver = function DOMObserver(view) {\n  var this$1 = this;\n  this.view = view;\n  this.observer = window.MutationObserver && new window.MutationObserver(function (mutations) {\n    return this$1.registerMutations(mutations);\n  });\n\n  if (useCharData) {\n    this.onCharData = function (e) {\n      return this$1.registerMutation({\n        target: e.target,\n        type: \"characterData\",\n        oldValue: e.prevValue\n      });\n    };\n  }\n};\n\nDOMObserver.prototype.start = function start() {\n  if (this.observer) {\n    this.observer.observe(this.view.dom, observeOptions);\n  }\n\n  if (useCharData) {\n    this.view.dom.addEventListener(\"DOMCharacterDataModified\", this.onCharData);\n  }\n};\n\nDOMObserver.prototype.stop = function stop() {\n  if (this.observer) {\n    this.flush();\n    this.observer.disconnect();\n  }\n\n  if (useCharData) {\n    this.view.dom.removeEventListener(\"DOMCharacterDataModified\", this.onCharData);\n  }\n};\n\nDOMObserver.prototype.flush = function flush() {\n  if (this.observer) {\n    this.registerMutations(this.observer.takeRecords());\n  }\n};\n\nDOMObserver.prototype.registerMutations = function registerMutations(mutations) {\n  var this$1 = this;\n\n  for (var i = 0; i < mutations.length; i++) {\n    this$1.registerMutation(mutations[i]);\n  }\n};\n\nDOMObserver.prototype.registerMutation = function registerMutation(mut) {\n  if (!this.view.editable) {\n    return;\n  }\n\n  var desc = this.view.docView.nearestDesc(mut.target);\n\n  if (mut.type == \"attributes\" && (desc == this.view.docView || mut.attributeName == \"contenteditable\")) {\n    return;\n  }\n\n  if (!desc || desc.ignoreMutation(mut)) {\n    return;\n  }\n\n  var from, to;\n\n  if (mut.type == \"childList\") {\n    var fromOffset = mut.previousSibling && mut.previousSibling.parentNode == mut.target ? domIndex(mut.previousSibling) + 1 : 0;\n\n    if (fromOffset == -1) {\n      return;\n    }\n\n    from = desc.localPosFromDOM(mut.target, fromOffset, -1);\n    var toOffset = mut.nextSibling && mut.nextSibling.parentNode == mut.target ? domIndex(mut.nextSibling) : mut.target.childNodes.length;\n\n    if (toOffset == -1) {\n      return;\n    }\n\n    to = desc.localPosFromDOM(mut.target, toOffset, 1);\n  } else if (mut.type == \"attributes\") {\n    from = desc.posAtStart - desc.border;\n    to = desc.posAtEnd + desc.border;\n  } else {\n    // \"characterData\"\n    from = desc.posAtStart;\n    to = desc.posAtEnd; // An event was generated for a text change that didn't change\n    // any text. Mark the dom change to fall back to assuming the\n    // selection was typed over with an identical value if it can't\n    // find another change.\n\n    if (mut.target.nodeValue == mut.oldValue) {\n      DOMChange.start(this.view).typeOver = true;\n    }\n  }\n\n  DOMChange.start(this.view).addRange(from, to);\n}; // A collection of DOM events that occur within the editor, and callback functions\n// to invoke when the event fires.\n\n\nvar handlers = {};\nvar editHandlers = {};\n\nfunction initInput(view) {\n  view.shiftKey = false;\n  view.mouseDown = null;\n  view.inDOMChange = null;\n  view.lastKeyCode = null;\n  view.lastKeyCodeTime = 0;\n  view.lastClick = {\n    time: 0,\n    x: 0,\n    y: 0,\n    type: \"\"\n  };\n  view.domObserver = new DOMObserver(view);\n  view.domObserver.start(); // Used by hacks like the beforeinput handler to check whether anything happened in the DOM\n\n  view.domChangeCount = 0;\n  view.eventHandlers = Object.create(null);\n\n  var loop = function (event) {\n    var handler = handlers[event];\n    view.dom.addEventListener(event, view.eventHandlers[event] = function (event) {\n      if (eventBelongsToView(view, event) && !runCustomHandler(view, event) && (view.editable || !(event.type in editHandlers))) {\n        handler(view, event);\n      }\n    });\n  };\n\n  for (var event in handlers) loop(event);\n\n  ensureListeners(view);\n}\n\nfunction destroyInput(view) {\n  view.domObserver.stop();\n\n  if (view.inDOMChange) {\n    view.inDOMChange.destroy();\n  }\n\n  for (var type in view.eventHandlers) {\n    view.dom.removeEventListener(type, view.eventHandlers[type]);\n  }\n}\n\nfunction ensureListeners(view) {\n  view.someProp(\"handleDOMEvents\", function (currentHandlers) {\n    for (var type in currentHandlers) {\n      if (!view.eventHandlers[type]) {\n        view.dom.addEventListener(type, view.eventHandlers[type] = function (event) {\n          return runCustomHandler(view, event);\n        });\n      }\n    }\n  });\n}\n\nfunction runCustomHandler(view, event) {\n  return view.someProp(\"handleDOMEvents\", function (handlers) {\n    var handler = handlers[event.type];\n    return handler ? handler(view, event) || event.defaultPrevented : false;\n  });\n}\n\nfunction eventBelongsToView(view, event) {\n  if (!event.bubbles) {\n    return true;\n  }\n\n  if (event.defaultPrevented) {\n    return false;\n  }\n\n  for (var node = event.target; node != view.dom; node = node.parentNode) {\n    if (!node || node.nodeType == 11 || node.pmViewDesc && node.pmViewDesc.stopEvent(event)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction dispatchEvent(view, event) {\n  if (!runCustomHandler(view, event) && handlers[event.type] && (view.editable || !(event.type in editHandlers))) {\n    handlers[event.type](view, event);\n  }\n}\n\neditHandlers.keydown = function (view, event) {\n  view.shiftKey = event.keyCode == 16 || event.shiftKey;\n\n  if (view.inDOMChange) {\n    if (view.inDOMChange.composing) {\n      return;\n    }\n\n    if (view.inDOMChange.ignoreKeyDownOnCompositionEnd(event)) {\n      return;\n    }\n\n    view.inDOMChange.finish();\n  }\n\n  view.lastKeyCode = event.keyCode;\n  view.lastKeyCodeTime = Date.now();\n\n  if (view.someProp(\"handleKeyDown\", function (f) {\n    return f(view, event);\n  }) || captureKeyDown(view, event)) {\n    event.preventDefault();\n  } else {\n    view.selectionReader.poll(\"key\");\n  }\n};\n\neditHandlers.keyup = function (view, e) {\n  if (e.keyCode == 16) {\n    view.shiftKey = false;\n  }\n};\n\neditHandlers.keypress = function (view, event) {\n  if (view.inDOMChange || !event.charCode || event.ctrlKey && !event.altKey || result.mac && event.metaKey) {\n    return;\n  }\n\n  if (view.someProp(\"handleKeyPress\", function (f) {\n    return f(view, event);\n  })) {\n    event.preventDefault();\n    return;\n  }\n\n  var sel = view.state.selection;\n\n  if (!(sel instanceof prosemirrorState.TextSelection) || !sel.$from.sameParent(sel.$to)) {\n    var text = String.fromCharCode(event.charCode);\n\n    if (!view.someProp(\"handleTextInput\", function (f) {\n      return f(view, sel.$from.pos, sel.$to.pos, text);\n    })) {\n      view.dispatch(view.state.tr.insertText(text).scrollIntoView());\n    }\n\n    event.preventDefault();\n  }\n};\n\nfunction eventCoords(event) {\n  return {\n    left: event.clientX,\n    top: event.clientY\n  };\n}\n\nfunction isNear(event, click) {\n  var dx = click.x - event.clientX,\n      dy = click.y - event.clientY;\n  return dx * dx + dy * dy < 100;\n}\n\nfunction runHandlerOnContext(view, propName, pos, inside, event) {\n  if (inside == -1) {\n    return false;\n  }\n\n  var $pos = view.state.doc.resolve(inside);\n\n  var loop = function (i) {\n    if (view.someProp(propName, function (f) {\n      return i > $pos.depth ? f(view, pos, $pos.nodeAfter, $pos.before(i), event, true) : f(view, pos, $pos.node(i), $pos.before(i), event, false);\n    })) {\n      return {\n        v: true\n      };\n    }\n  };\n\n  for (var i = $pos.depth + 1; i > 0; i--) {\n    var returned = loop(i);\n    if (returned) return returned.v;\n  }\n\n  return false;\n}\n\nfunction updateSelection(view, selection, origin) {\n  if (!view.focused) {\n    view.focus();\n  }\n\n  var tr = view.state.tr.setSelection(selection);\n\n  if (origin == \"pointer\") {\n    tr.setMeta(\"pointer\", true);\n  }\n\n  view.dispatch(tr);\n}\n\nfunction selectClickedLeaf(view, inside) {\n  if (inside == -1) {\n    return false;\n  }\n\n  var $pos = view.state.doc.resolve(inside),\n      node = $pos.nodeAfter;\n\n  if (node && node.isAtom && prosemirrorState.NodeSelection.isSelectable(node)) {\n    updateSelection(view, new prosemirrorState.NodeSelection($pos), \"pointer\");\n    return true;\n  }\n\n  return false;\n}\n\nfunction selectClickedNode(view, inside) {\n  if (inside == -1) {\n    return false;\n  }\n\n  var sel = view.state.selection,\n      selectedNode,\n      selectAt;\n\n  if (sel instanceof prosemirrorState.NodeSelection) {\n    selectedNode = sel.node;\n  }\n\n  var $pos = view.state.doc.resolve(inside);\n\n  for (var i = $pos.depth + 1; i > 0; i--) {\n    var node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i);\n\n    if (prosemirrorState.NodeSelection.isSelectable(node)) {\n      if (selectedNode && sel.$from.depth > 0 && i >= sel.$from.depth && $pos.before(sel.$from.depth + 1) == sel.$from.pos) {\n        selectAt = $pos.before(sel.$from.depth);\n      } else {\n        selectAt = $pos.before(i);\n      }\n\n      break;\n    }\n  }\n\n  if (selectAt != null) {\n    updateSelection(view, prosemirrorState.NodeSelection.create(view.state.doc, selectAt), \"pointer\");\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction handleSingleClick(view, pos, inside, event, selectNode) {\n  return runHandlerOnContext(view, \"handleClickOn\", pos, inside, event) || view.someProp(\"handleClick\", function (f) {\n    return f(view, pos, event);\n  }) || (selectNode ? selectClickedNode(view, inside) : selectClickedLeaf(view, inside));\n}\n\nfunction handleDoubleClick(view, pos, inside, event) {\n  return runHandlerOnContext(view, \"handleDoubleClickOn\", pos, inside, event) || view.someProp(\"handleDoubleClick\", function (f) {\n    return f(view, pos, event);\n  });\n}\n\nfunction handleTripleClick(view, pos, inside, event) {\n  return runHandlerOnContext(view, \"handleTripleClickOn\", pos, inside, event) || view.someProp(\"handleTripleClick\", function (f) {\n    return f(view, pos, event);\n  }) || defaultTripleClick(view, inside);\n}\n\nfunction defaultTripleClick(view, inside) {\n  var doc = view.state.doc;\n\n  if (inside == -1) {\n    if (doc.inlineContent) {\n      updateSelection(view, prosemirrorState.TextSelection.create(doc, 0, doc.content.size), \"pointer\");\n      return true;\n    }\n\n    return false;\n  }\n\n  var $pos = doc.resolve(inside);\n\n  for (var i = $pos.depth + 1; i > 0; i--) {\n    var node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i);\n    var nodePos = $pos.before(i);\n\n    if (node.inlineContent) {\n      updateSelection(view, prosemirrorState.TextSelection.create(doc, nodePos + 1, nodePos + 1 + node.content.size), \"pointer\");\n    } else if (prosemirrorState.NodeSelection.isSelectable(node)) {\n      updateSelection(view, prosemirrorState.NodeSelection.create(doc, nodePos), \"pointer\");\n    } else {\n      continue;\n    }\n\n    return true;\n  }\n}\n\nfunction forceDOMFlush(view) {\n  if (!view.inDOMChange) {\n    return false;\n  }\n\n  view.inDOMChange.finish(true);\n  return true;\n}\n\nvar selectNodeModifier = result.mac ? \"metaKey\" : \"ctrlKey\";\n\nhandlers.mousedown = function (view, event) {\n  view.shiftKey = event.shiftKey;\n  var flushed = forceDOMFlush(view);\n  var now = Date.now(),\n      type = \"singleClick\";\n\n  if (now - view.lastClick.time < 500 && isNear(event, view.lastClick) && !event[selectNodeModifier]) {\n    if (view.lastClick.type == \"singleClick\") {\n      type = \"doubleClick\";\n    } else if (view.lastClick.type == \"doubleClick\") {\n      type = \"tripleClick\";\n    }\n  }\n\n  view.lastClick = {\n    time: now,\n    x: event.clientX,\n    y: event.clientY,\n    type: type\n  };\n  var pos = view.posAtCoords(eventCoords(event));\n\n  if (!pos) {\n    return;\n  }\n\n  if (type == \"singleClick\") {\n    view.mouseDown = new MouseDown(view, pos, event, flushed);\n  } else if ((type == \"doubleClick\" ? handleDoubleClick : handleTripleClick)(view, pos.pos, pos.inside, event)) {\n    event.preventDefault();\n  } else {\n    view.selectionReader.poll(\"pointer\");\n  }\n};\n\nvar MouseDown = function MouseDown(view, pos, event, flushed) {\n  var this$1 = this;\n  this.view = view;\n  this.pos = pos;\n  this.event = event;\n  this.flushed = flushed;\n  this.selectNode = event[selectNodeModifier];\n  this.allowDefault = event.shiftKey;\n  var targetNode, targetPos;\n\n  if (pos.inside > -1) {\n    targetNode = view.state.doc.nodeAt(pos.inside);\n    targetPos = pos.inside;\n  } else {\n    var $pos = view.state.doc.resolve(pos.pos);\n    targetNode = $pos.parent;\n    targetPos = $pos.depth ? $pos.before() : 0;\n  }\n\n  this.mightDrag = null;\n  var target = flushed ? null : event.target;\n  var targetDesc = target ? view.docView.nearestDesc(target, true) : null;\n  this.target = targetDesc ? targetDesc.dom : null;\n\n  if (targetNode.type.spec.draggable && targetNode.type.spec.selectable !== false || view.state.selection instanceof prosemirrorState.NodeSelection && targetPos == view.state.selection.from) {\n    this.mightDrag = {\n      node: targetNode,\n      pos: targetPos,\n      addAttr: this.target && !this.target.draggable,\n      setUneditable: this.target && result.gecko && !this.target.hasAttribute(\"contentEditable\")\n    };\n  }\n\n  if (this.target && this.mightDrag && (this.mightDrag.addAttr || this.mightDrag.setUneditable)) {\n    this.view.domObserver.stop();\n\n    if (this.mightDrag.addAttr) {\n      this.target.draggable = true;\n    }\n\n    if (this.mightDrag.setUneditable) {\n      setTimeout(function () {\n        return this$1.target.setAttribute(\"contentEditable\", \"false\");\n      }, 20);\n    }\n\n    this.view.domObserver.start();\n  }\n\n  view.root.addEventListener(\"mouseup\", this.up = this.up.bind(this));\n  view.root.addEventListener(\"mousemove\", this.move = this.move.bind(this));\n  view.selectionReader.poll(\"pointer\");\n};\n\nMouseDown.prototype.done = function done() {\n  this.view.root.removeEventListener(\"mouseup\", this.up);\n  this.view.root.removeEventListener(\"mousemove\", this.move);\n\n  if (this.mightDrag && this.target) {\n    this.view.domObserver.stop();\n\n    if (this.mightDrag.addAttr) {\n      this.target.draggable = false;\n    }\n\n    if (this.mightDrag.setUneditable) {\n      this.target.removeAttribute(\"contentEditable\");\n    }\n\n    this.view.domObserver.start();\n  }\n\n  this.view.mouseDown = null;\n};\n\nMouseDown.prototype.up = function up(event) {\n  this.done();\n\n  if (!this.view.dom.contains(event.target.nodeType == 3 ? event.target.parentNode : event.target)) {\n    return;\n  }\n\n  if (this.allowDefault) {\n    // Force a cursor wrapper redraw if this was suppressed (to avoid an issue with IE drag-selection)\n    if (result.ie && needsCursorWrapper(this.view.state)) {\n      this.view.updateState(this.view.state);\n    }\n\n    this.view.selectionReader.poll(\"pointer\");\n  } else if (handleSingleClick(this.view, this.pos.pos, this.pos.inside, event, this.selectNode)) {\n    event.preventDefault();\n  } else if (this.flushed || // Chrome will sometimes treat a node selection as a\n  // cursor, but still report that the node is selected\n  // when asked through getSelection. You'll then get a\n  // situation where clicking at the point where that\n  // (hidden) cursor is doesn't change the selection, and\n  // thus doesn't get a reaction from ProseMirror. This\n  // works around that.\n  result.chrome && !(this.view.state.selection instanceof prosemirrorState.TextSelection) && (this.pos.pos == this.view.state.selection.from || this.pos.pos == this.view.state.selection.to)) {\n    updateSelection(this.view, prosemirrorState.Selection.near(this.view.state.doc.resolve(this.pos.pos)), \"pointer\");\n    event.preventDefault();\n  } else {\n    this.view.selectionReader.poll(\"pointer\");\n  }\n};\n\nMouseDown.prototype.move = function move(event) {\n  if (!this.allowDefault && (Math.abs(this.event.x - event.clientX) > 4 || Math.abs(this.event.y - event.clientY) > 4)) {\n    this.allowDefault = true;\n  }\n\n  this.view.selectionReader.poll(\"pointer\");\n};\n\nhandlers.touchdown = function (view) {\n  forceDOMFlush(view);\n  view.selectionReader.poll(\"pointer\");\n};\n\nhandlers.contextmenu = function (view) {\n  return forceDOMFlush(view);\n}; // Input compositions are hard. Mostly because the events fired by\n// browsers are A) very unpredictable and inconsistent, and B) not\n// cancelable.\n//\n// ProseMirror has the problem that it must not update the DOM during\n// a composition, or the browser will cancel it. What it does is keep\n// long-running operations (delayed DOM updates) when a composition is\n// active.\n//\n// We _do not_ trust the information in the composition events which,\n// apart from being very uninformative to begin with, is often just\n// plain wrong. Instead, when a composition ends, we parse the dom\n// around the original selection, and derive an update from that.\n\n\neditHandlers.compositionstart = editHandlers.compositionupdate = function (view) {\n  DOMChange.start(view, true);\n};\n\neditHandlers.compositionend = function (view, e) {\n  if (!view.inDOMChange) {\n    // We received a compositionend without having seen any previous\n    // events for the composition. If there's data in the event\n    // object, we assume that it's a real change, and start a\n    // composition. Otherwise, we just ignore it.\n    if (e.data) {\n      DOMChange.start(view, true);\n    } else {\n      return;\n    }\n  }\n\n  view.inDOMChange.compositionEnd(e);\n};\n\neditHandlers.input = function (view) {\n  var change = DOMChange.start(view);\n\n  if (!change.composing) {\n    change.finish();\n  }\n};\n\nfunction captureCopy(view, dom) {\n  // The extra wrapper is somehow necessary on IE/Edge to prevent the\n  // content from being mangled when it is put onto the clipboard\n  var doc = dom.ownerDocument;\n  var wrap = doc.body.appendChild(doc.createElement(\"div\"));\n  wrap.appendChild(dom);\n  wrap.style.cssText = \"position: fixed; left: -10000px; top: 10px\";\n  var sel = getSelection(),\n      range = doc.createRange();\n  range.selectNodeContents(dom); // Done because IE will fire a selectionchange moving the selection\n  // to its start when removeAllRanges is called and the editor still\n  // has focus (which will mess up the editor's selection state).\n\n  view.dom.blur();\n  sel.removeAllRanges();\n  sel.addRange(range);\n  setTimeout(function () {\n    doc.body.removeChild(wrap);\n    view.focus();\n  }, 50);\n} // This is very crude, but unfortunately both these browsers _pretend_\n// that they have a clipboard API—all the objects and methods are\n// there, they just don't work, and they are hard to test.\n\n\nvar brokenClipboardAPI = result.ie && result.ie_version < 15 || result.ios && result.webkit_version < 604;\n\nhandlers.copy = editHandlers.cut = function (view, e) {\n  var sel = view.state.selection,\n      cut = e.type == \"cut\";\n\n  if (sel.empty) {\n    return;\n  } // IE and Edge's clipboard interface is completely broken\n\n\n  var data = brokenClipboardAPI ? null : e.clipboardData;\n  var slice = sel.content();\n  var ref = serializeForClipboard(view, slice);\n  var dom = ref.dom;\n  var text = ref.text;\n\n  if (data) {\n    e.preventDefault();\n    data.clearData();\n    data.setData(\"text/html\", dom.innerHTML);\n    data.setData(\"text/plain\", text);\n  } else {\n    captureCopy(view, dom);\n  }\n\n  if (cut) {\n    view.dispatch(view.state.tr.deleteSelection().scrollIntoView().setMeta(\"uiEvent\", \"cut\"));\n  }\n};\n\nfunction sliceSingleNode(slice) {\n  return slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1 ? slice.content.firstChild : null;\n}\n\nfunction capturePaste(view, e) {\n  var doc = view.dom.ownerDocument;\n  var plainText = view.shiftKey || view.state.selection.$from.parent.type.spec.code;\n  var target = doc.body.appendChild(doc.createElement(plainText ? \"textarea\" : \"div\"));\n\n  if (!plainText) {\n    target.contentEditable = \"true\";\n  }\n\n  target.style.cssText = \"position: fixed; left: -10000px; top: 10px\";\n  target.focus();\n  setTimeout(function () {\n    view.focus();\n    doc.body.removeChild(target);\n\n    if (plainText) {\n      doPaste(view, target.value, null, e);\n    } else {\n      doPaste(view, target.textContent, target.innerHTML, e);\n    }\n  }, 50);\n}\n\nfunction doPaste(view, text, html, e) {\n  var slice = parseFromClipboard(view, text, html, view.shiftKey, view.state.selection.$from);\n\n  if (!slice) {\n    return false;\n  }\n\n  if (view.someProp(\"handlePaste\", function (f) {\n    return f(view, e, slice);\n  })) {\n    return true;\n  }\n\n  var singleNode = sliceSingleNode(slice);\n  var tr = singleNode ? view.state.tr.replaceSelectionWith(singleNode, view.shiftKey) : view.state.tr.replaceSelection(slice);\n  view.dispatch(tr.scrollIntoView().setMeta(\"paste\", true).setMeta(\"uiEvent\", \"paste\"));\n  return true;\n}\n\neditHandlers.paste = function (view, e) {\n  var data = brokenClipboardAPI ? null : e.clipboardData;\n\n  if (data && (doPaste(view, data.getData(\"text/plain\"), data.getData(\"text/html\"), e) || data.files.length > 0)) {\n    e.preventDefault();\n  } else {\n    capturePaste(view, e);\n  }\n};\n\nvar Dragging = function Dragging(slice, move) {\n  this.slice = slice;\n  this.move = move;\n};\n\nvar dragCopyModifier = result.mac ? \"altKey\" : \"ctrlKey\";\n\nhandlers.dragstart = function (view, e) {\n  var mouseDown = view.mouseDown;\n\n  if (mouseDown) {\n    mouseDown.done();\n  }\n\n  if (!e.dataTransfer) {\n    return;\n  }\n\n  var sel = view.state.selection;\n  var pos = sel.empty ? null : view.posAtCoords(eventCoords(e));\n\n  if (pos && pos.pos >= sel.from && pos.pos <= (sel instanceof prosemirrorState.NodeSelection ? sel.to - 1 : sel.to)) {// In selection\n  } else if (mouseDown && mouseDown.mightDrag) {\n    view.dispatch(view.state.tr.setSelection(prosemirrorState.NodeSelection.create(view.state.doc, mouseDown.mightDrag.pos)));\n  } else if (e.target && e.target.nodeType == 1) {\n    var desc = view.docView.nearestDesc(e.target, true);\n\n    if (!desc || !desc.node.type.spec.draggable || desc == view.docView) {\n      return;\n    }\n\n    view.dispatch(view.state.tr.setSelection(prosemirrorState.NodeSelection.create(view.state.doc, desc.posBefore)));\n  }\n\n  var slice = view.state.selection.content();\n  var ref = serializeForClipboard(view, slice);\n  var dom = ref.dom;\n  var text = ref.text;\n  e.dataTransfer.clearData();\n  e.dataTransfer.setData(brokenClipboardAPI ? \"Text\" : \"text/html\", dom.innerHTML);\n\n  if (!brokenClipboardAPI) {\n    e.dataTransfer.setData(\"text/plain\", text);\n  }\n\n  view.dragging = new Dragging(slice, !e[dragCopyModifier]);\n};\n\nhandlers.dragend = function (view) {\n  window.setTimeout(function () {\n    return view.dragging = null;\n  }, 50);\n};\n\neditHandlers.dragover = editHandlers.dragenter = function (_, e) {\n  return e.preventDefault();\n};\n\neditHandlers.drop = function (view, e) {\n  var dragging = view.dragging;\n  view.dragging = null;\n\n  if (!e.dataTransfer) {\n    return;\n  }\n\n  var eventPos = view.posAtCoords(eventCoords(e));\n\n  if (!eventPos) {\n    return;\n  }\n\n  var $mouse = view.state.doc.resolve(eventPos.pos);\n\n  if (!$mouse) {\n    return;\n  }\n\n  var slice = dragging && dragging.slice || parseFromClipboard(view, e.dataTransfer.getData(brokenClipboardAPI ? \"Text\" : \"text/plain\"), brokenClipboardAPI ? null : e.dataTransfer.getData(\"text/html\"), false, $mouse);\n\n  if (!slice) {\n    return;\n  }\n\n  e.preventDefault();\n\n  if (view.someProp(\"handleDrop\", function (f) {\n    return f(view, e, slice, dragging && dragging.move);\n  })) {\n    return;\n  }\n\n  var insertPos = slice ? prosemirrorTransform.dropPoint(view.state.doc, $mouse.pos, slice) : $mouse.pos;\n\n  if (insertPos == null) {\n    insertPos = $mouse.pos;\n  }\n\n  var tr = view.state.tr;\n\n  if (dragging && dragging.move) {\n    tr.deleteSelection();\n  }\n\n  var pos = tr.mapping.map(insertPos);\n  var isNode = slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1;\n  var beforeInsert = tr.doc;\n\n  if (isNode) {\n    tr.replaceRangeWith(pos, pos, slice.content.firstChild);\n  } else {\n    tr.replaceRange(pos, pos, slice);\n  }\n\n  if (tr.doc.eq(beforeInsert)) {\n    return;\n  }\n\n  var $pos = tr.doc.resolve(pos);\n\n  if (isNode && prosemirrorState.NodeSelection.isSelectable(slice.content.firstChild) && $pos.nodeAfter && $pos.nodeAfter.sameMarkup(slice.content.firstChild)) {\n    tr.setSelection(new prosemirrorState.NodeSelection($pos));\n  } else {\n    tr.setSelection(selectionBetween(view, $pos, tr.doc.resolve(tr.mapping.map(insertPos))));\n  }\n\n  view.focus();\n  view.dispatch(tr.setMeta(\"uiEvent\", \"drop\"));\n};\n\nhandlers.focus = function (view) {\n  if (!view.focused) {\n    view.dom.classList.add(\"ProseMirror-focused\");\n    view.focused = true;\n  }\n};\n\nhandlers.blur = function (view) {\n  if (view.focused) {\n    view.dom.classList.remove(\"ProseMirror-focused\");\n    view.focused = false;\n  }\n};\n\nhandlers.beforeinput = function (view, event) {\n  // We should probably do more with beforeinput events, but support\n  // is so spotty that I'm still waiting to see where they are going.\n  // Very specific hack to deal with backspace sometimes failing on\n  // Chrome Android when after an uneditable node.\n  if (result.chrome && result.android && event.inputType == \"deleteContentBackward\") {\n    var domChangeCount = view.domChangeCount;\n    setTimeout(function () {\n      if (view.domChangeCount != domChangeCount) {\n        return;\n      } // Event already had some effect\n      // This bug tends to close the virtual keyboard, so we refocus\n\n\n      view.dom.blur();\n      view.focus();\n\n      if (view.someProp(\"handleKeyDown\", function (f) {\n        return f(view, keyEvent(8, \"Backspace\"));\n      })) {\n        return;\n      }\n\n      var ref = view.state.selection;\n      var $cursor = ref.$cursor; // Crude approximation of backspace behavior when no command handled it\n\n      if ($cursor && $cursor.pos > 0) {\n        view.dispatch(view.state.tr.delete($cursor.pos - 1, $cursor.pos).scrollIntoView());\n      }\n    }, 50);\n  }\n}; // Make sure all handlers get registered\n\n\nfor (var prop in editHandlers) {\n  handlers[prop] = editHandlers[prop];\n}\n\nfunction compareObjs(a, b) {\n  if (a == b) {\n    return true;\n  }\n\n  for (var p in a) {\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (var p$1 in b) {\n    if (!(p$1 in a)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nvar WidgetType = function WidgetType(toDOM, spec) {\n  this.spec = spec || noSpec;\n  this.side = this.spec.side || 0;\n  this.toDOM = toDOM;\n};\n\nWidgetType.prototype.map = function map(mapping, span, offset, oldOffset) {\n  var ref = mapping.mapResult(span.from + oldOffset, this.side < 0 ? -1 : 1);\n  var pos = ref.pos;\n  var deleted = ref.deleted;\n  return deleted ? null : new Decoration(pos - offset, pos - offset, this);\n};\n\nWidgetType.prototype.valid = function valid() {\n  return true;\n};\n\nWidgetType.prototype.eq = function eq(other) {\n  return this == other || other instanceof WidgetType && (this.spec.key && this.spec.key == other.spec.key || this.toDOM == other.toDOM && compareObjs(this.spec, other.spec));\n};\n\nvar InlineType = function InlineType(attrs, spec) {\n  this.spec = spec || noSpec;\n  this.attrs = attrs;\n};\n\nInlineType.prototype.map = function map(mapping, span, offset, oldOffset) {\n  var from = mapping.map(span.from + oldOffset, this.spec.inclusiveStart ? -1 : 1) - offset;\n  var to = mapping.map(span.to + oldOffset, this.spec.inclusiveEnd ? 1 : -1) - offset;\n  return from >= to ? null : new Decoration(from, to, this);\n};\n\nInlineType.prototype.valid = function valid(_, span) {\n  return span.from < span.to;\n};\n\nInlineType.prototype.eq = function eq(other) {\n  return this == other || other instanceof InlineType && compareObjs(this.attrs, other.attrs) && compareObjs(this.spec, other.spec);\n};\n\nInlineType.is = function is(span) {\n  return span.type instanceof InlineType;\n};\n\nvar NodeType = function NodeType(attrs, spec) {\n  this.spec = spec || noSpec;\n  this.attrs = attrs;\n};\n\nNodeType.prototype.map = function map(mapping, span, offset, oldOffset) {\n  var from = mapping.mapResult(span.from + oldOffset, 1);\n\n  if (from.deleted) {\n    return null;\n  }\n\n  var to = mapping.mapResult(span.to + oldOffset, -1);\n\n  if (to.deleted || to.pos <= from.pos) {\n    return null;\n  }\n\n  return new Decoration(from.pos - offset, to.pos - offset, this);\n};\n\nNodeType.prototype.valid = function valid(node, span) {\n  var ref = node.content.findIndex(span.from);\n  var index = ref.index;\n  var offset = ref.offset;\n  return offset == span.from && offset + node.child(index).nodeSize == span.to;\n};\n\nNodeType.prototype.eq = function eq(other) {\n  return this == other || other instanceof NodeType && compareObjs(this.attrs, other.attrs) && compareObjs(this.spec, other.spec);\n}; // ::- Decoration objects can be provided to the view through the\n// [`decorations` prop](#view.EditorProps.decorations). They come in\n// several variants—see the static members of this class for details.\n\n\nvar Decoration = function Decoration(from, to, type) {\n  // :: number\n  // The start position of the decoration.\n  this.from = from; // :: number\n  // The end position. Will be the same as `from` for [widget\n  // decorations](#view.Decoration^widget).\n\n  this.to = to;\n  this.type = type;\n};\n\nvar prototypeAccessors$2 = {\n  spec: {}\n};\n\nDecoration.prototype.copy = function copy(from, to) {\n  return new Decoration(from, to, this.type);\n};\n\nDecoration.prototype.eq = function eq(other) {\n  return this.type.eq(other.type) && this.from == other.from && this.to == other.to;\n};\n\nDecoration.prototype.map = function map(mapping, offset, oldOffset) {\n  return this.type.map(mapping, this, offset, oldOffset);\n}; // :: (number, union<(view: EditorView, getPos: () → number) → dom.Node, dom.Node>, ?Object) → Decoration\n// Creates a widget decoration, which is a DOM node that's shown in\n// the document at the given position. It is recommended that you\n// delay rendering the widget by passing a function that will be\n// called when the widget is actually drawn in a view, but you can\n// also directly pass a DOM node. `getPos` can be used to find the\n// widget's current document position.\n//\n// spec::- These options are supported:\n//\n//   side:: ?number\n//   Controls which side of the document position this widget is\n//   associated with. When negative, it is drawn before a cursor\n//   at its position, and content inserted at that position ends\n//   up after the widget. When zero (the default) or positive, the\n//   widget is drawn after the cursor and content inserted there\n//   ends up before the widget.\n//\n//   When there are multiple widgets at a given position, their\n//   `side` values determine the order in which they appear. Those\n//   with lower values appear first. The ordering of widgets with\n//   the same `side` value is unspecified.\n//\n//   When `marks` is null, `side` also determines the marks that\n//   the widget is wrapped in—those of the node before when\n//   negative, those of the node after when positive.\n//\n//   marks:: ?[Mark]\n//   The precise set of marks to draw around the widget.\n//\n//   stopEvent:: ?(event: dom.Event) → bool\n//   Can be used to control which DOM events, when they bubble out\n//   of this widget, the editor view should ignore.\n//\n//   key:: ?string\n//   When comparing decorations of this type (in order to decide\n//   whether it needs to be redrawn), ProseMirror will by default\n//   compare the widget DOM node by identity. If you pass a key,\n//   that key will be compared instead, which can be useful when\n//   you generate decorations on the fly and don't want to store\n//   and reuse DOM nodes. Make sure that any widgets with the same\n//   key are interchangeable—if widgets differ in, for example,\n//   the behavior of some event handler, they should get\n//   different keys.\n\n\nDecoration.widget = function widget(pos, toDOM, spec) {\n  return new Decoration(pos, pos, new WidgetType(toDOM, spec));\n}; // :: (number, number, DecorationAttrs, ?Object) → Decoration\n// Creates an inline decoration, which adds the given attributes to\n// each inline node between `from` and `to`.\n//\n// spec::- These options are recognized:\n//\n//   inclusiveStart:: ?bool\n//   Determines how the left side of the decoration is\n//   [mapped](#transform.Position_Mapping) when content is\n//   inserted directly at that position. By default, the decoration\n//   won't include the new content, but you can set this to `true`\n//   to make it inclusive.\n//\n//   inclusiveEnd:: ?bool\n//   Determines how the right side of the decoration is mapped.\n//   See\n//   [`inclusiveStart`](#view.Decoration^inline^spec.inclusiveStart).\n\n\nDecoration.inline = function inline(from, to, attrs, spec) {\n  return new Decoration(from, to, new InlineType(attrs, spec));\n}; // :: (number, number, DecorationAttrs, ?Object) → Decoration\n// Creates a node decoration. `from` and `to` should point precisely\n// before and after a node in the document. That node, and only that\n// node, will receive the given attributes.\n\n\nDecoration.node = function node(from, to, attrs, spec) {\n  return new Decoration(from, to, new NodeType(attrs, spec));\n}; // :: Object\n// The spec provided when creating this decoration. Can be useful\n// if you've stored extra information in that object.\n\n\nprototypeAccessors$2.spec.get = function () {\n  return this.type.spec;\n};\n\nObject.defineProperties(Decoration.prototype, prototypeAccessors$2); // DecorationAttrs:: interface\n// A set of attributes to add to a decorated node. Most properties\n// simply directly correspond to DOM attributes of the same name,\n// which will be set to the property's value. These are exceptions:\n//\n//   class:: ?string\n//   A CSS class name or a space-separated set of class names to be\n//   _added_ to the classes that the node already had.\n//\n//   style:: ?string\n//   A string of CSS to be _added_ to the node's existing `style` property.\n//\n//   nodeName:: ?string\n//   When non-null, the target node is wrapped in a DOM element of\n//   this type (and the other attributes are applied to this element).\n\nvar none = [];\nvar noSpec = {}; // ::- A collection of [decorations](#view.Decoration), organized in\n// such a way that the drawing algorithm can efficiently use and\n// compare them. This is a persistent data structure—it is not\n// modified, updates create a new value.\n\nvar DecorationSet = function DecorationSet(local, children) {\n  this.local = local && local.length ? local : none;\n  this.children = children && children.length ? children : none;\n}; // :: (Node, [Decoration]) → DecorationSet\n// Create a set of decorations, using the structure of the given\n// document.\n\n\nDecorationSet.create = function create(doc, decorations) {\n  return decorations.length ? buildTree(decorations, doc, 0, noSpec) : empty;\n}; // :: (?number, ?number, ?(spec: Object) → bool) → [Decoration]\n// Find all decorations in this set which touch the given range\n// (including decorations that start or end directly at the\n// boundaries) and match the given predicate on their spec. When\n// `start` and `end` are omitted, all decorations in the set are\n// considered. When `predicate` isn't given, all decorations are\n// asssumed to match.\n\n\nDecorationSet.prototype.find = function find(start, end, predicate) {\n  var result = [];\n  this.findInner(start == null ? 0 : start, end == null ? 1e9 : end, result, 0, predicate);\n  return result;\n};\n\nDecorationSet.prototype.findInner = function findInner(start, end, result, offset, predicate) {\n  var this$1 = this;\n\n  for (var i = 0; i < this.local.length; i++) {\n    var span = this$1.local[i];\n\n    if (span.from <= end && span.to >= start && (!predicate || predicate(span.spec))) {\n      result.push(span.copy(span.from + offset, span.to + offset));\n    }\n  }\n\n  for (var i$1 = 0; i$1 < this.children.length; i$1 += 3) {\n    if (this$1.children[i$1] < end && this$1.children[i$1 + 1] > start) {\n      var childOff = this$1.children[i$1] + 1;\n      this$1.children[i$1 + 2].findInner(start - childOff, end - childOff, result, offset + childOff, predicate);\n    }\n  }\n}; // :: (Mapping, Node, ?Object) → DecorationSet\n// Map the set of decorations in response to a change in the\n// document.\n//\n// options::- An optional set of options.\n//\n//   onRemove:: ?(decorationSpec: Object)\n//   When given, this function will be called for each decoration\n//   that gets dropped as a result of the mapping, passing the\n//   spec of that decoration.\n\n\nDecorationSet.prototype.map = function map(mapping, doc, options) {\n  if (this == empty || mapping.maps.length == 0) {\n    return this;\n  }\n\n  return this.mapInner(mapping, doc, 0, 0, options || noSpec);\n};\n\nDecorationSet.prototype.mapInner = function mapInner(mapping, node, offset, oldOffset, options) {\n  var this$1 = this;\n  var newLocal;\n\n  for (var i = 0; i < this.local.length; i++) {\n    var mapped = this$1.local[i].map(mapping, offset, oldOffset);\n\n    if (mapped && mapped.type.valid(node, mapped)) {\n      (newLocal || (newLocal = [])).push(mapped);\n    } else if (options.onRemove) {\n      options.onRemove(this$1.local[i].spec);\n    }\n  }\n\n  if (this.children.length) {\n    return mapChildren(this.children, newLocal, mapping, node, offset, oldOffset, options);\n  } else {\n    return newLocal ? new DecorationSet(newLocal.sort(byPos)) : empty;\n  }\n}; // :: (Node, [Decoration]) → DecorationSet\n// Add the given array of decorations to the ones in the set,\n// producing a new set. Needs access to the current document to\n// create the appropriate tree structure.\n\n\nDecorationSet.prototype.add = function add(doc, decorations) {\n  if (!decorations.length) {\n    return this;\n  }\n\n  if (this == empty) {\n    return DecorationSet.create(doc, decorations);\n  }\n\n  return this.addInner(doc, decorations, 0);\n};\n\nDecorationSet.prototype.addInner = function addInner(doc, decorations, offset) {\n  var this$1 = this;\n  var children,\n      childIndex = 0;\n  doc.forEach(function (childNode, childOffset) {\n    var baseOffset = childOffset + offset,\n        found;\n\n    if (!(found = takeSpansForNode(decorations, childNode, baseOffset))) {\n      return;\n    }\n\n    if (!children) {\n      children = this$1.children.slice();\n    }\n\n    while (childIndex < children.length && children[childIndex] < childOffset) {\n      childIndex += 3;\n    }\n\n    if (children[childIndex] == childOffset) {\n      children[childIndex + 2] = children[childIndex + 2].addInner(childNode, found, baseOffset + 1);\n    } else {\n      children.splice(childIndex, 0, childOffset, childOffset + childNode.nodeSize, buildTree(found, childNode, baseOffset + 1, noSpec));\n    }\n\n    childIndex += 3;\n  });\n  var local = moveSpans(childIndex ? withoutNulls(decorations) : decorations, -offset);\n  return new DecorationSet(local.length ? this.local.concat(local).sort(byPos) : this.local, children || this.children);\n}; // :: ([Decoration]) → DecorationSet\n// Create a new set that contains the decorations in this set, minus\n// the ones in the given array.\n\n\nDecorationSet.prototype.remove = function remove(decorations) {\n  if (decorations.length == 0 || this == empty) {\n    return this;\n  }\n\n  return this.removeInner(decorations, 0);\n};\n\nDecorationSet.prototype.removeInner = function removeInner(decorations, offset) {\n  var this$1 = this;\n  var children = this.children,\n      local = this.local;\n\n  for (var i = 0; i < children.length; i += 3) {\n    var found = void 0,\n        from = children[i] + offset,\n        to = children[i + 1] + offset;\n\n    for (var j = 0, span = void 0; j < decorations.length; j++) {\n      if (span = decorations[j]) {\n        if (span.from > from && span.to < to) {\n          decorations[j] = null;\n          (found || (found = [])).push(span);\n        }\n      }\n    }\n\n    if (!found) {\n      continue;\n    }\n\n    if (children == this$1.children) {\n      children = this$1.children.slice();\n    }\n\n    var removed = children[i + 2].removeInner(found, from + 1);\n\n    if (removed != empty) {\n      children[i + 2] = removed;\n    } else {\n      children.splice(i, 3);\n      i -= 3;\n    }\n  }\n\n  if (local.length) {\n    for (var i$1 = 0, span$1 = void 0; i$1 < decorations.length; i$1++) {\n      if (span$1 = decorations[i$1]) {\n        for (var j$1 = 0; j$1 < local.length; j$1++) {\n          if (local[j$1].type.eq(span$1.type)) {\n            if (local == this$1.local) {\n              local = this$1.local.slice();\n            }\n\n            local.splice(j$1--, 1);\n          }\n        }\n      }\n    }\n  }\n\n  if (children == this.children && local == this.local) {\n    return this;\n  }\n\n  return local.length || children.length ? new DecorationSet(local, children) : empty;\n};\n\nDecorationSet.prototype.forChild = function forChild(offset, node) {\n  var this$1 = this;\n\n  if (this == empty) {\n    return this;\n  }\n\n  if (node.isLeaf) {\n    return DecorationSet.empty;\n  }\n\n  var child, local;\n\n  for (var i = 0; i < this.children.length; i += 3) {\n    if (this$1.children[i] >= offset) {\n      if (this$1.children[i] == offset) {\n        child = this$1.children[i + 2];\n      }\n\n      break;\n    }\n  }\n\n  var start = offset + 1,\n      end = start + node.content.size;\n\n  for (var i$1 = 0; i$1 < this.local.length; i$1++) {\n    var dec = this$1.local[i$1];\n\n    if (dec.from < end && dec.to > start && dec.type instanceof InlineType) {\n      var from = Math.max(start, dec.from) - start,\n          to = Math.min(end, dec.to) - start;\n\n      if (from < to) {\n        (local || (local = [])).push(dec.copy(from, to));\n      }\n    }\n  }\n\n  if (local) {\n    var localSet = new DecorationSet(local.sort(byPos));\n    return child ? new DecorationGroup([localSet, child]) : localSet;\n  }\n\n  return child || empty;\n};\n\nDecorationSet.prototype.eq = function eq(other) {\n  var this$1 = this;\n\n  if (this == other) {\n    return true;\n  }\n\n  if (!(other instanceof DecorationSet) || this.local.length != other.local.length || this.children.length != other.children.length) {\n    return false;\n  }\n\n  for (var i = 0; i < this.local.length; i++) {\n    if (!this$1.local[i].eq(other.local[i])) {\n      return false;\n    }\n  }\n\n  for (var i$1 = 0; i$1 < this.children.length; i$1 += 3) {\n    if (this$1.children[i$1] != other.children[i$1] || this$1.children[i$1 + 1] != other.children[i$1 + 1] || !this$1.children[i$1 + 2].eq(other.children[i$1 + 2])) {\n      return false;\n    }\n  }\n\n  return false;\n};\n\nDecorationSet.prototype.locals = function locals(node) {\n  return removeOverlap(this.localsInner(node));\n};\n\nDecorationSet.prototype.localsInner = function localsInner(node) {\n  var this$1 = this;\n\n  if (this == empty) {\n    return none;\n  }\n\n  if (node.inlineContent || !this.local.some(InlineType.is)) {\n    return this.local;\n  }\n\n  var result = [];\n\n  for (var i = 0; i < this.local.length; i++) {\n    if (!(this$1.local[i].type instanceof InlineType)) {\n      result.push(this$1.local[i]);\n    }\n  }\n\n  return result;\n};\n\nvar empty = new DecorationSet(); // :: DecorationSet\n// The empty set of decorations.\n\nDecorationSet.empty = empty;\nDecorationSet.removeOverlap = removeOverlap; // :- An abstraction that allows the code dealing with decorations to\n// treat multiple DecorationSet objects as if it were a single object\n// with (a subset of) the same interface.\n\nvar DecorationGroup = function DecorationGroup(members) {\n  this.members = members;\n};\n\nDecorationGroup.prototype.forChild = function forChild(offset, child) {\n  var this$1 = this;\n\n  if (child.isLeaf) {\n    return DecorationSet.empty;\n  }\n\n  var found = [];\n\n  for (var i = 0; i < this.members.length; i++) {\n    var result = this$1.members[i].forChild(offset, child);\n\n    if (result == empty) {\n      continue;\n    }\n\n    if (result instanceof DecorationGroup) {\n      found = found.concat(result.members);\n    } else {\n      found.push(result);\n    }\n  }\n\n  return DecorationGroup.from(found);\n};\n\nDecorationGroup.prototype.eq = function eq(other) {\n  var this$1 = this;\n\n  if (!(other instanceof DecorationGroup) || other.members.length != this.members.length) {\n    return false;\n  }\n\n  for (var i = 0; i < this.members.length; i++) {\n    if (!this$1.members[i].eq(other.members[i])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nDecorationGroup.prototype.locals = function locals(node) {\n  var this$1 = this;\n  var result,\n      sorted = true;\n\n  for (var i = 0; i < this.members.length; i++) {\n    var locals = this$1.members[i].localsInner(node);\n\n    if (!locals.length) {\n      continue;\n    }\n\n    if (!result) {\n      result = locals;\n    } else {\n      if (sorted) {\n        result = result.slice();\n        sorted = false;\n      }\n\n      for (var j = 0; j < locals.length; j++) {\n        result.push(locals[j]);\n      }\n    }\n  }\n\n  return result ? removeOverlap(sorted ? result : result.sort(byPos)) : none;\n}; // : ([DecorationSet]) → union<DecorationSet, DecorationGroup>\n// Create a group for the given array of decoration sets, or return\n// a single set when possible.\n\n\nDecorationGroup.from = function from(members) {\n  switch (members.length) {\n    case 0:\n      return empty;\n\n    case 1:\n      return members[0];\n\n    default:\n      return new DecorationGroup(members);\n  }\n};\n\nfunction mapChildren(oldChildren, newLocal, mapping, node, offset, oldOffset, options) {\n  var children = oldChildren.slice(); // Mark the children that are directly touched by changes, and\n  // move those that are after the changes.\n\n  var shift = function (oldStart, oldEnd, newStart, newEnd) {\n    for (var i = 0; i < children.length; i += 3) {\n      var end = children[i + 1],\n          dSize = void 0;\n\n      if (end == -1 || oldStart > end + oldOffset) {\n        continue;\n      }\n\n      if (oldEnd >= children[i] + oldOffset) {\n        children[i + 1] = -1;\n      } else if (dSize = newEnd - newStart - (oldEnd - oldStart) + (oldOffset - offset)) {\n        children[i] += dSize;\n        children[i + 1] += dSize;\n      }\n    }\n  };\n\n  for (var i = 0; i < mapping.maps.length; i++) {\n    mapping.maps[i].forEach(shift);\n  } // Find the child nodes that still correspond to a single node,\n  // recursively call mapInner on them and update their positions.\n\n\n  var mustRebuild = false;\n\n  for (var i$1 = 0; i$1 < children.length; i$1 += 3) {\n    if (children[i$1 + 1] == -1) {\n      // Touched nodes\n      var from = mapping.map(children[i$1] + oldOffset),\n          fromLocal = from - offset;\n\n      if (fromLocal < 0 || fromLocal >= node.content.size) {\n        mustRebuild = true;\n        continue;\n      } // Must read oldChildren because children was tagged with -1\n\n\n      var to = mapping.map(oldChildren[i$1 + 1] + oldOffset, -1),\n          toLocal = to - offset;\n      var ref = node.content.findIndex(fromLocal);\n      var index = ref.index;\n      var childOffset = ref.offset;\n      var childNode = node.maybeChild(index);\n\n      if (childNode && childOffset == fromLocal && childOffset + childNode.nodeSize == toLocal) {\n        var mapped = children[i$1 + 2].mapInner(mapping, childNode, from + 1, children[i$1] + oldOffset + 1, options);\n\n        if (mapped != empty) {\n          children[i$1] = fromLocal;\n          children[i$1 + 1] = toLocal;\n          children[i$1 + 2] = mapped;\n        } else {\n          children[i$1 + 1] = -2;\n          mustRebuild = true;\n        }\n      } else {\n        mustRebuild = true;\n      }\n    }\n  } // Remaining children must be collected and rebuilt into the appropriate structure\n\n\n  if (mustRebuild) {\n    var decorations = mapAndGatherRemainingDecorations(children, oldChildren, newLocal || [], mapping, offset, oldOffset, options);\n    var built = buildTree(decorations, node, 0, options);\n    newLocal = built.local;\n\n    for (var i$2 = 0; i$2 < children.length; i$2 += 3) {\n      if (children[i$2 + 1] < 0) {\n        children.splice(i$2, 3);\n        i$2 -= 3;\n      }\n    }\n\n    for (var i$3 = 0, j = 0; i$3 < built.children.length; i$3 += 3) {\n      var from$1 = built.children[i$3];\n\n      while (j < children.length && children[j] < from$1) {\n        j += 3;\n      }\n\n      children.splice(j, 0, built.children[i$3], built.children[i$3 + 1], built.children[i$3 + 2]);\n    }\n  }\n\n  return new DecorationSet(newLocal && newLocal.sort(byPos), children);\n}\n\nfunction moveSpans(spans, offset) {\n  if (!offset || !spans.length) {\n    return spans;\n  }\n\n  var result = [];\n\n  for (var i = 0; i < spans.length; i++) {\n    var span = spans[i];\n    result.push(new Decoration(span.from + offset, span.to + offset, span.type));\n  }\n\n  return result;\n}\n\nfunction mapAndGatherRemainingDecorations(children, oldChildren, decorations, mapping, offset, oldOffset, options) {\n  // Gather all decorations from the remaining marked children\n  function gather(set, oldOffset) {\n    for (var i = 0; i < set.local.length; i++) {\n      var mapped = set.local[i].map(mapping, offset, oldOffset);\n\n      if (mapped) {\n        decorations.push(mapped);\n      } else if (options.onRemove) {\n        options.onRemove(set.local[i].spec);\n      }\n    }\n\n    for (var i$1 = 0; i$1 < set.children.length; i$1 += 3) {\n      gather(set.children[i$1 + 2], set.children[i$1] + oldOffset + 1);\n    }\n  }\n\n  for (var i = 0; i < children.length; i += 3) {\n    if (children[i + 1] == -1) {\n      gather(children[i + 2], oldChildren[i] + oldOffset + 1);\n    }\n  }\n\n  return decorations;\n}\n\nfunction takeSpansForNode(spans, node, offset) {\n  if (node.isLeaf) {\n    return null;\n  }\n\n  var end = offset + node.nodeSize,\n      found = null;\n\n  for (var i = 0, span = void 0; i < spans.length; i++) {\n    if ((span = spans[i]) && span.from > offset && span.to < end) {\n      (found || (found = [])).push(span);\n      spans[i] = null;\n    }\n  }\n\n  return found;\n}\n\nfunction withoutNulls(array) {\n  var result = [];\n\n  for (var i = 0; i < array.length; i++) {\n    if (array[i] != null) {\n      result.push(array[i]);\n    }\n  }\n\n  return result;\n} // : ([Decoration], Node, number) → DecorationSet\n// Build up a tree that corresponds to a set of decorations. `offset`\n// is a base offset that should be subtractet from the `from` and `to`\n// positions in the spans (so that we don't have to allocate new spans\n// for recursive calls).\n\n\nfunction buildTree(spans, node, offset, options) {\n  var children = [],\n      hasNulls = false;\n  node.forEach(function (childNode, localStart) {\n    var found = takeSpansForNode(spans, childNode, localStart + offset);\n\n    if (found) {\n      hasNulls = true;\n      var subtree = buildTree(found, childNode, offset + localStart + 1, options);\n\n      if (subtree != empty) {\n        children.push(localStart, localStart + childNode.nodeSize, subtree);\n      }\n    }\n  });\n  var locals = moveSpans(hasNulls ? withoutNulls(spans) : spans, -offset).sort(byPos);\n\n  for (var i = 0; i < locals.length; i++) {\n    if (!locals[i].type.valid(node, locals[i])) {\n      if (options.onRemove) {\n        options.onRemove(locals[i].spec);\n      }\n\n      locals.splice(i--, 1);\n    }\n  }\n\n  return locals.length || children.length ? new DecorationSet(locals, children) : empty;\n} // : (Decoration, Decoration) → number\n// Used to sort decorations so that ones with a low start position\n// come first, and within a set with the same start position, those\n// with an smaller end position come first.\n\n\nfunction byPos(a, b) {\n  return a.from - b.from || a.to - b.to;\n} // : ([Decoration]) → [Decoration]\n// Scan a sorted array of decorations for partially overlapping spans,\n// and split those so that only fully overlapping spans are left (to\n// make subsequent rendering easier). Will return the input array if\n// no partially overlapping spans are found (the common case).\n\n\nfunction removeOverlap(spans) {\n  var working = spans;\n\n  for (var i = 0; i < working.length - 1; i++) {\n    var span = working[i];\n\n    if (span.from != span.to) {\n      for (var j = i + 1; j < working.length; j++) {\n        var next = working[j];\n\n        if (next.from == span.from) {\n          if (next.to != span.to) {\n            if (working == spans) {\n              working = spans.slice();\n            } // Followed by a partially overlapping larger span. Split that\n            // span.\n\n\n            working[j] = next.copy(next.from, span.to);\n            insertAhead(working, j + 1, next.copy(span.to, next.to));\n          }\n\n          continue;\n        } else {\n          if (next.from < span.to) {\n            if (working == spans) {\n              working = spans.slice();\n            } // The end of this one overlaps with a subsequent span. Split\n            // this one.\n\n\n            working[i] = span.copy(span.from, next.from);\n            insertAhead(working, j, span.copy(next.from, span.to));\n          }\n\n          break;\n        }\n      }\n    }\n  }\n\n  return working;\n}\n\nfunction insertAhead(array, i, deco) {\n  while (i < array.length && byPos(deco, array[i]) > 0) {\n    i++;\n  }\n\n  array.splice(i, 0, deco);\n} // : (EditorView) → union<DecorationSet, DecorationGroup>\n// Get the decorations associated with the current props of a view.\n\n\nfunction viewDecorations(view) {\n  var found = [];\n  view.someProp(\"decorations\", function (f) {\n    var result = f(view.state);\n\n    if (result && result != empty) {\n      found.push(result);\n    }\n  });\n\n  if (view.cursorWrapper) {\n    found.push(DecorationSet.create(view.state.doc, [view.cursorWrapper.deco]));\n  }\n\n  return DecorationGroup.from(found);\n} // ::- An editor view manages the DOM structure that represents an\n// editable document. Its state and behavior are determined by its\n// [props](#view.DirectEditorProps).\n\n\nvar EditorView = function EditorView(place, props) {\n  this._props = props; // :: EditorState\n  // The view's current [state](#state.EditorState).\n\n  this.state = props.state;\n  this.dispatch = this.dispatch.bind(this);\n  this._root = null;\n  this.focused = false; // :: dom.Element\n  // An editable DOM node containing the document. (You probably\n  // should not directly interfere with its content.)\n\n  this.dom = place && place.mount || document.createElement(\"div\");\n\n  if (place) {\n    if (place.appendChild) {\n      place.appendChild(this.dom);\n    } else if (place.apply) {\n      place(this.dom);\n    } else if (place.mount) {\n      this.mounted = true;\n    }\n  }\n\n  this.editable = getEditable(this);\n  this.redraw = false;\n  this.cursorWrapper = null;\n  updateCursorWrapper(this);\n  this.nodeViews = buildNodeViews(this);\n  this.docView = docViewDesc(this.state.doc, computeDocDeco(this), viewDecorations(this), this.dom, this);\n  this.lastSelectedViewDesc = null; // :: ?{slice: Slice, move: bool}\n  // When editor content is being dragged, this object contains\n  // information about the dragged slice and whether it is being\n  // copied or moved. At any other time, it is null.\n\n  this.dragging = null;\n  initInput(this); // Must be done before creating a SelectionReader\n\n  this.selectionReader = new SelectionReader(this);\n  this.pluginViews = [];\n  this.updatePluginViews();\n};\n\nvar prototypeAccessors = {\n  props: {},\n  root: {}\n}; // :: DirectEditorProps\n// The view's current [props](#view.EditorProps).\n\nprototypeAccessors.props.get = function () {\n  var this$1 = this;\n\n  if (this._props.state != this.state) {\n    var prev = this._props;\n    this._props = {};\n\n    for (var name in prev) {\n      this$1._props[name] = prev[name];\n    }\n\n    this._props.state = this.state;\n  }\n\n  return this._props;\n}; // :: (DirectEditorProps)\n// Update the view's props. Will immediately cause an update to\n// the DOM.\n\n\nEditorView.prototype.update = function update(props) {\n  if (props.handleDOMEvents != this._props.handleDOMEvents) {\n    ensureListeners(this);\n  }\n\n  this._props = props;\n  var nodeViews = buildNodeViews(this);\n\n  if (changedNodeViews(nodeViews, this.nodeViews)) {\n    this.nodeViews = nodeViews;\n    this.redraw = true;\n  }\n\n  this.updateState(props.state);\n}; // :: (DirectEditorProps)\n// Update the view by updating existing props object with the object\n// given as argument. Equivalent to `view.update(Object.assign({},\n// view.props, props))`.\n\n\nEditorView.prototype.setProps = function setProps(props) {\n  var this$1 = this;\n  var updated = {};\n\n  for (var name in this$1._props) {\n    updated[name] = this$1._props[name];\n  }\n\n  updated.state = this.state;\n\n  for (var name$1 in props) {\n    updated[name$1] = props[name$1];\n  }\n\n  this.update(updated);\n}; // :: (EditorState)\n// Update the editor's `state` prop, without touching any of the\n// other props.\n\n\nEditorView.prototype.updateState = function updateState(state) {\n  var this$1 = this;\n  var prev = this.state;\n  this.state = state;\n\n  if (prev.plugins != state.plugins) {\n    ensureListeners(this);\n  }\n\n  this.domObserver.flush();\n\n  if (this.inDOMChange && this.inDOMChange.stateUpdated(state)) {\n    return;\n  }\n\n  var prevEditable = this.editable;\n  this.editable = getEditable(this);\n  updateCursorWrapper(this);\n  var innerDeco = viewDecorations(this),\n      outerDeco = computeDocDeco(this);\n  var scroll = prev.config != state.config ? \"reset\" : state.scrollToSelection > prev.scrollToSelection ? \"to selection\" : \"preserve\";\n  var updateDoc = this.redraw || !this.docView.matchesNode(state.doc, outerDeco, innerDeco);\n  var updateSel = updateDoc || !state.selection.eq(prev.selection) || this.selectionReader.domChanged();\n  var oldScrollPos = scroll == \"preserve\" && updateSel && storeScrollPos(this);\n\n  if (updateSel) {\n    this.domObserver.stop();\n    var forceSelUpdate = false;\n\n    if (updateDoc) {\n      // Work around an issue in Chrome where changing the DOM\n      // around the active selection puts it into a broken state\n      // where the thing the user sees differs from the selection\n      // reported by the Selection object (#710)\n      var startSelContext = result.chrome && selectionContext(this.root);\n\n      if (this.redraw || !this.docView.update(state.doc, outerDeco, innerDeco, this)) {\n        this.docView.destroy();\n        this.docView = docViewDesc(state.doc, outerDeco, innerDeco, this.dom, this);\n        this.redraw = false;\n      }\n\n      this.selectionReader.clearDOMState();\n\n      if (startSelContext) {\n        forceSelUpdate = needChromeSelectionForce(startSelContext, this.root);\n      }\n    } // Work around for an issue where an update arriving right between\n    // a DOM selection change and the \"selectionchange\" event for it\n    // can cause a spurious DOM selection update, disrupting mouse\n    // drag selection.\n\n\n    if (forceSelUpdate || !(this.mouseDown && this.selectionReader.domChanged() && anchorInRightPlace(this))) {\n      selectionToDOM(this, false, forceSelUpdate);\n    } else {\n      syncNodeSelection(this, state.selection);\n    }\n\n    this.domObserver.start();\n  }\n\n  if (prevEditable != this.editable) {\n    this.selectionReader.editableChanged();\n  }\n\n  this.updatePluginViews(prev);\n\n  if (scroll == \"reset\") {\n    this.dom.scrollTop = 0;\n  } else if (scroll == \"to selection\") {\n    var startDOM = this.root.getSelection().focusNode;\n\n    if (this.someProp(\"handleScrollToSelection\", function (f) {\n      return f(this$1);\n    })) {} // Handled\n    else if (state.selection instanceof prosemirrorState.NodeSelection) {\n        scrollRectIntoView(this, this.docView.domAfterPos(state.selection.from).getBoundingClientRect(), startDOM);\n      } else {\n        scrollRectIntoView(this, this.coordsAtPos(state.selection.head), startDOM);\n      }\n  } else if (oldScrollPos) {\n    resetScrollPos(oldScrollPos);\n  }\n};\n\nEditorView.prototype.destroyPluginViews = function destroyPluginViews() {\n  var view;\n\n  while (view = this.pluginViews.pop()) {\n    if (view.destroy) {\n      view.destroy();\n    }\n  }\n};\n\nEditorView.prototype.updatePluginViews = function updatePluginViews(prevState) {\n  var this$1 = this;\n  var plugins = this.state.plugins;\n\n  if (!prevState || prevState.plugins != plugins) {\n    this.destroyPluginViews();\n\n    for (var i = 0; i < plugins.length; i++) {\n      var plugin = plugins[i];\n\n      if (plugin.spec.view) {\n        this$1.pluginViews.push(plugin.spec.view(this$1));\n      }\n    }\n  } else {\n    for (var i$1 = 0; i$1 < this.pluginViews.length; i$1++) {\n      var pluginView = this$1.pluginViews[i$1];\n\n      if (pluginView.update) {\n        pluginView.update(this$1, prevState);\n      }\n    }\n  }\n}; // :: (string, ?(prop: *) → *) → *\n// Goes over the values of a prop, first those provided directly,\n// then those from plugins (in order), and calls `f` every time a\n// non-undefined value is found. When `f` returns a truthy value,\n// that is immediately returned. When `f` isn't provided, it is\n// treated as the identity function (the prop value is returned\n// directly).\n\n\nEditorView.prototype.someProp = function someProp(propName, f) {\n  var prop = this._props && this._props[propName],\n      value;\n\n  if (prop != null && (value = f ? f(prop) : prop)) {\n    return value;\n  }\n\n  var plugins = this.state.plugins;\n\n  if (plugins) {\n    for (var i = 0; i < plugins.length; i++) {\n      var prop$1 = plugins[i].props[propName];\n\n      if (prop$1 != null && (value = f ? f(prop$1) : prop$1)) {\n        return value;\n      }\n    }\n  }\n}; // :: () → bool\n// Query whether the view has focus.\n\n\nEditorView.prototype.hasFocus = function hasFocus() {\n  return this.root.activeElement == this.dom;\n}; // :: ()\n// Focus the editor.\n\n\nEditorView.prototype.focus = function focus() {\n  this.domObserver.stop();\n  selectionToDOM(this, true);\n  this.domObserver.start();\n\n  if (this.editable) {\n    this.dom.focus();\n  }\n}; // :: union<dom.Document, dom.DocumentFragment>\n// Get the document root in which the editor exists. This will\n// usually be the top-level `document`, but might be a [shadow\n// DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM)\n// root if the editor is inside one.\n\n\nprototypeAccessors.root.get = function () {\n  var this$1 = this;\n  var cached = this._root;\n\n  if (cached == null) {\n    for (var search = this.dom.parentNode; search; search = search.parentNode) {\n      if (search.nodeType == 9 || search.nodeType == 11 && search.host) {\n        return this$1._root = search;\n      }\n    }\n  }\n\n  return cached || document;\n}; // :: ({left: number, top: number}) → ?{pos: number, inside: number}\n// Given a pair of viewport coordinates, return the document\n// position that corresponds to them. May return null if the given\n// coordinates aren't inside of the editor. When an object is\n// returned, its `pos` property is the position nearest to the\n// coordinates, and its `inside` property holds the position of the\n// inner node that the position falls inside of, or -1 if it is at\n// the top level, not in any node.\n\n\nEditorView.prototype.posAtCoords = function posAtCoords$1(coords) {\n  var pos = posAtCoords(this, coords);\n\n  if (this.inDOMChange && pos) {\n    pos.pos = this.inDOMChange.mapping.map(pos.pos);\n\n    if (pos.inside != -1) {\n      pos.inside = this.inDOMChange.mapping.map(pos.inside);\n    }\n  }\n\n  return pos;\n}; // :: (number) → {left: number, right: number, top: number, bottom: number}\n// Returns the viewport rectangle at a given document position. `left`\n// and `right` will be the same number, as this returns a flat\n// cursor-ish rectangle.\n\n\nEditorView.prototype.coordsAtPos = function coordsAtPos$1(pos) {\n  if (this.inDOMChange) {\n    pos = this.inDOMChange.mapping.invert().map(pos);\n  }\n\n  return coordsAtPos(this, pos);\n}; // :: (number) → {node: dom.Node, offset: number}\n// Find the DOM position that corresponds to the given document\n// position. Note that you should **not** mutate the editor's\n// internal DOM, only inspect it (and even that is usually not\n// necessary).\n\n\nEditorView.prototype.domAtPos = function domAtPos(pos) {\n  if (this.inDOMChange) {\n    pos = this.inDOMChange.mapping.invert().map(pos);\n  }\n\n  return this.docView.domFromPos(pos);\n}; // :: (number) → ?dom.Node\n// Find the DOM node that represents the document node after the\n// given position. May return `null` when the position doesn't point\n// in front of a node or if the node is inside an opaque node view.\n//\n// This is intended to be able to call things like\n// `getBoundingClientRect` on that DOM node. Do **not** mutate the\n// editor DOM directly, or add styling this way, since that will be\n// immediately overriden by the editor as it redraws the node.\n\n\nEditorView.prototype.nodeDOM = function nodeDOM(pos) {\n  if (this.inDOMChange) {\n    pos = this.inDOMChange.mapping.invert().map(pos);\n  }\n\n  var desc = this.docView.descAt(pos);\n  return desc ? desc.nodeDOM : null;\n}; // :: (dom.Node, number, ?number) → number\n// Find the document position that corresponds to a given DOM\n// position. (Whenever possible, it is preferable to inspect the\n// document structure directly, rather than poking around in the\n// DOM, but sometimes—for example when interpreting an event\n// target—you don't have a choice.)\n//\n// The `bias` parameter can be used to influence which side of a DOM\n// node to use when the position is inside a leaf node.\n\n\nEditorView.prototype.posAtDOM = function posAtDOM(node, offset, bias) {\n  if (bias === void 0) bias = -1;\n  var pos = this.docView.posFromDOM(node, offset, bias);\n\n  if (pos == null) {\n    throw new RangeError(\"DOM position not inside the editor\");\n  }\n\n  if (this.inDOMChange) {\n    pos = this.inDOMChange.mapping.map(pos);\n  }\n\n  return pos;\n}; // :: (union<\"up\", \"down\", \"left\", \"right\", \"forward\", \"backward\">, ?EditorState) → bool\n// Find out whether the selection is at the end of a textblock when\n// moving in a given direction. When, for example, given `\"left\"`,\n// it will return true if moving left from the current cursor\n// position would leave that position's parent textblock. Will apply\n// to the view's current state by default, but it is possible to\n// pass a different state.\n\n\nEditorView.prototype.endOfTextblock = function endOfTextblock$1(dir, state) {\n  return endOfTextblock(this, state || this.state, dir);\n}; // :: ()\n// Removes the editor from the DOM and destroys all [node\n// views](#view.NodeView).\n\n\nEditorView.prototype.destroy = function destroy() {\n  if (!this.docView) {\n    return;\n  }\n\n  destroyInput(this);\n  this.destroyPluginViews();\n  this.selectionReader.destroy();\n\n  if (this.mounted) {\n    this.docView.update(this.state.doc, [], viewDecorations(this), this);\n    this.dom.textContent = \"\";\n  } else if (this.dom.parentNode) {\n    this.dom.parentNode.removeChild(this.dom);\n  }\n\n  this.docView.destroy();\n  this.docView = null;\n}; // Used for testing.\n\n\nEditorView.prototype.dispatchEvent = function dispatchEvent$1(event) {\n  return dispatchEvent(this, event);\n}; // :: (Transaction)\n// Dispatch a transaction. Will call\n// [`dispatchTransaction`](#view.DirectEditorProps.dispatchTransaction)\n// when given, and otherwise defaults to applying the transaction to\n// the current state and calling\n// [`updateState`](#view.EditorView.updateState) with the result.\n// This method is bound to the view instance, so that it can be\n// easily passed around.\n\n\nEditorView.prototype.dispatch = function dispatch(tr) {\n  var dispatchTransaction = this._props.dispatchTransaction;\n\n  if (dispatchTransaction) {\n    dispatchTransaction.call(this, tr);\n  } else {\n    this.updateState(this.state.apply(tr));\n  }\n};\n\nObject.defineProperties(EditorView.prototype, prototypeAccessors);\n\nfunction computeDocDeco(view) {\n  var attrs = Object.create(null);\n  attrs.class = \"ProseMirror\";\n  attrs.contenteditable = String(view.editable);\n  view.someProp(\"attributes\", function (value) {\n    if (typeof value == \"function\") {\n      value = value(view.state);\n    }\n\n    if (value) {\n      for (var attr in value) {\n        if (attr == \"class\") {\n          attrs.class += \" \" + value[attr];\n        } else if (!attrs[attr] && attr != \"contenteditable\" && attr != \"nodeName\") {\n          attrs[attr] = String(value[attr]);\n        }\n      }\n    }\n  });\n  return [Decoration.node(0, view.state.doc.content.size, attrs)];\n}\n\nfunction cursorWrapperDOM(visible) {\n  var span = document.createElement(\"span\");\n  span.textContent = \"\\ufeff\"; // zero-width non-breaking space\n\n  if (!visible) {\n    span.style.position = \"absolute\";\n    span.style.left = \"-100000px\";\n  }\n\n  return span;\n}\n\nfunction updateCursorWrapper(view) {\n  var $pos = needsCursorWrapper(view.state); // On IE/Edge, moving the DOM selection will abort a mouse drag, so\n  // there we delay the creation of the wrapper when the mouse is down.\n\n  if ($pos && !(result.ie && view.mouseDown)) {\n    var visible = view.state.selection.visible; // Needs a cursor wrapper\n\n    var marks = view.state.storedMarks || $pos.marks(),\n        dom;\n\n    if (!view.cursorWrapper || !prosemirrorModel.Mark.sameSet(view.cursorWrapper.deco.spec.marks, marks) || view.cursorWrapper.dom.textContent != \"\\ufeff\" || view.cursorWrapper.deco.spec.visible != visible) {\n      dom = cursorWrapperDOM(visible);\n    } else if (view.cursorWrapper.deco.pos != $pos.pos) {\n      dom = view.cursorWrapper.dom;\n    }\n\n    if (dom) {\n      view.cursorWrapper = {\n        dom: dom,\n        deco: Decoration.widget($pos.pos, dom, {\n          isCursorWrapper: true,\n          marks: marks,\n          raw: true,\n          visible: visible\n        })\n      };\n    }\n  } else {\n    view.cursorWrapper = null;\n  }\n}\n\nfunction getEditable(view) {\n  return !view.someProp(\"editable\", function (value) {\n    return value(view.state) === false;\n  });\n}\n\nfunction selectionContext(root) {\n  var ref = root.getSelection();\n  var offset = ref.focusOffset;\n  var node = ref.focusNode;\n\n  if (!node || node.nodeType == 3) {\n    return null;\n  }\n\n  return [node, offset, node.nodeType == 1 ? node.childNodes[offset - 1] : null, node.nodeType == 1 ? node.childNodes[offset] : null];\n}\n\nfunction needChromeSelectionForce(context, root) {\n  var newContext = selectionContext(root);\n\n  if (!newContext || newContext[0].nodeType == 3) {\n    return false;\n  }\n\n  for (var i = 0; i < context.length; i++) {\n    if (newContext[i] != context[i]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction buildNodeViews(view) {\n  var result$$1 = {};\n  view.someProp(\"nodeViews\", function (obj) {\n    for (var prop in obj) {\n      if (!Object.prototype.hasOwnProperty.call(result$$1, prop)) {\n        result$$1[prop] = obj[prop];\n      }\n    }\n  });\n  return result$$1;\n}\n\nfunction changedNodeViews(a, b) {\n  var nA = 0,\n      nB = 0;\n\n  for (var prop in a) {\n    if (a[prop] != b[prop]) {\n      return true;\n    }\n\n    nA++;\n  }\n\n  for (var _ in b) {\n    nB++;\n  }\n\n  return nA != nB;\n} // EditorProps:: interface\n//\n// Props are configuration values that can be passed to an editor view\n// or included in a plugin. This interface lists the supported props.\n//\n// The various event-handling functions may all return `true` to\n// indicate that they handled the given event. The view will then take\n// care to call `preventDefault` on the event, except with\n// `handleDOMEvents`, where the handler itself is responsible for that.\n//\n// How a prop is resolved depends on the prop. Handler functions are\n// called one at a time, starting with the base props and then\n// searching through the plugins (in order of appearance) until one of\n// them returns true. For some props, the first plugin that yields a\n// value gets precedence.\n//\n//   handleDOMEvents:: ?Object<(view: EditorView, event: dom.Event) → bool>\n//   Can be an object mapping DOM event type names to functions that\n//   handle them. Such functions will be called before any handling\n//   ProseMirror does of events fired on the editable DOM element.\n//   Contrary to the other event handling props, when returning true\n//   from such a function, you are responsible for calling\n//   `preventDefault` yourself (or not, if you want to allow the\n//   default behavior).\n//\n//   handleKeyDown:: ?(view: EditorView, event: dom.KeyboardEvent) → bool\n//   Called when the editor receives a `keydown` event.\n//\n//   handleKeyPress:: ?(view: EditorView, event: dom.KeyboardEvent) → bool\n//   Handler for `keypress` events.\n//\n//   handleTextInput:: ?(view: EditorView, from: number, to: number, text: string) → bool\n//   Whenever the user directly input text, this handler is called\n//   before the input is applied. If it returns `true`, the default\n//   behavior of actually inserting the text is suppressed.\n//\n//   handleClickOn:: ?(view: EditorView, pos: number, node: Node, nodePos: number, event: dom.MouseEvent, direct: bool) → bool\n//   Called for each node around a click, from the inside out. The\n//   `direct` flag will be true for the inner node.\n//\n//   handleClick:: ?(view: EditorView, pos: number, event: dom.MouseEvent) → bool\n//   Called when the editor is clicked, after `handleClickOn` handlers\n//   have been called.\n//\n//   handleDoubleClickOn:: ?(view: EditorView, pos: number, node: Node, nodePos: number, event: dom.MouseEvent, direct: bool) → bool\n//   Called for each node around a double click.\n//\n//   handleDoubleClick:: ?(view: EditorView, pos: number, event: dom.MouseEvent) → bool\n//   Called when the editor is double-clicked, after `handleDoubleClickOn`.\n//\n//   handleTripleClickOn:: ?(view: EditorView, pos: number, node: Node, nodePos: number, event: dom.MouseEvent, direct: bool) → bool\n//   Called for each node around a triple click.\n//\n//   handleTripleClick:: ?(view: EditorView, pos: number, event: dom.MouseEvent) → bool\n//   Called when the editor is triple-clicked, after `handleTripleClickOn`.\n//\n//   handlePaste:: ?(view: EditorView, event: dom.Event, slice: Slice) → bool\n//   Can be used to override the behavior of pasting. `slice` is the\n//   pasted content parsed by the editor, but you can directly access\n//   the event to get at the raw content.\n//\n//   handleDrop:: ?(view: EditorView, event: dom.Event, slice: Slice, moved: bool) → bool\n//   Called when something is dropped on the editor. `moved` will be\n//   true if this drop moves from the current selection (which should\n//   thus be deleted).\n//\n//   handleScrollToSelection:: ?(view: EditorView) → bool\n//   Called when the view, after updating its state, tries to scroll\n//   the selection into view. A handler function may return false to\n//   indicate that it did not handle the scrolling and further\n//   handlers or the default behavior should be tried.\n//\n//   createSelectionBetween:: ?(view: EditorView, anchor: ResolvedPos, head: ResolvedPos) → ?Selection\n//   Can be used to override the way a selection is created when\n//   reading a DOM selection between the given anchor and head.\n//\n//   domParser:: ?DOMParser\n//   The [parser](#model.DOMParser) to use when reading editor changes\n//   from the DOM. Defaults to calling\n//   [`DOMParser.fromSchema`](#model.DOMParser^fromSchema) on the\n//   editor's schema.\n//\n//   transformPastedHTML:: ?(html: string) → string\n//   Can be used to transform pasted HTML text, _before_ it is parsed,\n//   for example to clean it up.\n//\n//   clipboardParser:: ?DOMParser\n//   The [parser](#model.DOMParser) to use when reading content from\n//   the clipboard. When not given, the value of the\n//   [`domParser`](#view.EditorProps.domParser) prop is used.\n//\n//   transformPastedText:: ?(text: string) → string\n//   Transform pasted plain text.\n//\n//   clipboardTextParser:: ?(text: string, $context: ResolvedPos) → Slice\n//   A function to parse text from the clipboard into a document\n//   slice. Called after\n//   [`transformPastedText`](#view.EditorProps.transformPastedText).\n//   The default behavior is to split the text into lines, wrap them\n//   in `<p>` tags, and call\n//   [`clipboardParser`](#view.EditorProps.clipboardParser) on it.\n//\n//   transformPasted:: ?(Slice) → Slice\n//   Can be used to transform pasted content before it is applied to\n//   the document.\n//\n//   nodeViews:: ?Object<(node: Node, view: EditorView, getPos: () → number, decorations: [Decoration]) → NodeView>\n//   Allows you to pass custom rendering and behavior logic for nodes\n//   and marks. Should map node and mark names to constructor\n//   functions that produce a [`NodeView`](#view.NodeView) object\n//   implementing the node's display behavior. For nodes, the third\n//   argument `getPos` is a function that can be called to get the\n//   node's current position, which can be useful when creating\n//   transactions to update it. For marks, the third argument is a\n//   boolean that indicates whether the mark's content is inline.\n//\n//   `decorations` is an array of node or inline decorations that are\n//   active around the node. They are automatically drawn in the\n//   normal way, and you will usually just want to ignore this, but\n//   they can also be used as a way to provide context information to\n//   the node view without adding it to the document itself.\n//\n//   clipboardSerializer:: ?DOMSerializer\n//   The DOM serializer to use when putting content onto the\n//   clipboard. If not given, the result of\n//   [`DOMSerializer.fromSchema`](#model.DOMSerializer^fromSchema)\n//   will be used.\n//\n//   clipboardTextSerializer:: ?(Slice) → string\n//   A function that will be called to get the text for the current\n//   selection when copying text to the clipboard. By default, the\n//   editor will use [`textBetween`](#model.Node.textBetween) on the\n//   selected range.\n//\n//   decorations:: ?(state: EditorState) → ?DecorationSet\n//   A set of [document decorations](#view.Decoration) to show in the\n//   view.\n//\n//   editable:: ?(state: EditorState) → bool\n//   When this returns false, the content of the view is not directly\n//   editable.\n//\n//   attributes:: ?union<Object<string>, (EditorState) → ?Object<string>>\n//   Control the DOM attributes of the editable element. May be either\n//   an object or a function going from an editor state to an object.\n//   By default, the element will get a class `\"ProseMirror\"`, and\n//   will have its `contentEditable` attribute determined by the\n//   [`editable` prop](#view.EditorProps.editable). Additional classes\n//   provided here will be added to the class. For other attributes,\n//   the value provided first (as in\n//   [`someProp`](#view.EditorView.someProp)) will be used.\n//\n//   scrollThreshold:: ?union<number, {top: number, right: number, bottom: number, left: number}>\n//   Determines the distance (in pixels) between the cursor and the\n//   end of the visible viewport at which point, when scrolling the\n//   cursor into view, scrolling takes place. Defaults to 0.\n//\n//   scrollMargin:: ?union<number, {top: number, right: number, bottom: number, left: number}>\n//   Determines the extra space (in pixels) that is left above or\n//   below the cursor when it is scrolled into view. Defaults to 5.\n// DirectEditorProps:: interface extends EditorProps\n//\n// The props object given directly to the editor view supports two\n// fields that can't be used in plugins:\n//\n//   state:: EditorState\n//   The current state of the editor.\n//\n//   dispatchTransaction:: ?(tr: Transaction)\n//   The callback over which to send transactions (state updates)\n//   produced by the view. If you specify this, you probably want to\n//   make sure this ends up calling the view's\n//   [`updateState`](#view.EditorView.updateState) method with a new\n//   state that has the transaction\n//   [applied](#state.EditorState.apply). The callback will be bound to have\n//   the view instance as its `this` binding.\n\n\nexports.EditorView = EditorView;\nexports.Decoration = Decoration;\nexports.DecorationSet = DecorationSet;\nexports.__serializeForClipboard = serializeForClipboard;\nexports.__parseFromClipboard = parseFromClipboard;","import {schema} from \"prosemirror-schema-basic\"\r\nimport {EditorState} from \"prosemirror-state\"\r\nimport {EditorView} from \"prosemirror-view\"\r\n\r\nconst getMessage = () => \"Hello World\";\r\ndocument.getElementById('output').innerHTML = getMessage();\r\nlet state = EditorState.create({schema})\r\nlet view = new EditorView(document.body, {state})\r\ndocument.getElementById('output').innerHTML = view;\r\n","// ::- Persistent data structure representing an ordered mapping from\n// strings to values, with some convenient update methods.\nfunction OrderedMap(content) {\n  this.content = content;\n}\n\nOrderedMap.prototype = {\n  constructor: OrderedMap,\n  find: function (key) {\n    for (var i = 0; i < this.content.length; i += 2) if (this.content[i] === key) return i;\n\n    return -1;\n  },\n  // :: (string) → ?any\n  // Retrieve the value stored under `key`, or return undefined when\n  // no such key exists.\n  get: function (key) {\n    var found = this.find(key);\n    return found == -1 ? undefined : this.content[found + 1];\n  },\n  // :: (string, any, ?string) → OrderedMap\n  // Create a new map by replacing the value of `key` with a new\n  // value, or adding a binding to the end of the map. If `newKey` is\n  // given, the key of the binding will be replaced with that key.\n  update: function (key, value, newKey) {\n    var self = newKey && newKey != key ? this.remove(newKey) : this;\n    var found = self.find(key),\n        content = self.content.slice();\n\n    if (found == -1) {\n      content.push(newKey || key, value);\n    } else {\n      content[found + 1] = value;\n      if (newKey) content[found] = newKey;\n    }\n\n    return new OrderedMap(content);\n  },\n  // :: (string) → OrderedMap\n  // Return a map with the given key removed, if it existed.\n  remove: function (key) {\n    var found = this.find(key);\n    if (found == -1) return this;\n    var content = this.content.slice();\n    content.splice(found, 2);\n    return new OrderedMap(content);\n  },\n  // :: (string, any) → OrderedMap\n  // Add a new key to the start of the map.\n  addToStart: function (key, value) {\n    return new OrderedMap([key, value].concat(this.remove(key).content));\n  },\n  // :: (string, any) → OrderedMap\n  // Add a new key to the end of the map.\n  addToEnd: function (key, value) {\n    var content = this.remove(key).content.slice();\n    content.push(key, value);\n    return new OrderedMap(content);\n  },\n  // :: (string, string, any) → OrderedMap\n  // Add a key after the given key. If `place` is not found, the new\n  // key is added to the end.\n  addBefore: function (place, key, value) {\n    var without = this.remove(key),\n        content = without.content.slice();\n    var found = without.find(place);\n    content.splice(found == -1 ? content.length : found, 0, key, value);\n    return new OrderedMap(content);\n  },\n  // :: ((key: string, value: any))\n  // Call the given function for each key/value pair in the map, in\n  // order.\n  forEach: function (f) {\n    for (var i = 0; i < this.content.length; i += 2) f(this.content[i], this.content[i + 1]);\n  },\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a new map by prepending the keys in this map that don't\n  // appear in `map` before the keys in `map`.\n  prepend: function (map) {\n    map = OrderedMap.from(map);\n    if (!map.size) return this;\n    return new OrderedMap(map.content.concat(this.subtract(map).content));\n  },\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a new map by appending the keys in this map that don't\n  // appear in `map` after the keys in `map`.\n  append: function (map) {\n    map = OrderedMap.from(map);\n    if (!map.size) return this;\n    return new OrderedMap(this.subtract(map).content.concat(map.content));\n  },\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a map containing all the keys in this map that don't\n  // appear in `map`.\n  subtract: function (map) {\n    var result = this;\n    map = OrderedMap.from(map);\n\n    for (var i = 0; i < map.content.length; i += 2) result = result.remove(map.content[i]);\n\n    return result;\n  },\n\n  // :: number\n  // The amount of keys in this map.\n  get size() {\n    return this.content.length >> 1;\n  }\n\n}; // :: (?union<Object, OrderedMap>) → OrderedMap\n// Return a map with the given content. If null, create an empty\n// map. If given an ordered map, return that map itself. If given an\n// object, create a map from the object's properties.\n\nOrderedMap.from = function (value) {\n  if (value instanceof OrderedMap) return value;\n  var content = [];\n  if (value) for (var prop in value) content.push(prop, value[prop]);\n  return new OrderedMap(content);\n};\n\nmodule.exports = OrderedMap;"],"sourceRoot":""}